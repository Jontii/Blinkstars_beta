{"version":3,"sources":["views/kanban/KanbanView/Header.tsx","views/kanban/KanbanView/CardEditModal/ActionButton.tsx","views/kanban/KanbanView/CardEditModal/CheckItem.tsx","views/kanban/KanbanView/CardEditModal/CheckItemAdd.tsx","views/kanban/KanbanView/CardEditModal/Checklist.tsx","views/kanban/KanbanView/CardEditModal/Comment.tsx","views/kanban/KanbanView/CardEditModal/CommentAdd.tsx","views/kanban/KanbanView/CardEditModal/Details.tsx","views/kanban/KanbanView/CardEditModal/index.tsx","views/kanban/KanbanView/Card.tsx","views/kanban/KanbanView/CardAdd.tsx","views/kanban/KanbanView/List.tsx","views/kanban/KanbanView/ListAdd.tsx","views/kanban/KanbanView/index.tsx"],"names":["useStyles","makeStyles","root","Header","className","rest","classes","clsx","Breadcrumbs","separator","fontSize","aria-label","Link","variant","color","to","component","RouterLink","Typography","theme","justifyContent","marginTop","spacing","marginBottom","ActionButton","iconProp","icon","children","Icon","SvgIcon","Button","fullWidth","size","startIcon","padding","display","alignItems","borderRadius","shape","backgroundColor","palette","background","dark","visibility","checkbox","marginLeft","marginRight","name","flexGrow","cursor","minHeight","deleteButton","CheckItem","card","checklist","checkItem","editing","onEditCancel","onEditInit","onEditComplete","dispatch","useDispatch","enqueueSnackbar","useSnackbar","useState","setName","handleStateChange","event","a","persist","state","target","checked","updateCheckItem","id","console","error","handleSave","handleDelete","deleteCheckItem","Checkbox","onChange","Box","TextField","value","mt","onClick","IconButton","defaultProps","CheckItemAdd","isExpanded","setExpanded","addCheckItem","placeholder","listIcon","Checklist","editingName","setEditingName","editingCheckItem","setEditingCheckItem","handleNameSave","updateChecklist","deleteChecklist","handleCheckItemEditCancel","handleCheckItemEditComplete","totalCheckItems","checkItems","length","completedCheckItems","filter","completePercentage","Math","round","ml","LinearProgress","map","key","checkItemId","messageContainer","Comment","comment","member","useSelector","memberId","kanban","members","byId","memberSelector","Avatar","alt","src","avatar","gutterBottom","Paper","message","moment","createdAt","format","field","CommentAdd","cardId","user","useAuth","setMessage","handleKeyUp","keyCode","addComment","onKeyUp","Details","list","handleUpdate","_","debounce","update","updateCard","defaultValue","label","multiline","rows","description","listName","fontWeight","typography","fontWeightMedium","CardEditModal","onClose","open","handleSubscribe","isSubscribed","handleUnsubscribe","deleteCard","handleAddChecklist","addChecklist","Dialog","maxWidth","Grid","container","item","xs","sm","checklists","comments","disabled","Divider","outline","paddingTop","paddingBottom","dragging","cover","height","badge","Card","forwardRef","ref","index","style","cards","memberIds","cardSelector","isOpened","setOpened","raised","CardMedia","image","CardContent","attachments","AvatarGroup","max","CardAdd","listId","handleAddConfirm","createCard","inner","flexDirection","maxHeight","overflowY","overflowX","width","breakpoints","down","title","droppableArea","paddingLeft","paddingRight","menu","List","isMenuOpen","setMenuOpen","lists","listSelector","moreRef","useRef","isRenaming","setRenaming","handleRenameInit","handleRename","updateList","deleteList","handleClear","clearList","py","px","ClickAwayListener","onClickAway","onBlur","margin","edge","droppableId","type","provided","innerRef","cardIds","draggableId","snapshot","isDragging","draggableProps","dragHandleProps","p","Menu","keepMounted","anchorEl","current","anchorOrigin","vertical","horizontal","PaperProps","getContentAnchorEl","MenuItem","ListAdd","createList","overflow","content","flexShrink","KanbanView","handleDragEnd","source","destination","moveCard","useEffect","getBoard","Page","onDragEnd","allIds"],"mappings":"4VAWMA,EAAYC,aAAW,iBAAO,CAClCC,KAAM,OA8BOC,EA3BiB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,UAAcC,EAAW,6BACpDC,EAAUN,IAEhB,OACE,uCAAKI,UAAWG,YAAKD,EAAQJ,KAAME,IAAgBC,GACjD,kBAACG,EAAA,EAAD,CACEC,UAAW,kBAAC,IAAD,CAAkBC,SAAS,UACtCC,aAAW,cAEX,kBAACC,EAAA,EAAD,CAAMC,QAAQ,QAAQC,MAAM,UAAUC,GAAG,OAAOC,UAAWC,KAA3D,aAGA,kBAACC,EAAA,EAAD,CAAYL,QAAQ,QAAQC,MAAM,eAAlC,WAIF,kBAACI,EAAA,EAAD,CAAYL,QAAQ,KAAKC,MAAM,eAA/B,W,gTCrBAd,GAAYC,aAAW,SAACkB,GAAD,MAAmB,CAC9CjB,KAAM,CACJkB,eAAgB,aAChBC,UAAWF,EAAMG,QAAQ,GACzBC,aAAcJ,EAAMG,QAAQ,QAgCjBE,GA5B6B,SAAC,GAItC,IAHCC,EAGF,EAHJC,KACAC,EAEI,EAFJA,SACGtB,EACC,mCACEC,EAAUN,KAEV4B,EAAOH,EAAW,kBAACI,EAAA,EAAD,CAASnB,SAAS,SAASe,GAAsB,KAEzE,OACE,kBAACK,GAAA,EAAD,eACE1B,UAAWE,EAAQJ,KACnB6B,WAAS,EACTlB,QAAQ,YACRmB,KAAK,QACLC,UAAWL,GACPvB,GAEHsB,I,4CCLD3B,GAAYC,aAAW,SAACkB,GAAD,MAAmB,CAC9CjB,KAAM,CACJgC,QAASf,EAAMG,QAAQ,GACvBa,QAAS,OACTC,WAAY,aACZC,aAAclB,EAAMmB,MAAMD,aAC1B,UAAW,CACTE,gBAAiBpB,EAAMqB,QAAQC,WAAWC,KAC1C,kBAAmB,CACjBC,WAAY,aAIlBC,SAAU,CACRC,WAAY1B,EAAMG,SAAS,GAC3BwB,YAAa3B,EAAMG,QAAQ,IAE7ByB,KAAM,CACJC,SAAU,EACVC,OAAQ,UACRC,UAAW,IAEbC,aAAc,CACZR,WAAY,cAIVS,GAAgC,SAAC,GAUhC,IATLC,EASI,EATJA,KACAC,EAQI,EARJA,UACAC,EAOI,EAPJA,UACAnD,EAMI,EANJA,UACAoD,EAKI,EALJA,QACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,eACGtD,EACC,mHACEC,EAAUN,KACV4D,EAAWC,cACTC,EAAoBC,cAApBD,gBAHJ,EAIoBE,mBAAiBT,EAAUR,MAJ/C,mBAIGA,EAJH,KAISkB,EAJT,KAMEC,EAAiB,uCAAG,WACxBC,GADwB,eAAAC,EAAA,sEAItBD,EAAME,UAEAC,EAAQH,EAAMI,OAAOC,QAAU,WAAa,aAN5B,SAQhBZ,EACJa,YAAgBpB,EAAKqB,GAAIpB,EAAUoB,GAAInB,EAAUmB,GAAI,CAAEJ,WATnC,OAWtBR,EAAgB,qBAAsB,CACpCjD,QAAS,YAZW,gDAetB8D,QAAQC,MAAR,MACAd,EAAgB,uBAAwB,CACtCjD,QAAS,UAjBW,yDAAH,sDA2BjBgE,EAAU,uCAAG,sBAAAT,EAAA,+EAETR,EACJa,YAAgBpB,EAAKqB,GAAIpB,EAAUoB,GAAInB,EAAUmB,GAAI,CAAE3B,UAH1C,OAKfY,IACAG,EAAgB,qBAAsB,CACpCjD,QAAS,YAPI,gDAUf8D,QAAQC,MAAR,MACAd,EAAgB,uBAAwB,CACtCjD,QAAS,UAZI,yDAAH,qDAsBViE,EAAY,uCAAG,sBAAAV,EAAA,+EAEXR,EAASmB,YAAgB1B,EAAKqB,GAAIpB,EAAUoB,GAAInB,EAAUmB,KAF/C,OAGjBZ,EAAgB,qBAAsB,CACpCjD,QAAS,YAJM,gDAOjB8D,QAAQC,MAAR,MACAd,EAAgB,uBAAwB,CACtCjD,QAAS,UATM,yDAAH,qDAclB,OACE,uCAAKT,UAAWG,YAAKD,EAAQJ,KAAME,IAAgBC,GACjD,kBAAC2E,GAAA,EAAD,CACER,QAA6B,aAApBjB,EAAUe,MACnBW,SAAUf,EACV9D,UAAWE,EAAQsC,WAEpBY,EACC,kBAAC0B,EAAA,EAAD,CAAKlC,SAAU,GACb,kBAACmC,EAAA,EAAD,CACEC,MAAOrC,EACPlC,QAAQ,WACRkB,WAAS,EACTkD,SAtDe,SAACd,GACxBA,EAAME,UACNJ,EAAQE,EAAMI,OAAOa,UAsDf,kBAACF,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACvD,GAAA,EAAD,CACEE,KAAK,QACLnB,QAAQ,YACRC,MAAM,YACNwE,QAAST,GAJX,QAQA,kBAAC/C,GAAA,EAAD,CAAQE,KAAK,QAAQsD,QA3CV,WACnBrB,EAAQV,EAAUR,MAClBU,MAyCQ,YAMJ,kBAACyB,EAAA,EAAD,CAAK/C,QAAQ,OAAOC,WAAW,SAASY,SAAU,GAChD,kBAAC9B,EAAA,EAAD,CACEoE,QAAS5B,EACT5C,MAAM,cACND,QAAQ,QACRT,UAAWE,EAAQyC,MAElBQ,EAAUR,MAEb,kBAACwC,EAAA,EAAD,CAAYD,QAASR,EAAc1E,UAAWE,EAAQ6C,cACpD,kBAACtB,EAAA,EAAD,CAASnB,SAAS,SAChB,kBAAC,KAAD,WAuBd0C,GAAUoC,aAAe,CACvBhC,SAAS,EACTC,aAAc,aACdE,eAAgB,aAChBD,WAAY,cAGCN,UCjMTpD,GAAYC,aAAW,iBAAO,CAClCC,KAAM,OA2FOuF,GAxF6B,SAAC,GAKtC,IAJLpC,EAII,EAJJA,KACAC,EAGI,EAHJA,UACAlD,EAEI,EAFJA,UACGC,EACC,gDACEC,EAAUN,KACV4D,EAAWC,cACTC,EAAoBC,cAApBD,gBAHJ,EAIoBE,mBAAiB,IAJrC,mBAIGjB,EAJH,KAISkB,EAJT,OAK8BD,oBAAkB,GALhD,mBAKG0B,EALH,KAKeC,EALf,KAqBEd,EAAU,uCAAG,sBAAAT,EAAA,kEAEVrB,EAFU,iEAMTa,EAASgC,YAAavC,EAAKqB,GAAIpB,EAAUoB,GAAI3B,IANpC,OAOf4C,GAAY,GACZ1B,EAAQ,IACRH,EAAgB,mBAAoB,CAClCjD,QAAS,YAVI,kDAaf8D,QAAQC,MAAR,MACAd,EAAgB,uBAAwB,CACtCjD,QAAS,UAfI,0DAAH,qDAoBhB,OACE,uCAAKT,UAAWG,YAAKD,EAAQJ,KAAME,IAAgBC,GAChDqF,EACC,6BACE,kBAACP,EAAA,EAAD,CACEpD,WAAS,EACTkD,SA/BW,SAACd,GACpBA,EAAME,UACNJ,EAAQE,EAAMI,OAAOa,QA8BbS,YAAY,cACZT,MAAOrC,EACPlC,QAAQ,aAEV,kBAACqE,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACvD,GAAA,EAAD,CACEjB,QAAQ,YACRC,MAAM,UACNkB,KAAK,QACLsD,QAAST,GAJX,QAQA,kBAAC/C,GAAA,EAAD,CAAQE,KAAK,QAAQsD,QAlDV,WACnBK,GAAY,GACZ1B,EAAQ,MAgDA,YAMJ,kBAACnC,GAAA,EAAD,CAAQjB,QAAQ,WAAWmB,KAAK,QAAQsD,QA5D5B,WAChBK,GAAY,KA2DR,iBChEF3F,GAAYC,aAAW,SAACkB,GAAD,MAAmB,CAC9CjB,KAAM,GACN4F,SAAU,CACRhD,YAAa3B,EAAMG,QAAQ,QA0KhByE,GAtKuB,SAAC,GAKhC,IAJL1C,EAII,EAJJA,KACAC,EAGI,EAHJA,UACAlD,EAEI,EAFJA,UACGC,EACC,gDACEC,EAAUN,KACV4D,EAAWC,cACTC,EAAoBC,cAApBD,gBAHJ,EAIoBE,mBAAiBV,EAAUP,MAJ/C,mBAIGA,EAJH,KAISkB,EAJT,OAKkCD,oBAAkB,GALpD,mBAKGgC,EALH,KAKgBC,EALhB,OAM4CjC,mBAAwB,MANpE,mBAMGkC,EANH,KAMqBC,EANrB,KAiBEC,EAAc,uCAAG,sBAAAhC,EAAA,kEAEdrB,GAAQA,IAASO,EAAUP,KAFb,uBAGjBkD,GAAe,GACfhC,EAAQX,EAAUP,MAJD,iCAQnBkD,GAAe,GARI,SASbrC,EAASyC,YAAgBhD,EAAKqB,GAAIpB,EAAUoB,GAAI,CAAE3B,UATrC,OAUnBe,EAAgB,oBAAqB,CACnCjD,QAAS,YAXQ,kDAcnB8D,QAAQC,MAAR,MACAd,EAAgB,uBAAwB,CACtCjD,QAAS,UAhBQ,0DAAH,qDA0BdiE,EAAY,uCAAG,sBAAAV,EAAA,+EAEXR,EAAS0C,YAAgBjD,EAAKqB,GAAIpB,EAAUoB,KAFjC,OAGjBZ,EAAgB,oBAAqB,CACnCjD,QAAS,YAJM,gDAOjB8D,QAAQC,MAAR,MACAd,EAAgB,uBAAwB,CACtCjD,QAAS,UATM,yDAAH,qDAkBZ0F,EAA4B,WAChCJ,EAAoB,OAGhBK,EAA8B,WAClCL,EAAoB,OAGhBM,EAAkBnD,EAAUoD,WAAWC,OACvCC,EAAsBtD,EAAUoD,WAAWG,QAC/C,SAAAtD,GAAS,MAAwB,aAApBA,EAAUe,SACvBqC,OACIG,EACgB,IAApBL,EAAwB,IAAOG,EAAsBH,EAAmB,IAE1E,OACE,uCAAKrG,UAAWG,YAAKD,EAAQJ,KAAME,IAAgBC,GACjD,kBAAC6E,EAAA,EAAD,CAAK/C,QAAQ,QACX,kBAACN,EAAA,EAAD,CAASnB,SAAS,QAAQI,MAAM,SAASV,UAAWE,EAAQwF,UAC1D,kBAAC,KAAD,OAEDE,EACC,kBAACd,EAAA,EAAD,CAAKlC,SAAU,GACb,kBAACmC,EAAA,EAAD,CACEC,MAAOrC,EACPhB,WAAS,EACTlB,QAAQ,WACRoE,SA5Ea,SAACd,GACxBA,EAAME,UACNJ,EAAQE,EAAMI,OAAOa,UA4Eb,kBAACF,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACvD,GAAA,EAAD,CACEhB,MAAM,UACNkB,KAAK,QACLnB,QAAQ,YACRyE,QAASc,GAJX,QAQA,kBAACtE,GAAA,EAAD,CAAQE,KAAK,QAAQsD,QA7DR,WACvBW,GAAe,GACfhC,EAAQX,EAAUP,QA2DR,YAMJ,kBAACmC,EAAA,EAAD,CAAK/C,QAAQ,OAAOC,WAAW,SAASY,SAAU,GAChD,kBAAC9B,EAAA,EAAD,CACEL,QAAQ,KACRC,MAAM,cACNwE,QArGW,WACrBW,GAAe,KAsGJ3C,EAAUP,MAEb,kBAACmC,EAAA,EAAD,CAAKlC,SAAU,IACf,kBAAClB,GAAA,EAAD,CAAQE,KAAK,QAAQsD,QAASR,GAA9B,YAMN,kBAACI,EAAA,EAAD,CAAKG,GAAI,EAAGlD,QAAQ,OAAOC,WAAW,UACpC,kBAAClB,EAAA,EAAD,CAAYL,QAAQ,UAAUC,MAAM,iBACjCiG,KAAKC,MAAMF,GADd,KAGA,kBAAC5B,EAAA,EAAD,CAAK+B,GAAI,EAAGjE,SAAU,GACpB,kBAACkE,GAAA,EAAD,CACErG,QAAQ,cACRuE,MAAO0B,EACPhG,MAAM,gBAIZ,kBAACoE,EAAA,EAAD,CAAKG,GAAI,GACN/B,EAAUoD,WAAWS,KAAI,SAAA5D,GAAS,OACjC,kBAAC,GAAD,CACEC,QAAS0C,IAAqB3C,EAAUmB,GACxCnB,UAAWA,EACXF,KAAMA,EACNC,UAAWA,EACX8D,IAAK7D,EAAUmB,GACfjB,aAAc8C,EACd5C,eAAgB6C,EAChB9C,WAAY,kBArFW2D,EAqFmB9D,EAAUmB,QApF5DyB,EAAoBkB,GADU,IAACA,SAyF7B,kBAACnC,EAAA,EAAD,CAAKG,GAAI,EAAG4B,GAAI,GACd,kBAAC,GAAD,CAAc5D,KAAMA,EAAMC,UAAWA,O,mBCtKvCtD,GAAYC,aAAW,SAACkB,GAAD,MAAmB,CAC9CjB,KAAM,CACJiC,QAAS,OACTZ,aAAcJ,EAAMG,QAAQ,IAE9BgG,iBAAkB,CAChB/E,gBAAiBpB,EAAMqB,QAAQC,WAAWC,KAC1CnB,aAAcJ,EAAMG,QAAQ,GAC5BY,QAASf,EAAMG,QAAQ,QAkCZiG,GA9BmB,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,QAASpH,EAAyB,EAAzBA,UAAcC,EAAW,uCAC/DC,EAAUN,KACVyH,EAASC,aAAY,SAAApD,GAAK,OApBX,SAACA,EAAkBqD,GAGxC,OAFoBrD,EAAMsD,OAAlBC,QAEOC,KAAKH,GAiBgBI,CAAezD,EAAOkD,EAAQG,aAElE,OACE,uCAAKvH,UAAWG,YAAKD,EAAQJ,KAAME,IAAgBC,GACjD,kBAAC2H,EAAA,EAAD,CAAQC,IAAI,SAASC,IAAKT,EAAOU,SACjC,kBAACjD,EAAA,EAAD,CAAK+B,GAAI,EAAGjE,SAAU,GACpB,kBAAC9B,EAAA,EAAD,CAAYL,QAAQ,KAAKC,MAAM,cAAcsH,cAAY,GACtDX,EAAO1E,MAEV,kBAACsF,EAAA,EAAD,CAAOjI,UAAWE,EAAQgH,iBAAkBzG,QAAQ,YAClD,kBAACK,EAAA,EAAD,CAAYL,QAAQ,QAAQC,MAAM,eAC/B0G,EAAQc,UAGb,kBAACpH,EAAA,EAAD,CAAYL,QAAQ,UAAUC,MAAM,iBACjCyH,KAAOf,EAAQgB,WAAWC,OAAO,iC,SClCtCzI,GAAYC,aAAW,SAACkB,GAAD,MAAmB,CAC9CjB,KAAM,CACJiC,QAAS,OACTC,WAAY,UAEdsG,MAAO,CACL7F,WAAY1B,EAAMG,QAAQ,QA0DfqH,GAtDyB,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,OAAQxI,EAAyB,EAAzBA,UAAcC,EAAW,sCACpEC,EAAUN,KACV4D,EAAWC,cACTgF,EAASC,eAATD,KACA/E,EAAoBC,cAApBD,gBAJkE,EAK5CE,mBAAiB,IAL2B,mBAKnEsE,EALmE,KAK1DS,EAL0D,KAYpEC,EAAW,uCAAG,WAClB7E,GADkB,SAAAC,EAAA,kEAIhBD,EAAME,UAEgB,KAAlBF,EAAM8E,UAAkBX,EANZ,gCAOR1E,EAASsF,YAAWN,EAAQN,IAPpB,OAQdS,EAAW,IACXjF,EAAgB,gBAAiB,CAC/BjD,QAAS,YAVG,uDAchB8D,QAAQC,MAAR,MACAd,EAAgB,uBAAwB,CACtCjD,QAAS,UAhBK,yDAAH,sDAqBjB,OACE,uCAAKT,UAAWG,YAAKD,EAAQJ,KAAME,IAAgBC,GACjD,kBAAC2H,EAAA,EAAD,CAAQC,IAAI,SAASC,IAAKW,EAAKV,SAC/B,kBAAChD,EAAA,EAAD,CACEpD,WAAS,EACT3B,UAAWE,EAAQoI,MACnBtD,MAAOkD,EACPrD,SAjCe,SAACd,GACpBA,EAAME,UACN0E,EAAW5E,EAAMI,OAAOa,QAgCpB+D,QAASH,EACTnD,YAAY,qBACZhF,QAAQ,e,mBCpDVb,GAAYC,aAAW,iBAAO,CAClCC,KAAM,OA+DOkJ,GA5DmB,SAAC,GAAwC,IAAtC/F,EAAqC,EAArCA,KAAMjD,EAA+B,EAA/BA,UAAoBC,GAAW,EAApBgJ,KAAoB,4CAClE/I,EAAUN,KACV4D,EAAWC,cACTC,EAAoBC,cAApBD,gBAEFwF,EAAeC,KAAEC,SAAF,uCAAW,WAAMC,GAAN,SAAArF,EAAA,+EAEtBR,EAAS8F,YAAWrG,EAAKqB,GAAI+E,IAFP,OAG5B3F,EAAgB,eAAgB,CAC9BjD,QAAS,YAJiB,gDAO5B8D,QAAQC,MAAR,MACAd,EAAgB,uBAAwB,CACtCjD,QAAS,UATiB,yDAAX,sDAYlB,KAEH,OACE,uCAAKT,UAAWG,YAAKD,EAAQJ,KAAME,IAAgBC,GACjD,kBAAC6E,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACF,EAAA,EAAD,CACEtE,QAAQ,WACRkB,WAAS,EACT4H,aAActG,EAAKN,KACnBkC,SAAU,SAAAd,GAAK,OAAImF,EAAa,CAAEvG,KAAMoB,EAAMI,OAAOa,SACrDwE,MAAM,gBAGV,kBAAC1E,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACnE,EAAA,EAAD,CAAYL,QAAQ,KAAKC,MAAM,eAA/B,eAGA,kBAACoE,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACF,EAAA,EAAD,CACE0E,WAAS,EACTC,KAAM,EACN/H,WAAS,EACTlB,QAAQ,WACRoE,SAAU,SAAAd,GAAK,OACbmF,EAAa,CAAES,YAAa5F,EAAMI,OAAOa,SAE3CS,YAAY,kBACZ8D,aAActG,EAAK0G,kBCrBzB/J,GAAYC,aAAW,SAACkB,GAAD,MAAmB,CAC9CjB,KAAM,CACJgC,QAASf,EAAMG,QAAQ,IAEzB0I,SAAU,CACRC,WAAY9I,EAAM+I,WAAWC,kBAE/B7G,UAAW,CACT,QAAS,CACPjC,UAAWF,EAAMG,QAAQ,SAKzB8I,GAAwC,SAAC,GAOxC,IANL/G,EAMI,EANJA,KAEAgG,GAII,EALJjJ,UAKI,EAJJiJ,MACAgB,EAGI,EAHJA,QACAC,EAEI,EAFJA,KACGjK,EACC,4DACEC,EAAUN,KACV4D,EAAWC,cACTC,EAAoBC,cAApBD,gBAEFyG,EAAe,uCAAG,sBAAAnG,EAAA,+EAEdR,EAAS8F,YAAWrG,EAAKqB,GAAI,CAAE8F,cAAc,KAF/B,OAGpB1G,EAAgB,eAAgB,CAC9BjD,QAAS,YAJS,gDAOpB8D,QAAQC,MAAR,MACAd,EAAgB,uBAAwB,CACtCjD,QAAS,UATS,yDAAH,qDAcf4J,EAAiB,uCAAG,sBAAArG,EAAA,+EAEhBR,EAAS8F,YAAWrG,EAAKqB,GAAI,CAAE8F,cAAc,KAF7B,OAGtB1G,EAAgB,aAAc,CAC5BjD,QAAS,YAJW,gDAOtB8D,QAAQC,MAAR,MACAd,EAAgB,uBAAwB,CACtCjD,QAAS,UATW,yDAAH,qDAcjBiE,EAAY,uCAAG,sBAAAV,EAAA,+EAEXR,EAAS8G,YAAWrH,EAAKqB,KAFd,OAGjBZ,EAAgB,gBAAiB,CAC/BjD,QAAS,YAJM,gDAOjB8D,QAAQC,MAAR,MACAd,EAAgB,uBAAwB,CACtCjD,QAAS,UATM,yDAAH,qDAcZ8J,EAAkB,uCAAG,sBAAAvG,EAAA,+EAEjBR,EAASgH,YAAavH,EAAKqB,GAAI,uBAFd,OAGvBZ,EAAgB,kBAAmB,CACjCjD,QAAS,YAJY,gDAOvB8D,QAAQC,MAAR,MACAd,EAAgB,uBAAwB,CACtCjD,QAAS,UATY,yDAAH,qDAcxB,OACE,kBAACgK,EAAA,EAAD,eAAQR,QAASA,EAASC,KAAMA,EAAMQ,SAAS,KAAK/I,WAAS,GAAK1B,GAChE,yBAAKD,UAAWE,EAAQJ,MACtB,kBAACgF,EAAA,EAAD,CAAK/C,QAAQ,OAAOf,eAAe,iBACjC,kBAACF,EAAA,EAAD,CAAYL,QAAQ,QAAQC,MAAM,iBAAlC,WACU,0BAAMV,UAAWE,EAAQ0J,UAAWX,EAAKtG,OAEnD,kBAACwC,EAAA,EAAD,CAAYD,QAAS+E,GACnB,kBAACxI,EAAA,EAAD,KACE,kBAAC,IAAD,SAIN,kBAACkJ,EAAA,EAAD,CAAMC,WAAS,EAAC1J,QAAS,GACvB,kBAACyJ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,GAAD,CAAS9H,KAAMA,EAAMgG,KAAMA,IAC1BhG,EAAK+H,WAAWzE,OAAS,GACxB,kBAACzB,EAAA,EAAD,CAAKG,GAAI,GACNhC,EAAK+H,WAAWjE,KAAI,SAAA7D,GAAS,OAC5B,kBAAC,GAAD,CACE8D,IAAK9D,EAAUoB,GACfrB,KAAMA,EACNC,UAAWA,EACXlD,UAAWE,EAAQgD,gBAK3B,kBAAC4B,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACnE,EAAA,EAAD,CAAYL,QAAQ,KAAKC,MAAM,eAA/B,YAGA,kBAACoE,EAAA,EAAD,CAAKG,GAAI,GACP,kBAAC,GAAD,CAAYuD,OAAQvF,EAAKqB,KACxBrB,EAAKgI,SAAS1E,OAAS,GACtB,kBAACzB,EAAA,EAAD,CAAKG,GAAI,GACNhC,EAAKgI,SAASlE,KAAI,SAAAK,GAAO,OACxB,kBAAC,GAAD,CAASJ,IAAKI,EAAQ9C,GAAI8C,QAASA,WAO/C,kBAACuD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACjK,EAAA,EAAD,CAAYL,QAAQ,WAAWC,MAAM,iBAArC,eAGA,kBAAC,GAAD,CAAcY,KAAM,kBAAC,IAAD,MAAe4D,QAASqF,GAA5C,aAGA,kBAAC,GAAD,CAAcjJ,KAAM,kBAAC,IAAD,MAAe4J,UAAQ,GAA3C,WAGA,kBAAC,GAAD,CAAc5J,KAAM,kBAAC,IAAD,MAAe4J,UAAQ,GAA3C,UAGA,kBAAC,GAAD,CAAc5J,KAAM,kBAAC,IAAD,MAAc4J,UAAQ,GAA1C,eAGA,kBAACpG,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACnE,EAAA,EAAD,CAAYL,QAAQ,WAAWC,MAAM,iBAArC,WAGA,kBAAC,GAAD,CAAcY,KAAM,kBAAC,IAAD,MAAoB4J,UAAQ,GAAhD,QAGA,kBAAC,GAAD,CAAc5J,KAAM,kBAAC,IAAD,MAAc4J,UAAQ,GAA1C,QAGA,kBAAC,GAAD,CAAc5J,KAAM,kBAAC,IAAD,MAAgB4J,UAAQ,GAA5C,iBAGCjI,EAAKmH,aACJ,kBAAC,GAAD,CAAc9I,KAAM,kBAAC,IAAD,MAAgB4D,QAASmF,GAA7C,WAIA,kBAAC,GAAD,CAAc/I,KAAM,kBAAC,IAAD,MAAa4D,QAASiF,GAA1C,SAIF,kBAACgB,EAAA,EAAD,MACA,kBAAC,GAAD,CAAc7J,KAAM,kBAAC,KAAD,MAAiB4D,QAASR,GAA9C,iBAqBdsF,GAAc5E,aAAe,CAC3B8E,MAAM,EACND,QAAS,cAGID,UC1LTpK,GAAYC,aAAW,SAACkB,GAAD,MAAmB,CAC9CjB,KAAM,CACJsL,QAAS,OACTC,WAAYtK,EAAMG,QAAQ,GAC1BoK,cAAevK,EAAMG,QAAQ,IAE/B+B,KAAM,CACJ,UAAW,CACTd,gBAAiBpB,EAAMqB,QAAQC,WAAWC,OAG9CiJ,SAAU,CACRpJ,gBAAiBpB,EAAMqB,QAAQC,WAAWC,MAE5CkJ,MAAO,CACLC,OAAQ,KAEVC,MAAO,CACL,QAAS,CACPjJ,WAAY1B,EAAMG,QAAQ,SAK1ByK,GAAsBC,sBAC1B,WAA+DC,GAAS,IAArErD,EAAoE,EAApEA,OAAQxI,EAA4D,EAA5DA,UAAWuL,EAAiD,EAAjDA,SAAUO,EAAuC,EAAvCA,MAAO7C,EAAgC,EAAhCA,KAAM8C,EAA0B,EAA1BA,MAAU9L,EAAgB,wEAC/DC,EAAUN,KACVqD,EAAOqE,aAAY,SAAApD,GAAK,OArCb,SAACA,EAAkBsE,GAAmC,IAAD,EAC7CtE,EAAMsD,OAAzBwE,EADgE,EAChEA,MAAOvE,EADyD,EACzDA,QACTxE,EAAO+I,EAAMtE,KAAKc,GAExB,OAAO,2BACFvF,GADL,IAEEwE,QAASxE,EAAKgJ,UAAUlF,KAAI,SAACQ,GAAD,OAAsBE,EAAQC,KAAKH,QA+B7B2E,CAAahI,EAAOsE,MAFe,EAGvC5E,oBAAkB,GAHqB,mBAG9DuI,EAH8D,KAGpDC,EAHoD,KAarE,OACE,uCACEpM,UAAWG,YAAKD,EAAQJ,KAAME,GAC9B8L,MAAOA,EAEPD,IAAKA,EACLE,MAAOA,GACH9L,GAEJ,kBAAC,IAAD,CACED,UAAWG,YAAKD,EAAQ+C,KAAT,eAAkB/C,EAAQqL,SAAWA,IACpDc,OAAQd,EACR9K,QAAS8K,EAAW,YAAc,WAClCrG,QArBa,WACjBkH,GAAU,KAsBLnJ,EAAKuI,OACJ,kBAACc,EAAA,EAAD,CAAWtM,UAAWE,EAAQsL,MAAOe,MAAOtJ,EAAKuI,QAEnD,kBAACgB,EAAA,EAAD,KACE,kBAAC1L,EAAA,EAAD,CAAYL,QAAQ,KAAKC,MAAM,eAC5BuC,EAAKN,MAER,kBAACmC,EAAA,EAAD,CAAKG,GAAI,EAAGlD,QAAQ,OAAOC,WAAW,UACnCiB,EAAKmH,cACJ,kBAAC3I,EAAA,EAAD,CACEzB,UAAWE,EAAQwL,MACnBhL,MAAM,SACNJ,SAAS,SAET,kBAAC,IAAD,OAGH2C,EAAKwJ,YAAYlG,OAAS,GACzB,kBAAC9E,EAAA,EAAD,CACEzB,UAAWE,EAAQwL,MACnBhL,MAAM,SACNJ,SAAS,SAET,kBAAC,IAAD,OAGH2C,EAAK+H,WAAWzE,OAAS,GACxB,kBAAC9E,EAAA,EAAD,CACEzB,UAAWE,EAAQwL,MACnBhL,MAAM,SACNJ,SAAS,SAET,kBAAC,IAAD,OAGH2C,EAAKgI,SAAS1E,OAAS,GACtB,kBAAC9E,EAAA,EAAD,CACEzB,UAAWE,EAAQwL,MACnBhL,MAAM,SACNJ,SAAS,SAET,kBAAC,IAAD,OAGJ,kBAACwE,EAAA,EAAD,CAAKlC,SAAU,IACdK,EAAKwE,QAAQlB,OAAS,GACrB,kBAACmG,EAAA,EAAD,CAAaC,IAAK,GACf1J,EAAKwE,QAAQV,KAAI,SAAAM,GAAM,OACtB,kBAACO,EAAA,EAAD,CAAQZ,IAAKK,EAAO/C,GAAIwD,IAAKT,EAAOU,gBAOhD,kBAAC,GAAD,CACEmC,KAAMiC,EACNlC,QA5Ec,WAClBmC,GAAU,IA4ENnJ,KAAMA,EACNgG,KAAMA,QAiBhB0C,GAAKvG,aAAe,CAClBmG,UAAU,EACVQ,MAAO,IAGMJ,UCzKT/L,GAAYC,aAAW,iBAAO,CAClCC,KAAM,OA+EO8M,GA5EmB,SAAC,GAAoC,IAAlC5M,EAAiC,EAAjCA,UAAW6M,EAAsB,EAAtBA,OAAW5M,EAAW,sCAC9DC,EAAUN,KACV4D,EAAWC,cACTC,EAAoBC,cAApBD,gBAH4D,EAIlCE,oBAAkB,GAJgB,mBAI7D0B,EAJ6D,KAIjDC,EAJiD,OAK5C3B,mBAAiB,IAL2B,mBAK7DjB,EAL6D,KAKvDkB,EALuD,KAqB9DiJ,EAAgB,uCAAG,sBAAA9I,EAAA,+EAEfR,EAASuJ,YAAWF,EAAQlK,GAAQ,kBAFrB,OAGrB4C,GAAY,GACZ1B,EAAQ,IACRH,EAAgB,eAAgB,CAC9BjD,QAAS,YANU,gDASrB8D,QAAQC,MAAR,MACAd,EAAgB,uBAAwB,CACtCjD,QAAS,UAXU,yDAAH,qDAgBtB,OACE,uCAAKT,UAAWG,YAAKD,EAAQJ,KAAME,IAAgBC,GAChDqF,EACC,oCACE,kBAACP,EAAA,EAAD,CACEpD,WAAS,EACT6H,MAAM,aACN7G,KAAK,WACLkC,SAtCW,SAACd,GACpBA,EAAME,UACNJ,EAAQE,EAAMI,OAAOa,QAqCbA,MAAOrC,EACPlC,QAAQ,aAEV,kBAACqE,EAAA,EAAD,CAAKG,GAAI,EAAGlD,QAAQ,OAAOf,eAAe,iBACxC,kBAACU,GAAA,EAAD,CAAQwD,QAlCM,WACtBK,GAAY,GACZ1B,EAAQ,KAgCkCpD,QAAQ,QAA1C,UAGA,kBAACiB,GAAA,EAAD,CACEwD,QAAS4H,EACTrM,QAAQ,YACRC,MAAM,aAHR,SAUJ,kBAACoE,EAAA,EAAD,CAAK/C,QAAQ,OAAOf,eAAe,UACjC,kBAACU,GAAA,EAAD,CAAQwD,QApDM,WACpBK,GAAY,KAmDN,uBC5CJ3F,GAAYC,aAAW,SAACkB,GAAD,MAAmB,CAC9CjB,KAAM,GACNkN,MAAM,aACJvK,WAAY1B,EAAMG,QAAQ,GAC1BwB,YAAa3B,EAAMG,QAAQ,GAC3Ba,QAAS,OACTkL,cAAe,SACfC,UAAW,OACXC,UAAW,SACXC,UAAW,SACXC,MAAO,KACNtM,EAAMuM,YAAYC,KAAK,MAAQ,CAC9BF,MAAO,MAGXG,MAAO,CACL3K,OAAQ,WAEV4K,cAAe,CACb3K,UAAW,GACXF,SAAU,EACVuK,UAAW,OACX9B,WAAYtK,EAAMG,QAAQ,GAC1BoK,cAAevK,EAAMG,QAAQ,GAC7BwM,YAAa3M,EAAMG,QAAQ,GAC3ByM,aAAc5M,EAAMG,QAAQ,IAE9B0M,KAAM,CACJP,MAAO,SA4KIQ,GAxKa,SAAC,GAAoC,IAAlC7N,EAAiC,EAAjCA,UAAW6M,EAAsB,EAAtBA,OAAW5M,EAAW,sCACxDC,EAAUN,KAD8C,EAE5BgE,oBAAkB,GAFU,mBAEvDkK,EAFuD,KAE3CC,EAF2C,KAGxD9E,EAAO3B,aAAY,SAAApD,GAAK,OAzCX,SAACA,EAAkB2I,GAGtC,OAFkB3I,EAAMsD,OAAhBwG,MAEKtG,KAAKmF,GAsCgBoB,CAAa/J,EAAO2I,MAChDrJ,EAAWC,cACXyK,EAAUC,iBAAiC,MACzCzK,EAAoBC,cAApBD,gBANsD,EAOtCE,mBAAiBqF,EAAKtG,MAPgB,mBAOvDA,EAPuD,KAOjDkB,EAPiD,OAQ5BD,oBAAkB,GARU,mBAQvDwK,EARuD,KAQ3CC,EAR2C,KAuBxDC,EAAmB,WACvBD,GAAY,GACZN,GAAY,IAGRQ,EAAY,uCAAG,4BAAAvK,EAAA,kEAEZrB,EAFY,uBAGfkB,EAAQoF,EAAKtG,MACb0L,GAAY,GAJG,iCAQXhF,EAAS,CAAE1G,QAEjB0L,GAAY,GAVK,SAWX7K,EAASgL,YAAWvF,EAAK3E,GAAI+E,IAXlB,OAYjB3F,EAAgB,eAAgB,CAC9BjD,QAAS,YAbM,kDAgBjB8D,QAAQC,MAAR,MACAd,EAAgB,uBAAwB,CACtCjD,QAAS,UAlBM,0DAAH,qDAuBZiE,EAAY,uCAAG,sBAAAV,EAAA,sEAEjB+J,GAAY,GAFK,SAGXvK,EAASiL,YAAWxF,EAAK3E,KAHd,OAIjBZ,EAAgB,eAAgB,CAC9BjD,QAAS,YALM,gDAQjB8D,QAAQC,MAAR,MACAd,EAAgB,uBAAwB,CACtCjD,QAAS,UAVM,yDAAH,qDAeZiO,EAAW,uCAAG,sBAAA1K,EAAA,sEAEhB+J,GAAY,GAFI,SAGVvK,EAASmL,YAAU1F,EAAK3E,KAHd,OAIhBZ,EAAgB,eAAgB,CAC9BjD,QAAS,YALK,gDAQhB8D,QAAQC,MAAR,MACAd,EAAgB,uBAAwB,CACtCjD,QAAS,UAVK,yDAAH,qDAejB,OACE,uCAAKT,UAAWG,YAAKD,EAAQJ,KAAME,IAAgBC,GACjD,kBAACgI,EAAA,EAAD,CAAOjI,UAAWE,EAAQ8M,OACxB,kBAAClI,EAAA,EAAD,CAAK8J,GAAI,EAAGC,GAAI,EAAG9M,QAAQ,OAAOC,WAAW,UAC1CoM,EACC,kBAACU,EAAA,EAAD,CAAmBC,YAAaR,GAC9B,kBAACxJ,EAAA,EAAD,CACEC,MAAOrC,EACPqM,OAAQT,EACR1J,SAxEO,SAACd,GACpBA,EAAME,UACNJ,EAAQE,EAAMI,OAAOa,QAuETvE,QAAQ,WACRwO,OAAO,WAIX,kBAACnO,EAAA,EAAD,CAAYJ,MAAM,UAAUD,QAAQ,KAAKyE,QAASoJ,GAC/CrF,EAAKtG,MAGV,kBAACmC,EAAA,EAAD,CAAKlC,SAAU,IACf,kBAACuC,EAAA,EAAD,CACEzE,MAAM,UACNwO,KAAK,MACLhK,QA9Fa,WACrB6I,GAAY,IA8FJlC,IAAKqC,GAEL,kBAACzM,EAAA,EAAD,CAASnB,SAAS,SAChB,kBAAC,IAAD,SAIN,kBAAC6K,EAAA,EAAD,MACA,kBAAC,IAAD,CAAWgE,YAAalG,EAAK3E,GAAI8K,KAAK,SACnC,SAAAC,GAAQ,OACP,yBAAKxD,IAAKwD,EAASC,SAAUtP,UAAWE,EAAQuN,eAC7CxE,EAAKsG,QAAQxI,KAAI,SAACyB,EAAQsD,GAAT,OAChB,kBAAC,IAAD,CAAW0D,YAAahH,EAAQsD,MAAOA,EAAO9E,IAAKwB,IAChD,SAAC6G,EAAUI,GAAX,OACC,kBAAC,GAAD,eACEjH,OAAQA,EACR+C,SAAUkE,EAASC,WACnB5D,MAAOA,EACP9E,IAAKwB,EACLS,KAAMA,EAEN4C,IAAKwD,EAASC,SACdvD,MAAK,eAAOsD,EAASM,eAAe5D,QAChCsD,EAASM,eACTN,EAASO,wBAKpBP,EAAS5J,gBAIhB,kBAAC0F,EAAA,EAAD,MACA,kBAACrG,EAAA,EAAD,CAAK+K,EAAG,GACN,kBAAC,GAAD,CAAShD,OAAQ5D,EAAK3E,MAExB,kBAACwL,EAAA,EAAD,CACEC,aAAW,EACXC,SAAU9B,EAAQ+B,QAClB/F,KAAM4D,EACN7D,QApIgB,WACtB8D,GAAY,IAoINmC,aAAc,CACZC,SAAU,SACVC,WAAY,UAEdC,WAAY,CAAErQ,UAAWE,EAAQ0N,MACjC0C,mBAAoB,MAEpB,kBAACC,EAAA,EAAD,CAAUrL,QAASoJ,GAAnB,UACA,kBAACiC,EAAA,EAAD,CAAUrL,QAASwJ,GAAnB,SACA,kBAAC6B,EAAA,EAAD,CAAUrL,QAASR,GAAnB,cCpNJ9E,GAAYC,aAAW,SAACkB,GAAD,MAAmB,CAC9CjB,KAAM,GACNkN,MAAM,aACJvK,WAAY1B,EAAMG,QAAQ,GAC1BwB,YAAa3B,EAAMG,QAAQ,GAC3BmM,MAAO,KACNtM,EAAMuM,YAAYC,KAAK,MAAQ,CAC9BF,MAAO,UAoFEmD,GA/EmB,SAAC,GAA4B,IAA1BxQ,EAAyB,EAAzBA,UAAcC,EAAW,6BACtDC,EAAUN,KACV4D,EAAWC,cACTC,EAAoBC,cAApBD,gBAHoD,EAI1BE,oBAAkB,GAJQ,mBAIrD0B,EAJqD,KAIzCC,EAJyC,OAKpC3B,mBAAiB,IALmB,mBAKrDjB,EALqD,KAK/CkB,EAL+C,KAqBtDiJ,EAAgB,uCAAG,sBAAA9I,EAAA,+EAEfR,EAASiN,YAAW9N,GAAQ,kBAFb,OAGrB4C,GAAY,GACZ1B,EAAQ,IACRH,EAAgB,eAAgB,CAC9BjD,QAAS,YANU,gDASrB8D,QAAQC,MAAR,MACAd,EAAgB,uBAAwB,CACtCjD,QAAS,UAXU,yDAAH,qDAgBtB,OACE,uCAAKT,UAAWG,YAAKD,EAAQJ,KAAME,IAAgBC,GACjD,kBAAC0L,EAAA,EAAD,CAAM3L,UAAWE,EAAQ8M,OACvB,kBAAClI,EAAA,EAAD,CAAK+K,EAAG,GACLvK,EACC,oCACE,kBAACP,EAAA,EAAD,CACEpD,WAAS,EACT6H,MAAM,aACN7G,KAAK,WACLkC,SAxCO,SAACd,GACpBA,EAAME,UACNJ,EAAQE,EAAMI,OAAOa,QAuCTA,MAAOrC,EACPlC,QAAQ,aAEV,kBAACqE,EAAA,EAAD,CAAKG,GAAI,EAAGlD,QAAQ,OAAOf,eAAe,iBACxC,kBAACU,GAAA,EAAD,CAAQwD,QApCE,WACtBK,GAAY,GACZ1B,EAAQ,KAkCsCpD,QAAQ,QAA1C,UAGA,kBAACiB,GAAA,EAAD,CACEwD,QAAS4H,EACTrM,QAAQ,YACRC,MAAM,aAHR,SAUJ,kBAACoE,EAAA,EAAD,CAAK/C,QAAQ,OAAOf,eAAe,UACjC,kBAACU,GAAA,EAAD,CAAQwD,QAtDE,WACpBK,GAAY,KAqDF,yBC/ER3F,GAAYC,aAAW,SAACkB,GAAD,MAAmB,CAC9CjB,KAAM,CACJqC,gBAAiBpB,EAAMqB,QAAQC,WAAWC,KAC1CmJ,OAAQ,OACR1J,QAAS,OACT2O,SAAU,SACVzD,cAAe,UAEjB0D,QAAS,CACP/N,SAAU,EACVgO,WAAY,EACZ7O,QAAS,OACToL,UAAW,SACXC,UAAW,QAEbJ,MAAO,CACLjL,QAAS,OACTuJ,cAAevK,EAAMG,QAAQ,GAC7BmK,WAAYtK,EAAMG,QAAQ,GAC1BwM,YAAa3M,EAAMG,QAAQ,GAC3ByM,aAAc5M,EAAMG,QAAQ,QAyEjB2P,UArEQ,WACrB,IAAM3Q,EAAUN,KACV4D,EAAWC,cACTuK,EAAU1G,aAAY,SAAApD,GAAK,OAAIA,EAAMsD,UAArCwG,MACAtK,EAAoBC,cAApBD,gBAEFoN,EAAa,uCAAG,iCAAA9M,EAAA,yDACpB+M,EADoB,EACpBA,OACAC,EAFoB,EAEpBA,YACAxB,EAHoB,EAGpBA,YAHoB,SAObwB,EAPa,oDAahBD,EAAO5B,cAAgB6B,EAAY7B,aACnC4B,EAAOjF,QAAUkF,EAAYlF,MAdb,oDAmBdiF,EAAO5B,cAAgB6B,EAAY7B,YAnBrB,iCAqBV3L,EAASyN,YAASzB,EAAawB,EAAYlF,QArBjC,gDAwBVtI,EACJyN,YAASzB,EAAawB,EAAYlF,MAAOkF,EAAY7B,cAzBvC,QA6BlBzL,EAAgB,aAAc,CAC5BjD,QAAS,YA9BO,kDAiClB8D,QAAQC,MAAR,MACAd,EAAgB,uBAAwB,CACtCjD,QAAS,UAnCO,0DAAH,sDA4CnB,OAJAyQ,qBAAU,WACR1N,EAAS2N,iBACR,CAAC3N,IAGF,kBAAC4N,EAAA,EAAD,CAAMpR,UAAWE,EAAQJ,KAAM0N,MAAM,gBACnC,kBAAC1I,EAAA,EAAD,CAAK+K,EAAG,GACN,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAiBwB,UAAWP,GAC1B,yBAAK9Q,UAAWE,EAAQyQ,SACtB,yBAAK3Q,UAAWE,EAAQ8M,OACrBgB,EAAMsD,OAAOvK,KAAI,SAAC8F,GAAD,OAChB,kBAAC,GAAD,CAAM7F,IAAK6F,EAAQA,OAAQA,OAE7B,kBAAC,GAAD","file":"static/js/79.f7d900c3.chunk.js","sourcesContent":["import { Breadcrumbs, Link, makeStyles, Typography } from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { FC } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\ninterface HeaderProps {\n  className?: string;\n}\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Header: FC<HeaderProps> = ({ className, ...rest }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={clsx(classes.root, className)} {...rest}>\n      <Breadcrumbs\n        separator={<NavigateNextIcon fontSize=\"small\" />}\n        aria-label=\"breadcrumb\"\n      >\n        <Link variant=\"body1\" color=\"inherit\" to=\"/app\" component={RouterLink}>\n          Dashboard\n        </Link>\n        <Typography variant=\"body1\" color=\"textPrimary\">\n          Kanban\n        </Typography>\n      </Breadcrumbs>\n      <Typography variant=\"h3\" color=\"textPrimary\">\n        Board\n      </Typography>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import { Button, ButtonProps, makeStyles, SvgIcon } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport React, { FC, ReactElement, ReactNode } from 'react';\nimport { Theme } from 'src/theme';\n\ninterface ActionButtonProps extends ButtonProps {\n  icon?: ReactElement;\n  children?: ReactNode;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    justifyContent: 'flex-start',\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  }\n}));\n\nconst ActionButton: FC<ActionButtonProps> = ({\n  icon: iconProp,\n  children,\n  ...rest\n}) => {\n  const classes = useStyles();\n\n  const Icon = iconProp ? <SvgIcon fontSize=\"small\">{iconProp}</SvgIcon> : null;\n\n  return (\n    <Button\n      className={classes.root}\n      fullWidth\n      variant=\"contained\"\n      size=\"small\"\n      startIcon={Icon}\n      {...rest}\n    >\n      {children}\n    </Button>\n  );\n};\n\nActionButton.propTypes = {\n  icon: PropTypes.element,\n  children: PropTypes.node\n};\n\nexport default ActionButton;\n","import {\n  Box,\n  Button,\n  Checkbox,\n  IconButton,\n  makeStyles,\n  SvgIcon,\n  TextField,\n  Typography\n} from '@material-ui/core';\nimport clsx from 'clsx';\nimport { useSnackbar } from 'notistack';\nimport PropTypes from 'prop-types';\nimport React, { ChangeEvent, FC, useState } from 'react';\nimport { Trash as TrashIcon } from 'react-feather';\nimport { deleteCheckItem, updateCheckItem } from 'src/slices/kanban';\nimport { useDispatch } from 'src/store';\nimport { Theme } from 'src/theme';\nimport { Card, CheckItem as CheckItemType, Checklist } from 'src/types/kanban';\n\ninterface CheckItemProps {\n  className?: string;\n  card: Card;\n  checklist: Checklist;\n  checkItem: CheckItemType;\n  editing?: boolean;\n  onEditCancel?: () => void;\n  onEditComplete?: () => void;\n  onEditInit?: () => void;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(1),\n    display: 'flex',\n    alignItems: 'flex-start',\n    borderRadius: theme.shape.borderRadius,\n    '&:hover': {\n      backgroundColor: theme.palette.background.dark,\n      '& $deleteButton': {\n        visibility: 'visible'\n      }\n    }\n  },\n  checkbox: {\n    marginLeft: theme.spacing(-1),\n    marginRight: theme.spacing(1)\n  },\n  name: {\n    flexGrow: 1,\n    cursor: 'pointer',\n    minHeight: 32\n  },\n  deleteButton: {\n    visibility: 'hidden'\n  }\n}));\n\nconst CheckItem: FC<CheckItemProps> = ({\n  card,\n  checklist,\n  checkItem,\n  className,\n  editing,\n  onEditCancel,\n  onEditInit,\n  onEditComplete,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const [name, setName] = useState<string>(checkItem.name);\n\n  const handleStateChange = async (\n    event: ChangeEvent<HTMLInputElement>\n  ): Promise<void> => {\n    try {\n      event.persist();\n\n      const state = event.target.checked ? 'complete' : 'incomplete';\n\n      await dispatch(\n        updateCheckItem(card.id, checklist.id, checkItem.id, { state })\n      );\n      enqueueSnackbar('Check item updated', {\n        variant: 'success'\n      });\n    } catch (err) {\n      console.error(err);\n      enqueueSnackbar('Something went wrong', {\n        variant: 'error'\n      });\n    }\n  };\n\n  const handleNameChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    event.persist();\n    setName(event.target.value);\n  };\n\n  const handleSave = async (): Promise<void> => {\n    try {\n      await dispatch(\n        updateCheckItem(card.id, checklist.id, checkItem.id, { name })\n      );\n      onEditComplete();\n      enqueueSnackbar('Check item updated', {\n        variant: 'success'\n      });\n    } catch (err) {\n      console.error(err);\n      enqueueSnackbar('Something went wrong', {\n        variant: 'error'\n      });\n    }\n  };\n\n  const handleCancel = (): void => {\n    setName(checkItem.name);\n    onEditCancel();\n  };\n\n  const handleDelete = async (): Promise<void> => {\n    try {\n      await dispatch(deleteCheckItem(card.id, checklist.id, checkItem.id));\n      enqueueSnackbar('Check item deleted', {\n        variant: 'success'\n      });\n    } catch (err) {\n      console.error(err);\n      enqueueSnackbar('Something went wrong', {\n        variant: 'error'\n      });\n    }\n  };\n\n  return (\n    <div className={clsx(classes.root, className)} {...rest}>\n      <Checkbox\n        checked={checkItem.state === 'complete'}\n        onChange={handleStateChange}\n        className={classes.checkbox}\n      />\n      {editing ? (\n        <Box flexGrow={1}>\n          <TextField\n            value={name}\n            variant=\"outlined\"\n            fullWidth\n            onChange={handleNameChange}\n          />\n          <Box mt={1}>\n            <Button\n              size=\"small\"\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={handleSave}\n            >\n              Save\n            </Button>\n            <Button size=\"small\" onClick={handleCancel}>\n              Cancel\n            </Button>\n          </Box>\n        </Box>\n      ) : (\n        <Box display=\"flex\" alignItems=\"center\" flexGrow={1}>\n          <Typography\n            onClick={onEditInit}\n            color=\"textPrimary\"\n            variant=\"body1\"\n            className={classes.name}\n          >\n            {checkItem.name}\n          </Typography>\n          <IconButton onClick={handleDelete} className={classes.deleteButton}>\n            <SvgIcon fontSize=\"small\">\n              <TrashIcon />\n            </SvgIcon>\n          </IconButton>\n        </Box>\n      )}\n    </div>\n  );\n};\n\nCheckItem.propTypes = {\n  // @ts-ignore\n  card: PropTypes.object.isRequired,\n  // @ts-ignore\n  checklist: PropTypes.object.isRequired,\n  // @ts-ignore\n  checkItem: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  editing: PropTypes.bool,\n  onEditCancel: PropTypes.func,\n  onEditComplete: PropTypes.func,\n  onEditInit: PropTypes.func\n};\n\nCheckItem.defaultProps = {\n  editing: false,\n  onEditCancel: () => {},\n  onEditComplete: () => {},\n  onEditInit: () => {}\n};\n\nexport default CheckItem;\n","import { Box, Button, makeStyles, TextField } from '@material-ui/core';\nimport clsx from 'clsx';\nimport { useSnackbar } from 'notistack';\nimport PropTypes from 'prop-types';\nimport React, { ChangeEvent, FC, useState } from 'react';\nimport { addCheckItem } from 'src/slices/kanban';\nimport { useDispatch } from 'src/store';\nimport { Card, Checklist } from 'src/types/kanban';\n\ninterface CheckItemAddProps {\n  className?: string;\n  card: Card;\n  checklist: Checklist;\n}\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst CheckItemAdd: FC<CheckItemAddProps> = ({\n  card,\n  checklist,\n  className,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const [name, setName] = useState<string>('');\n  const [isExpanded, setExpanded] = useState<boolean>(false);\n\n  const handleAdd = (): void => {\n    setExpanded(true);\n  };\n\n  const handleCancel = (): void => {\n    setExpanded(false);\n    setName('');\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    event.persist();\n    setName(event.target.value);\n  };\n\n  const handleSave = async (): Promise<void> => {\n    try {\n      if (!name) {\n        return;\n      }\n\n      await dispatch(addCheckItem(card.id, checklist.id, name));\n      setExpanded(false);\n      setName('');\n      enqueueSnackbar('Check item added', {\n        variant: 'success'\n      });\n    } catch (err) {\n      console.error(err);\n      enqueueSnackbar('Something went wrong', {\n        variant: 'error'\n      });\n    }\n  };\n\n  return (\n    <div className={clsx(classes.root, className)} {...rest}>\n      {isExpanded ? (\n        <div>\n          <TextField\n            fullWidth\n            onChange={handleChange}\n            placeholder=\"Add an item\"\n            value={name}\n            variant=\"outlined\"\n          />\n          <Box mt={1}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"small\"\n              onClick={handleSave}\n            >\n              Save\n            </Button>\n            <Button size=\"small\" onClick={handleCancel}>\n              Cancel\n            </Button>\n          </Box>\n        </div>\n      ) : (\n        <Button variant=\"outlined\" size=\"small\" onClick={handleAdd}>\n          Add an item\n        </Button>\n      )}\n    </div>\n  );\n};\n\nCheckItemAdd.propTypes = {\n  // @ts-ignore\n  card: PropTypes.object.isRequired,\n  // @ts-ignore\n  checklist: PropTypes.object.isRequired,\n  className: PropTypes.string\n};\n\nexport default CheckItemAdd;\n","import {\n  Box,\n  Button,\n  LinearProgress,\n  makeStyles,\n  SvgIcon,\n  TextField,\n  Typography\n} from '@material-ui/core';\nimport clsx from 'clsx';\nimport { useSnackbar } from 'notistack';\nimport PropTypes from 'prop-types';\nimport React, { ChangeEvent, FC, useState } from 'react';\nimport { List as ListIcon } from 'react-feather';\nimport { deleteChecklist, updateChecklist } from 'src/slices/kanban';\nimport { useDispatch } from 'src/store';\nimport { Theme } from 'src/theme';\nimport { Card, Checklist as ChecklistType } from 'src/types/kanban';\nimport CheckItem from './CheckItem';\nimport CheckItemAdd from './CheckItemAdd';\n\ninterface ChecklistProps {\n  className?: string;\n  card: Card;\n  checklist: ChecklistType;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  listIcon: {\n    marginRight: theme.spacing(3)\n  }\n}));\n\nconst Checklist: FC<ChecklistProps> = ({\n  card,\n  checklist,\n  className,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const [name, setName] = useState<string>(checklist.name);\n  const [editingName, setEditingName] = useState<boolean>(false);\n  const [editingCheckItem, setEditingCheckItem] = useState<string | null>(null);\n\n  const handleNameEdit = (): void => {\n    setEditingName(true);\n  };\n\n  const handleNameChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    event.persist();\n    setName(event.target.value);\n  };\n\n  const handleNameSave = async (): Promise<void> => {\n    try {\n      if (!name || name === checklist.name) {\n        setEditingName(false);\n        setName(checklist.name);\n        return;\n      }\n\n      setEditingName(false);\n      await dispatch(updateChecklist(card.id, checklist.id, { name }));\n      enqueueSnackbar('Checklist updated', {\n        variant: 'success'\n      });\n    } catch (err) {\n      console.error(err);\n      enqueueSnackbar('Something went wrong', {\n        variant: 'error'\n      });\n    }\n  };\n\n  const handleNameCancel = (): void => {\n    setEditingName(false);\n    setName(checklist.name);\n  };\n\n  const handleDelete = async (): Promise<void> => {\n    try {\n      await dispatch(deleteChecklist(card.id, checklist.id));\n      enqueueSnackbar('Checklist deleted', {\n        variant: 'success'\n      });\n    } catch (err) {\n      console.error(err);\n      enqueueSnackbar('Something went wrong', {\n        variant: 'error'\n      });\n    }\n  };\n\n  const handleCheckItemEditInit = (checkItemId: string): void => {\n    setEditingCheckItem(checkItemId);\n  };\n\n  const handleCheckItemEditCancel = (): void => {\n    setEditingCheckItem(null);\n  };\n\n  const handleCheckItemEditComplete = (): void => {\n    setEditingCheckItem(null);\n  };\n\n  const totalCheckItems = checklist.checkItems.length;\n  const completedCheckItems = checklist.checkItems.filter(\n    checkItem => checkItem.state === 'complete'\n  ).length;\n  const completePercentage =\n    totalCheckItems === 0 ? 100 : (completedCheckItems / totalCheckItems) * 100;\n\n  return (\n    <div className={clsx(classes.root, className)} {...rest}>\n      <Box display=\"flex\">\n        <SvgIcon fontSize=\"small\" color=\"action\" className={classes.listIcon}>\n          <ListIcon />\n        </SvgIcon>\n        {editingName ? (\n          <Box flexGrow={1}>\n            <TextField\n              value={name}\n              fullWidth\n              variant=\"outlined\"\n              onChange={handleNameChange}\n            />\n            <Box mt={1}>\n              <Button\n                color=\"primary\"\n                size=\"small\"\n                variant=\"contained\"\n                onClick={handleNameSave}\n              >\n                Save\n              </Button>\n              <Button size=\"small\" onClick={handleNameCancel}>\n                Cancel\n              </Button>\n            </Box>\n          </Box>\n        ) : (\n          <Box display=\"flex\" alignItems=\"center\" flexGrow={1}>\n            <Typography\n              variant=\"h4\"\n              color=\"textPrimary\"\n              onClick={handleNameEdit}\n            >\n              {checklist.name}\n            </Typography>\n            <Box flexGrow={1} />\n            <Button size=\"small\" onClick={handleDelete}>\n              Delete\n            </Button>\n          </Box>\n        )}\n      </Box>\n      <Box mt={1} display=\"flex\" alignItems=\"center\">\n        <Typography variant=\"caption\" color=\"textSecondary\">\n          {Math.round(completePercentage)}%\n        </Typography>\n        <Box ml={2} flexGrow={1}>\n          <LinearProgress\n            variant=\"determinate\"\n            value={completePercentage}\n            color=\"secondary\"\n          />\n        </Box>\n      </Box>\n      <Box mt={3}>\n        {checklist.checkItems.map(checkItem => (\n          <CheckItem\n            editing={editingCheckItem === checkItem.id}\n            checkItem={checkItem}\n            card={card}\n            checklist={checklist}\n            key={checkItem.id}\n            onEditCancel={handleCheckItemEditCancel}\n            onEditComplete={handleCheckItemEditComplete}\n            onEditInit={() => handleCheckItemEditInit(checkItem.id)}\n          />\n        ))}\n      </Box>\n      <Box mt={1} ml={6}>\n        <CheckItemAdd card={card} checklist={checklist} />\n      </Box>\n    </div>\n  );\n};\n\nChecklist.propTypes = {\n  className: PropTypes.string,\n  // @ts-ignore\n  card: PropTypes.object.isRequired,\n  // @ts-ignore\n  checklist: PropTypes.object.isRequired\n};\n\nexport default Checklist;\n","import { Avatar, Box, makeStyles, Paper, Typography } from '@material-ui/core';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React, { FC } from 'react';\nimport { RootState, useSelector } from 'src/store';\nimport { Theme } from 'src/theme';\nimport { Comment as CommentType, Member } from 'src/types/kanban';\n\ninterface CommentProps {\n  className?: string;\n  comment: CommentType;\n}\n\nconst memberSelector = (state: RootState, memberId: string): Member => {\n  const { members } = state.kanban;\n\n  return members.byId[memberId];\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    display: 'flex',\n    marginBottom: theme.spacing(2)\n  },\n  messageContainer: {\n    backgroundColor: theme.palette.background.dark,\n    marginBottom: theme.spacing(1),\n    padding: theme.spacing(2)\n  }\n}));\n\nconst Comment: FC<CommentProps> = ({ comment, className, ...rest }) => {\n  const classes = useStyles();\n  const member = useSelector(state => memberSelector(state, comment.memberId));\n\n  return (\n    <div className={clsx(classes.root, className)} {...rest}>\n      <Avatar alt=\"Person\" src={member.avatar} />\n      <Box ml={2} flexGrow={1}>\n        <Typography variant=\"h5\" color=\"textPrimary\" gutterBottom>\n          {member.name}\n        </Typography>\n        <Paper className={classes.messageContainer} variant=\"outlined\">\n          <Typography variant=\"body2\" color=\"textPrimary\">\n            {comment.message}\n          </Typography>\n        </Paper>\n        <Typography variant=\"caption\" color=\"textSecondary\">\n          {moment(comment.createdAt).format('MMM DD, YYYY [at] hh:mm a')}\n        </Typography>\n      </Box>\n    </div>\n  );\n};\n\nComment.propTypes = {\n  // @ts-ignore\n  comment: PropTypes.object.isRequired,\n  className: PropTypes.string\n};\n\nexport default Comment;\n","import { Avatar, makeStyles, TextField } from '@material-ui/core';\nimport clsx from 'clsx';\nimport { useSnackbar } from 'notistack';\nimport PropTypes from 'prop-types';\nimport React, { ChangeEvent, FC, KeyboardEvent, useState } from 'react';\nimport useAuth from 'src/hooks/useAuth';\nimport { addComment } from 'src/slices/kanban';\nimport { useDispatch } from 'src/store';\nimport { Theme } from 'src/theme';\n\ninterface CommentAddProps {\n  className?: string;\n  cardId: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  field: {\n    marginLeft: theme.spacing(2)\n  }\n}));\n\nconst CommentAdd: FC<CommentAddProps> = ({ cardId, className, ...rest }) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { user } = useAuth();\n  const { enqueueSnackbar } = useSnackbar();\n  const [message, setMessage] = useState<string>('');\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    event.persist();\n    setMessage(event.target.value);\n  };\n\n  const handleKeyUp = async (\n    event: KeyboardEvent<HTMLInputElement>\n  ): Promise<void> => {\n    try {\n      event.persist();\n\n      if (event.keyCode === 13 && message) {\n        await dispatch(addComment(cardId, message));\n        setMessage('');\n        enqueueSnackbar('Comment added', {\n          variant: 'success'\n        });\n      }\n    } catch (err) {\n      console.error(err);\n      enqueueSnackbar('Something went wrong', {\n        variant: 'error'\n      });\n    }\n  };\n\n  return (\n    <div className={clsx(classes.root, className)} {...rest}>\n      <Avatar alt=\"Person\" src={user.avatar} />\n      <TextField\n        fullWidth\n        className={classes.field}\n        value={message}\n        onChange={handleChange}\n        onKeyUp={handleKeyUp}\n        placeholder=\"Write a comment...\"\n        variant=\"outlined\"\n      />\n    </div>\n  );\n};\n\nCommentAdd.propTypes = {\n  cardId: PropTypes.string.isRequired,\n  className: PropTypes.string\n};\n\nexport default CommentAdd;\n","import { Box, makeStyles, TextField, Typography } from '@material-ui/core';\nimport clsx from 'clsx';\nimport _ from 'lodash';\nimport { useSnackbar } from 'notistack';\nimport PropTypes from 'prop-types';\nimport React, { FC } from 'react';\nimport { updateCard } from 'src/slices/kanban';\nimport { useDispatch } from 'src/store';\nimport { Card, List } from 'src/types/kanban';\n\ninterface DetailsProps {\n  className?: string;\n  card: Card;\n  list: List;\n}\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Details: FC<DetailsProps> = ({ card, className, list, ...rest }) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleUpdate = _.debounce(async update => {\n    try {\n      await dispatch(updateCard(card.id, update));\n      enqueueSnackbar('Card updated', {\n        variant: 'success'\n      });\n    } catch (err) {\n      console.error(err);\n      enqueueSnackbar('Something went wrong', {\n        variant: 'error'\n      });\n    }\n  }, 1000);\n\n  return (\n    <div className={clsx(classes.root, className)} {...rest}>\n      <Box mt={3}>\n        <TextField\n          variant=\"outlined\"\n          fullWidth\n          defaultValue={card.name}\n          onChange={event => handleUpdate({ name: event.target.value })}\n          label=\"Card Title\"\n        />\n      </Box>\n      <Box mt={3}>\n        <Typography variant=\"h4\" color=\"textPrimary\">\n          Description\n        </Typography>\n        <Box mt={2}>\n          <TextField\n            multiline\n            rows={6}\n            fullWidth\n            variant=\"outlined\"\n            onChange={event =>\n              handleUpdate({ description: event.target.value })\n            }\n            placeholder=\"Leave a message\"\n            defaultValue={card.description}\n          />\n        </Box>\n      </Box>\n    </div>\n  );\n};\n\nDetails.propTypes = {\n  // @ts-ignore\n  card: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  // @ts-ignore\n  list: PropTypes.object.isRequired\n};\n\nexport default Details;\n","import {\n  Box,\n  Dialog,\n  Divider,\n  Grid,\n  IconButton,\n  makeStyles,\n  SvgIcon,\n  Typography\n} from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport PropTypes from 'prop-types';\nimport React, { FC } from 'react';\nimport {\n  Archive as ArchiveIcon,\n  ArrowRight as ArrowRightIcon,\n  CheckSquare as CheckIcon,\n  Copy as CopyIcon,\n  Eye as EyeIcon,\n  EyeOff as EyeOffIcon,\n  File as FileIcon,\n  Layout as LayoutIcon,\n  Users as UsersIcon,\n  XCircle as CloseIcon\n} from 'react-feather';\nimport { addChecklist, deleteCard, updateCard } from 'src/slices/kanban';\nimport { useDispatch } from 'src/store';\nimport { Theme } from 'src/theme';\nimport { Card, List } from 'src/types/kanban';\nimport ActionButton from './ActionButton';\nimport Checklist from './Checklist';\nimport Comment from './Comment';\nimport CommentAdd from './CommentAdd';\nimport Details from './Details';\n\ninterface CardEditModalProps {\n  className?: string;\n  card: Card;\n  list: List;\n  onClose?: () => void;\n  open: boolean;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(3)\n  },\n  listName: {\n    fontWeight: theme.typography.fontWeightMedium\n  },\n  checklist: {\n    '& + &': {\n      marginTop: theme.spacing(3)\n    }\n  }\n}));\n\nconst CardEditModal: FC<CardEditModalProps> = ({\n  card,\n  className,\n  list,\n  onClose,\n  open,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleSubscribe = async (): Promise<void> => {\n    try {\n      await dispatch(updateCard(card.id, { isSubscribed: true }));\n      enqueueSnackbar('Unsubscribed', {\n        variant: 'success'\n      });\n    } catch (err) {\n      console.error(err);\n      enqueueSnackbar('Something went wrong', {\n        variant: 'error'\n      });\n    }\n  };\n\n  const handleUnsubscribe = async (): Promise<void> => {\n    try {\n      await dispatch(updateCard(card.id, { isSubscribed: false }));\n      enqueueSnackbar('Subscribed', {\n        variant: 'success'\n      });\n    } catch (err) {\n      console.error(err);\n      enqueueSnackbar('Something went wrong', {\n        variant: 'error'\n      });\n    }\n  };\n\n  const handleDelete = async (): Promise<void> => {\n    try {\n      await dispatch(deleteCard(card.id));\n      enqueueSnackbar('Card archived', {\n        variant: 'success'\n      });\n    } catch (err) {\n      console.error(err);\n      enqueueSnackbar('Something went wrong', {\n        variant: 'error'\n      });\n    }\n  };\n\n  const handleAddChecklist = async (): Promise<void> => {\n    try {\n      await dispatch(addChecklist(card.id, 'Untitled Checklist'));\n      enqueueSnackbar('Checklist added', {\n        variant: 'success'\n      });\n    } catch (err) {\n      console.error(err);\n      enqueueSnackbar('Something went wrong', {\n        variant: 'error'\n      });\n    }\n  };\n\n  return (\n    <Dialog onClose={onClose} open={open} maxWidth=\"md\" fullWidth {...rest}>\n      <div className={classes.root}>\n        <Box display=\"flex\" justifyContent=\"space-between\">\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            in list <span className={classes.listName}>{list.name}</span>\n          </Typography>\n          <IconButton onClick={onClose}>\n            <SvgIcon>\n              <CloseIcon />\n            </SvgIcon>\n          </IconButton>\n        </Box>\n        <Grid container spacing={5}>\n          <Grid item xs={12} sm={8}>\n            <Details card={card} list={list} />\n            {card.checklists.length > 0 && (\n              <Box mt={5}>\n                {card.checklists.map(checklist => (\n                  <Checklist\n                    key={checklist.id}\n                    card={card}\n                    checklist={checklist}\n                    className={classes.checklist}\n                  />\n                ))}\n              </Box>\n            )}\n            <Box mt={3}>\n              <Typography variant=\"h4\" color=\"textPrimary\">\n                Activity\n              </Typography>\n              <Box mt={2}>\n                <CommentAdd cardId={card.id} />\n                {card.comments.length > 0 && (\n                  <Box mt={3}>\n                    {card.comments.map(comment => (\n                      <Comment key={comment.id} comment={comment} />\n                    ))}\n                  </Box>\n                )}\n              </Box>\n            </Box>\n          </Grid>\n          <Grid item xs={12} sm={4}>\n            <Typography variant=\"overline\" color=\"textSecondary\">\n              Add to card\n            </Typography>\n            <ActionButton icon={<CheckIcon />} onClick={handleAddChecklist}>\n              Checklist\n            </ActionButton>\n            <ActionButton icon={<UsersIcon />} disabled>\n              Members\n            </ActionButton>\n            <ActionButton icon={<UsersIcon />} disabled>\n              Labels\n            </ActionButton>\n            <ActionButton icon={<FileIcon />} disabled>\n              Attachments\n            </ActionButton>\n            <Box mt={3}>\n              <Typography variant=\"overline\" color=\"textSecondary\">\n                Actions\n              </Typography>\n              <ActionButton icon={<ArrowRightIcon />} disabled>\n                Move\n              </ActionButton>\n              <ActionButton icon={<CopyIcon />} disabled>\n                Copy\n              </ActionButton>\n              <ActionButton icon={<LayoutIcon />} disabled>\n                Make Template\n              </ActionButton>\n              {card.isSubscribed ? (\n                <ActionButton icon={<EyeOffIcon />} onClick={handleUnsubscribe}>\n                  Unwatch\n                </ActionButton>\n              ) : (\n                <ActionButton icon={<EyeIcon />} onClick={handleSubscribe}>\n                  Watch\n                </ActionButton>\n              )}\n              <Divider />\n              <ActionButton icon={<ArchiveIcon />} onClick={handleDelete}>\n                Archive\n              </ActionButton>\n            </Box>\n          </Grid>\n        </Grid>\n      </div>\n    </Dialog>\n  );\n};\n\nCardEditModal.propTypes = {\n  // @ts-ignore\n  card: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  // @ts-ignore\n  list: PropTypes.object.isRequired,\n  onClose: PropTypes.func,\n  open: PropTypes.bool.isRequired\n};\n\nCardEditModal.defaultProps = {\n  open: false,\n  onClose: () => {}\n};\n\nexport default CardEditModal;\n","import {\n  Avatar,\n  Box,\n  Card as MuiCard,\n  CardContent,\n  CardMedia,\n  makeStyles,\n  SvgIcon,\n  Typography\n} from '@material-ui/core';\nimport { AvatarGroup } from '@material-ui/lab';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { FC, forwardRef, useState } from 'react';\nimport {\n  CheckSquare as CheckIcon,\n  Eye as EyeIcon,\n  File as FileIcon,\n  MessageCircle as MessageIcon\n} from 'react-feather';\nimport { RootState, useSelector } from 'src/store';\nimport { Theme } from 'src/theme';\nimport { Card as CardType, List, Member } from 'src/types/kanban';\nimport CardEditModal from './CardEditModal';\n\ninterface CardProps {\n  className?: string;\n  cardId: string;\n  dragging: boolean;\n  index?: number;\n  list: List;\n  style?: {};\n}\n\ninterface PopulatedCard extends CardType {\n  members: Member[];\n}\n\nconst cardSelector = (state: RootState, cardId: string): PopulatedCard => {\n  const { cards, members } = state.kanban;\n  const card = cards.byId[cardId];\n\n  return {\n    ...card,\n    members: card.memberIds.map((memberId: string) => members.byId[memberId])\n  };\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    outline: 'none',\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1)\n  },\n  card: {\n    '&:hover': {\n      backgroundColor: theme.palette.background.dark\n    }\n  },\n  dragging: {\n    backgroundColor: theme.palette.background.dark\n  },\n  cover: {\n    height: 200\n  },\n  badge: {\n    '& + &': {\n      marginLeft: theme.spacing(2)\n    }\n  }\n}));\n\nconst Card: FC<CardProps> = forwardRef(\n  ({ cardId, className, dragging, index, list, style, ...rest }, ref) => {\n    const classes = useStyles();\n    const card = useSelector(state => cardSelector(state, cardId));\n    const [isOpened, setOpened] = useState<boolean>(false);\n\n    const handleOpen = (): void => {\n      setOpened(true);\n    };\n\n    const handleClose = (): void => {\n      setOpened(false);\n    };\n\n    return (\n      <div\n        className={clsx(classes.root, className)}\n        index={index}\n        // @ts-ignore\n        ref={ref}\n        style={style}\n        {...rest}\n      >\n        <MuiCard\n          className={clsx(classes.card, { [classes.dragging]: dragging })}\n          raised={dragging}\n          variant={dragging ? 'elevation' : 'outlined'}\n          onClick={handleOpen}\n        >\n          {card.cover && (\n            <CardMedia className={classes.cover} image={card.cover} />\n          )}\n          <CardContent>\n            <Typography variant=\"h5\" color=\"textPrimary\">\n              {card.name}\n            </Typography>\n            <Box mt={2} display=\"flex\" alignItems=\"center\">\n              {card.isSubscribed && (\n                <SvgIcon\n                  className={classes.badge}\n                  color=\"action\"\n                  fontSize=\"small\"\n                >\n                  <EyeIcon />\n                </SvgIcon>\n              )}\n              {card.attachments.length > 0 && (\n                <SvgIcon\n                  className={classes.badge}\n                  color=\"action\"\n                  fontSize=\"small\"\n                >\n                  <FileIcon />\n                </SvgIcon>\n              )}\n              {card.checklists.length > 0 && (\n                <SvgIcon\n                  className={classes.badge}\n                  color=\"action\"\n                  fontSize=\"small\"\n                >\n                  <CheckIcon />\n                </SvgIcon>\n              )}\n              {card.comments.length > 0 && (\n                <SvgIcon\n                  className={classes.badge}\n                  color=\"action\"\n                  fontSize=\"small\"\n                >\n                  <MessageIcon />\n                </SvgIcon>\n              )}\n              <Box flexGrow={1} />\n              {card.members.length > 0 && (\n                <AvatarGroup max={5}>\n                  {card.members.map(member => (\n                    <Avatar key={member.id} src={member.avatar} />\n                  ))}\n                </AvatarGroup>\n              )}\n            </Box>\n          </CardContent>\n        </MuiCard>\n        <CardEditModal\n          open={isOpened}\n          onClose={handleClose}\n          card={card}\n          list={list}\n        />\n      </div>\n    );\n  }\n);\n\nCard.propTypes = {\n  cardId: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  dragging: PropTypes.bool.isRequired,\n  index: PropTypes.number,\n  // @ts-ignore\n  list: PropTypes.object.isRequired,\n  style: PropTypes.object\n};\n\nCard.defaultProps = {\n  dragging: false,\n  style: {}\n};\n\nexport default Card;\n","import { Box, Button, makeStyles, TextField } from '@material-ui/core';\nimport clsx from 'clsx';\nimport { useSnackbar } from 'notistack';\nimport PropTypes from 'prop-types';\nimport React, { ChangeEvent, FC, useState } from 'react';\nimport { createCard } from 'src/slices/kanban';\nimport { useDispatch } from 'src/store';\n\ninterface CardAddProps {\n  className?: string;\n  listId: string;\n}\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst CardAdd: FC<CardAddProps> = ({ className, listId, ...rest }) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const [isExpanded, setExpanded] = useState<boolean>(false);\n  const [name, setName] = useState<string>('');\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    event.persist();\n    setName(event.target.value);\n  };\n\n  const handleAddInit = (): void => {\n    setExpanded(true);\n  };\n\n  const handleAddCancel = (): void => {\n    setExpanded(false);\n    setName('');\n  };\n\n  const handleAddConfirm = async (): Promise<void> => {\n    try {\n      await dispatch(createCard(listId, name || 'Untitled Card'));\n      setExpanded(false);\n      setName('');\n      enqueueSnackbar('Card created', {\n        variant: 'success'\n      });\n    } catch (err) {\n      console.error(err);\n      enqueueSnackbar('Something went wrong', {\n        variant: 'error'\n      });\n    }\n  };\n\n  return (\n    <div className={clsx(classes.root, className)} {...rest}>\n      {isExpanded ? (\n        <>\n          <TextField\n            fullWidth\n            label=\"Card Title\"\n            name=\"cardName\"\n            onChange={handleChange}\n            value={name}\n            variant=\"outlined\"\n          />\n          <Box mt={2} display=\"flex\" justifyContent=\"space-between\">\n            <Button onClick={handleAddCancel} variant=\"text\">\n              Cancel\n            </Button>\n            <Button\n              onClick={handleAddConfirm}\n              variant=\"contained\"\n              color=\"secondary\"\n            >\n              Add\n            </Button>\n          </Box>\n        </>\n      ) : (\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Button onClick={handleAddInit}>Add another card</Button>\n        </Box>\n      )}\n    </div>\n  );\n};\n\nCardAdd.propTypes = {\n  className: PropTypes.string,\n  listId: PropTypes.string.isRequired\n};\n\nexport default CardAdd;\n","import {\n  Box,\n  ClickAwayListener,\n  Divider,\n  IconButton,\n  makeStyles,\n  Menu,\n  MenuItem,\n  Paper,\n  SvgIcon,\n  TextField,\n  Typography\n} from '@material-ui/core';\nimport clsx from 'clsx';\nimport { useSnackbar } from 'notistack';\nimport PropTypes from 'prop-types';\nimport React, { ChangeEvent, FC, useRef, useState } from 'react';\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\nimport { MoreVertical as MoreIcon } from 'react-feather';\nimport { clearList, deleteList, updateList } from 'src/slices/kanban';\nimport { RootState, useDispatch, useSelector } from 'src/store';\nimport { Theme } from 'src/theme';\nimport { List as ListType } from 'src/types/kanban';\nimport Card from './Card';\nimport CardAdd from './CardAdd';\n\ninterface ListProps {\n  className?: string;\n  listId: string;\n}\n\nconst listSelector = (state: RootState, listId: string): ListType => {\n  const { lists } = state.kanban;\n\n  return lists.byId[listId];\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  inner: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    display: 'flex',\n    flexDirection: 'column',\n    maxHeight: '100%',\n    overflowY: 'hidden',\n    overflowX: 'hidden',\n    width: 380,\n    [theme.breakpoints.down('xs')]: {\n      width: 300\n    }\n  },\n  title: {\n    cursor: 'pointer'\n  },\n  droppableArea: {\n    minHeight: 80,\n    flexGrow: 1,\n    overflowY: 'auto',\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2)\n  },\n  menu: {\n    width: 240\n  }\n}));\n\nconst List: FC<ListProps> = ({ className, listId, ...rest }) => {\n  const classes = useStyles();\n  const [isMenuOpen, setMenuOpen] = useState<boolean>(false);\n  const list = useSelector(state => listSelector(state, listId));\n  const dispatch = useDispatch();\n  const moreRef = useRef<HTMLButtonElement | null>(null);\n  const { enqueueSnackbar } = useSnackbar();\n  const [name, setName] = useState<string>(list.name);\n  const [isRenaming, setRenaming] = useState<boolean>(false);\n\n  const handleMenuOpen = (): void => {\n    setMenuOpen(true);\n  };\n\n  const handleMenuClose = (): void => {\n    setMenuOpen(false);\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    event.persist();\n    setName(event.target.value);\n  };\n\n  const handleRenameInit = (): void => {\n    setRenaming(true);\n    setMenuOpen(false);\n  };\n\n  const handleRename = async (): Promise<void> => {\n    try {\n      if (!name) {\n        setName(list.name);\n        setRenaming(false);\n        return;\n      }\n\n      const update = { name };\n\n      setRenaming(false);\n      await dispatch(updateList(list.id, update));\n      enqueueSnackbar('List updated', {\n        variant: 'success'\n      });\n    } catch (err) {\n      console.error(err);\n      enqueueSnackbar('Something went wrong', {\n        variant: 'error'\n      });\n    }\n  };\n\n  const handleDelete = async (): Promise<void> => {\n    try {\n      setMenuOpen(false);\n      await dispatch(deleteList(list.id));\n      enqueueSnackbar('List deleted', {\n        variant: 'success'\n      });\n    } catch (err) {\n      console.error(err);\n      enqueueSnackbar('Something went wrong', {\n        variant: 'error'\n      });\n    }\n  };\n\n  const handleClear = async (): Promise<void> => {\n    try {\n      setMenuOpen(false);\n      await dispatch(clearList(list.id));\n      enqueueSnackbar('List cleared', {\n        variant: 'success'\n      });\n    } catch (err) {\n      console.error(err);\n      enqueueSnackbar('Something went wrong', {\n        variant: 'error'\n      });\n    }\n  };\n\n  return (\n    <div className={clsx(classes.root, className)} {...rest}>\n      <Paper className={classes.inner}>\n        <Box py={1} px={2} display=\"flex\" alignItems=\"center\">\n          {isRenaming ? (\n            <ClickAwayListener onClickAway={handleRename}>\n              <TextField\n                value={name}\n                onBlur={handleRename}\n                onChange={handleChange}\n                variant=\"outlined\"\n                margin=\"dense\"\n              />\n            </ClickAwayListener>\n          ) : (\n            <Typography color=\"inherit\" variant=\"h5\" onClick={handleRenameInit}>\n              {list.name}\n            </Typography>\n          )}\n          <Box flexGrow={1} />\n          <IconButton\n            color=\"inherit\"\n            edge=\"end\"\n            onClick={handleMenuOpen}\n            ref={moreRef}\n          >\n            <SvgIcon fontSize=\"small\">\n              <MoreIcon />\n            </SvgIcon>\n          </IconButton>\n        </Box>\n        <Divider />\n        <Droppable droppableId={list.id} type=\"card\">\n          {provided => (\n            <div ref={provided.innerRef} className={classes.droppableArea}>\n              {list.cardIds.map((cardId, index) => (\n                <Draggable draggableId={cardId} index={index} key={cardId}>\n                  {(provided, snapshot) => (\n                    <Card\n                      cardId={cardId}\n                      dragging={snapshot.isDragging}\n                      index={index}\n                      key={cardId}\n                      list={list}\n                      // @ts-ignore\n                      ref={provided.innerRef}\n                      style={{ ...provided.draggableProps.style }}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                    />\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n        <Divider />\n        <Box p={2}>\n          <CardAdd listId={list.id} />\n        </Box>\n        <Menu\n          keepMounted\n          anchorEl={moreRef.current}\n          open={isMenuOpen}\n          onClose={handleMenuClose}\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center'\n          }}\n          PaperProps={{ className: classes.menu }}\n          getContentAnchorEl={null}\n        >\n          <MenuItem onClick={handleRenameInit}>Rename</MenuItem>\n          <MenuItem onClick={handleClear}>Clear</MenuItem>\n          <MenuItem onClick={handleDelete}>Delete</MenuItem>\n        </Menu>\n      </Paper>\n    </div>\n  );\n};\n\nList.propTypes = {\n  className: PropTypes.string,\n  listId: PropTypes.string.isRequired\n};\n\nexport default List;\n","import { Box, Button, Card, makeStyles, TextField } from '@material-ui/core';\nimport clsx from 'clsx';\nimport { useSnackbar } from 'notistack';\nimport PropTypes from 'prop-types';\nimport React, { ChangeEvent, FC, useState } from 'react';\nimport { createList } from 'src/slices/kanban';\nimport { useDispatch } from 'src/store';\nimport { Theme } from 'src/theme';\n\ninterface ListAddProps {\n  className?: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  inner: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 380,\n    [theme.breakpoints.down('xs')]: {\n      width: 300\n    }\n  }\n}));\n\nconst ListAdd: FC<ListAddProps> = ({ className, ...rest }) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n  const [isExpanded, setExpanded] = useState<boolean>(false);\n  const [name, setName] = useState<string>('');\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    event.persist();\n    setName(event.target.value);\n  };\n\n  const handleAddInit = (): void => {\n    setExpanded(true);\n  };\n\n  const handleAddCancel = (): void => {\n    setExpanded(false);\n    setName('');\n  };\n\n  const handleAddConfirm = async (): Promise<void> => {\n    try {\n      await dispatch(createList(name || 'Untitled list'));\n      setExpanded(false);\n      setName('');\n      enqueueSnackbar('List created', {\n        variant: 'success'\n      });\n    } catch (err) {\n      console.error(err);\n      enqueueSnackbar('Something went wrong', {\n        variant: 'error'\n      });\n    }\n  };\n\n  return (\n    <div className={clsx(classes.root, className)} {...rest}>\n      <Card className={classes.inner}>\n        <Box p={2}>\n          {isExpanded ? (\n            <>\n              <TextField\n                fullWidth\n                label=\"List Title\"\n                name=\"listName\"\n                onChange={handleChange}\n                value={name}\n                variant=\"outlined\"\n              />\n              <Box mt={2} display=\"flex\" justifyContent=\"space-between\">\n                <Button onClick={handleAddCancel} variant=\"text\">\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleAddConfirm}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  Add\n                </Button>\n              </Box>\n            </>\n          ) : (\n            <Box display=\"flex\" justifyContent=\"center\">\n              <Button onClick={handleAddInit}>Add another list</Button>\n            </Box>\n          )}\n        </Box>\n      </Card>\n    </div>\n  );\n};\n\nListAdd.propTypes = {\n  className: PropTypes.string\n};\n\nexport default ListAdd;\n","import { Box, makeStyles } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport React, { FC, useEffect } from 'react';\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport Page from 'src/components/Page';\nimport { getBoard, moveCard } from 'src/slices/kanban';\nimport { useDispatch, useSelector } from 'src/store';\nimport { Theme } from 'src/theme';\nimport Header from './Header';\nimport List from './List';\nimport ListAdd from './ListAdd';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    height: '100%',\n    display: 'flex',\n    overflow: 'hidden',\n    flexDirection: 'column'\n  },\n  content: {\n    flexGrow: 1,\n    flexShrink: 1,\n    display: 'flex',\n    overflowY: 'hidden',\n    overflowX: 'auto'\n  },\n  inner: {\n    display: 'flex',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3),\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1)\n  }\n}));\n\nconst KanbanView: FC = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { lists } = useSelector(state => state.kanban);\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleDragEnd = async ({\n    source,\n    destination,\n    draggableId\n  }: DropResult): Promise<void> => {\n    try {\n      // Dropped outside the list\n      if (!destination) {\n        return;\n      }\n\n      // Card has not been moved\n      if (\n        source.droppableId === destination.droppableId &&\n        source.index === destination.index\n      ) {\n        return;\n      }\n\n      if (source.droppableId === destination.droppableId) {\n        // Moved to the same list on diferent position\n        await dispatch(moveCard(draggableId, destination.index));\n      } else {\n        // Moved to another list\n        await dispatch(\n          moveCard(draggableId, destination.index, destination.droppableId)\n        );\n      }\n\n      enqueueSnackbar('Card moved', {\n        variant: 'success'\n      });\n    } catch (err) {\n      console.error(err);\n      enqueueSnackbar('Something went wrong', {\n        variant: 'error'\n      });\n    }\n  };\n\n  useEffect(() => {\n    dispatch(getBoard());\n  }, [dispatch]);\n\n  return (\n    <Page className={classes.root} title=\"Kanban Board\">\n      <Box p={3}>\n        <Header />\n      </Box>\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <div className={classes.content}>\n          <div className={classes.inner}>\n            {lists.allIds.map((listId: string) => (\n              <List key={listId} listId={listId} />\n            ))}\n            <ListAdd />\n          </div>\n        </div>\n      </DragDropContext>\n    </Page>\n  );\n};\n\nexport default KanbanView;\n"],"sourceRoot":""}