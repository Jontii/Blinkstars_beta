{"version":3,"sources":["hooks/useIsMountedRef.ts","views/order/OrderDetailsView/Header.tsx","views/order/OrderDetailsView/OrderInfo.tsx","views/order/OrderDetailsView/OrderItems.tsx","views/order/OrderDetailsView/index.tsx"],"names":["useIsMountedRef","isMounted","useRef","useEffect","current","useStyles","makeStyles","root","Header","className","rest","classes","Grid","clsx","container","justify","spacing","item","Breadcrumbs","separator","fontSize","aria-label","Link","variant","color","to","component","RouterLink","Typography","Button","startIcon","SvgIcon","statusOptions","OrderInfo","order","useState","status","setStatus","Card","CardHeader","title","Divider","Table","TableBody","TableRow","TableCell","customer","name","address1","city","country","id","number","moment","createdAt","format","coupon","numeral","totalAmount","currency","TextField","fullWidth","onChange","event","persist","target","value","select","SelectProps","native","map","option","key","CardActions","OrderItems","orderItems","Box","minWidth","TableHead","quantity","billingCycle","unitAmount","TablePagination","count","length","onChangePage","onChangeRowsPerPage","page","rowsPerPage","rowsPerPageOptions","defaultProps","theme","backgroundColor","palette","background","dark","minHeight","paddingTop","paddingBottom","OrderDetailsView","isMountedRef","setOrder","getOrder","useCallback","a","axios","get","response","data","console","error","Page","Container","maxWidth","mt","md","xl","xs","items"],"mappings":"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","file":"static/js/47.e43aeaec.chunk.js","sourcesContent":["import { MutableRefObject, useEffect, useRef } from 'react';\n\nconst useIsMountedRef = (): MutableRefObject<boolean> => {\n  const isMounted = useRef(true);\n\n  useEffect(\n    () => () => {\n      isMounted.current = false;\n    },\n    []\n  );\n\n  return isMounted;\n};\n\nexport default useIsMountedRef;\n","import {\n  Breadcrumbs,\n  Button,\n  Grid,\n  Link,\n  makeStyles,\n  SvgIcon,\n  Typography\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { FC } from 'react';\nimport { Edit as EditIcon } from 'react-feather';\nimport { Link as RouterLink } from 'react-router-dom';\n\ninterface HeaderProps {\n  className?: string;\n}\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Header: FC<HeaderProps> = ({ className, ...rest }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      className={clsx(classes.root, className)}\n      container\n      justify=\"space-between\"\n      spacing={3}\n      {...rest}\n    >\n      <Grid item>\n        <Breadcrumbs\n          separator={<NavigateNextIcon fontSize=\"small\" />}\n          aria-label=\"breadcrumb\"\n        >\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app\"\n            component={RouterLink}\n          >\n            Dashboard\n          </Link>\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app/management\"\n            component={RouterLink}\n          >\n            Management\n          </Link>\n          <Typography variant=\"body1\" color=\"textPrimary\">\n            Orders\n          </Typography>\n        </Breadcrumbs>\n        <Typography variant=\"h3\" color=\"textPrimary\">\n          Order Details\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Button\n          color=\"secondary\"\n          variant=\"contained\"\n          startIcon={\n            <SvgIcon fontSize=\"small\">\n              <EditIcon />\n            </SvgIcon>\n          }\n        >\n          Edit\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import {\n  Button,\n  Card,\n  CardActions,\n  CardHeader,\n  Divider,\n  Link,\n  makeStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  TextField\n} from '@material-ui/core';\nimport ReceiptIcon from '@material-ui/icons/ReceiptOutlined';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport numeral from 'numeral';\nimport PropTypes from 'prop-types';\nimport React, { ChangeEvent, FC, useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Order } from 'src/types/order';\n\ninterface OrderInfoProps {\n  className?: string;\n  order: Order;\n}\n\nconst statusOptions = ['Canceled', 'Completed', 'Rejected'];\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst OrderInfo: FC<OrderInfoProps> = ({ className, order, ...rest }) => {\n  const classes = useStyles();\n  const [status, setStatus] = useState<string>(statusOptions[0]);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    event.persist();\n    setStatus(event.target.value);\n  };\n\n  return (\n    <Card className={clsx(classes.root, className)} {...rest}>\n      <CardHeader title=\"Order info\" />\n      <Divider />\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell>Customer</TableCell>\n            <TableCell>\n              <Link component={RouterLink} to=\"/app/management/customers/1\">\n                {order.customer.name}\n              </Link>\n              <div>{order.customer.address1}</div>\n              <div>{order.customer.city}</div>\n              <div>{order.customer.country}</div>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>ID</TableCell>\n            <TableCell>#{order.id}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Number</TableCell>\n            <TableCell>{order.number}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Date</TableCell>\n            <TableCell>\n              {moment(order.createdAt).format('DD/MM/YYYY HH:MM')}\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Promotion Code</TableCell>\n            <TableCell>{order.coupon ? order.coupon : 'N/A'}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Total Amount</TableCell>\n            <TableCell>\n              {numeral(order.totalAmount).format(`${order.currency}0,0.00`)}\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Status</TableCell>\n            <TableCell>\n              <TextField\n                fullWidth\n                name=\"option\"\n                onChange={handleChange}\n                select\n                SelectProps={{ native: true }}\n                value={status}\n                variant=\"outlined\"\n              >\n                {statusOptions.map(option => (\n                  <option key={option} value={option}>\n                    {option}\n                  </option>\n                ))}\n              </TextField>\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n      <CardActions>\n        <Button startIcon={<ReceiptIcon />}>Resend invoice</Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nOrderInfo.propTypes = {\n  className: PropTypes.string,\n  // @ts-ignore\n  order: PropTypes.object.isRequired\n};\n\nexport default OrderInfo;\n","import {\n  Box,\n  Card,\n  CardHeader,\n  Divider,\n  makeStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow\n} from '@material-ui/core';\nimport clsx from 'clsx';\nimport numeral from 'numeral';\nimport PropTypes from 'prop-types';\nimport React, { FC } from 'react';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { OrderItem } from 'src/types/order';\n\ninterface OrderItemsProps {\n  className?: string;\n  orderItems: OrderItem[];\n}\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst OrderItems: FC<OrderItemsProps> = ({\n  className,\n  orderItems,\n  ...rest\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Card className={clsx(classes.root, className)} {...rest}>\n      <CardHeader title=\"Order items\" />\n      <Divider />\n      <PerfectScrollbar>\n        <Box minWidth={700}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Description</TableCell>\n                <TableCell>Billing Cycle</TableCell>\n                <TableCell>Amount</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {orderItems.map(item => (\n                <TableRow key={item.id}>\n                  <TableCell>\n                    {item.name} x {item.quantity}\n                  </TableCell>\n                  <TableCell>{item.billingCycle}</TableCell>\n                  <TableCell>\n                    {numeral(item.unitAmount).format(`${item.currency}0,0.00`)}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Box>\n      </PerfectScrollbar>\n      <TablePagination\n        component=\"div\"\n        count={orderItems.length}\n        onChangePage={() => {}}\n        onChangeRowsPerPage={() => {}}\n        page={0}\n        rowsPerPage={5}\n        rowsPerPageOptions={[5, 10, 25]}\n      />\n    </Card>\n  );\n};\n\nOrderItems.propTypes = {\n  className: PropTypes.string,\n  orderItems: PropTypes.array.isRequired\n};\n\nOrderItems.defaultProps = {\n  orderItems: []\n};\n\nexport default OrderItems;\n","import { Box, Container, Grid, makeStyles } from '@material-ui/core';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport Page from 'src/components/Page';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport { Theme } from 'src/theme';\nimport { Order } from 'src/types/order';\nimport axios from 'src/utils/axios';\nimport Header from './Header';\nimport OrderInfo from './OrderInfo';\nimport OrderItems from './OrderItems';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  }\n}));\n\nconst OrderDetailsView: FC = () => {\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const [order, setOrder] = useState<Order | null>(null);\n\n  const getOrder = useCallback(async () => {\n    try {\n      const response = await axios.get<{ order: Order }>('/api/orders/1');\n\n      if (isMountedRef.current) {\n        setOrder(response.data.order);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getOrder();\n  }, [getOrder]);\n\n  if (!order) {\n    return null;\n  }\n\n  return (\n    <Page className={classes.root} title=\"Order Details\">\n      <Container maxWidth={false}>\n        <Header />\n        <Box mt={2}>\n          <Grid container spacing={3}>\n            <Grid item md={4} xl={3} xs={12}>\n              <OrderInfo order={order} />\n            </Grid>\n            <Grid item md={8} xl={9} xs={12}>\n              <OrderItems orderItems={order.items} />\n            </Grid>\n          </Grid>\n        </Box>\n      </Container>\n    </Page>\n  );\n};\n\nexport default OrderDetailsView;\n"],"sourceRoot":""}