{"version":3,"sources":["hooks/useIsMountedRef.ts","utils/getInitials.ts","components/ProjectCard.tsx","views/project/ProjectBrowseView/Filter/MultiSelect.tsx","views/project/ProjectBrowseView/Filter/index.tsx","views/project/ProjectBrowseView/Header.tsx","views/project/ProjectBrowseView/Results.tsx","views/project/ProjectBrowseView/index.tsx"],"names":["useIsMountedRef","isMounted","useRef","useEffect","current","getInitials","name","replace","split","slice","map","v","toUpperCase","join","useStyles","makeStyles","theme","root","image","height","backgroundColor","palette","background","dark","likedButton","color","colors","red","membersIcon","marginLeft","spacing","marginRight","ProjectCard","className","project","rest","classes","useState","isLiked","setLiked","undefined","likesCount","setLikesCount","clsx","p","display","alignItems","mt","alt","src","author","avatar","ml","component","RouterLink","to","variant","title","moment","updatedAt","fromNow","pb","px","caption","py","container","justify","item","numeral","budget","format","currency","location","type","pl","pr","onClick","prevLikes","fontSize","membersCount","flexGrow","value","rating","size","readOnly","menuItem","padding","formControlLabel","width","margin","MultiSelect","label","options","onChange","anchorRef","openMenu","setOpenMenu","handleOptionToggle","event","newValue","target","checked","push","filter","Button","ref","Menu","anchorEl","elevation","onClose","open","PaperProps","style","option","MenuItem","key","FormControlLabel","control","Checkbox","indexOf","selectOptions","searchInput","chip","Filter","inputValue","setInputValue","chips","setChips","handleMultiSelectChange","Card","Box","Input","disableUnderline","fullWidth","persist","onKeyUp","keyCode","includes","prevChips","placeholder","Divider","flexWrap","Chip","onDelete","prevChip","handleChipDelete","defaultChecked","Header","Grid","Breadcrumbs","separator","aria-label","Link","Typography","startIcon","SvgIcon","position","bottom","left","content","primary","main","sortButton","textTransform","letterSpacing","Results","projects","sortRef","openSort","setOpenSort","selectedSort","setSelectedSort","mode","setMode","justifyContent","mb","length","ToggleButtonGroup","exclusive","ToggleButton","id","md","sm","xs","Pagination","count","ListItemText","minHeight","paddingTop","paddingBottom","ProjectBrowseView","isMountedRef","setProjects","getProjects","useCallback","a","axios","get","response","data","console","error","Page","Container","maxWidth"],"mappings":"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","file":"static/js/43.8a3a5324.chunk.js","sourcesContent":["import { MutableRefObject, useEffect, useRef } from 'react';\r\n\r\nconst useIsMountedRef = (): MutableRefObject<boolean> => {\r\n  const isMounted = useRef(true);\r\n\r\n  useEffect(\r\n    () => () => {\r\n      isMounted.current = false;\r\n    },\r\n    []\r\n  );\r\n\r\n  return isMounted;\r\n};\r\n\r\nexport default useIsMountedRef;\r\n","const getInitials = (name: string = '') => {\r\n  return name\r\n    .replace(/\\s+/, ' ')\r\n    .split(' ')\r\n    .slice(0, 2)\r\n    .map(v => v && v[0].toUpperCase())\r\n    .join('');\r\n};\r\n\r\nexport default getInitials;\r\n","import {\r\n  Avatar,\r\n  Box,\r\n  Card,\r\n  CardMedia,\r\n  colors,\r\n  Divider,\r\n  Grid,\r\n  IconButton,\r\n  Link,\r\n  makeStyles,\r\n  SvgIcon,\r\n  Tooltip,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport { Rating } from '@material-ui/lab';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport numeral from 'numeral';\r\nimport PropTypes from 'prop-types';\r\nimport React, { FC, useState } from 'react';\r\nimport { Users as UsersIcon } from 'react-feather';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { Theme } from 'src/theme';\r\nimport { Project } from 'src/types/project';\r\nimport getInitials from 'src/utils/getInitials';\r\n\r\ninterface ProjectCardProps {\r\n  className?: string;\r\n  project: Project;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {},\r\n  image: {\r\n    height: 200,\r\n    backgroundColor: theme.palette.background.dark\r\n  },\r\n  likedButton: {\r\n    color: colors.red[600]\r\n  },\r\n  membersIcon: {\r\n    marginLeft: theme.spacing(2),\r\n    marginRight: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nconst ProjectCard: FC<ProjectCardProps> = ({ className, project, ...rest }) => {\r\n  const classes = useStyles();\r\n  const [isLiked, setLiked] = useState<boolean>(project.isLiked);\r\n  const [likesCount, setLikesCount] = useState<number>(project.likesCount === undefined ? 0 : project.likesCount);\r\n\r\n  const handleLike = (): void => {\r\n    setLiked(true);\r\n    setLikesCount(prevLikes => prevLikes + 1);\r\n  };\r\n\r\n  const handleUnlike = (): void => {\r\n    setLiked(false);\r\n    setLikesCount(prevLikes => prevLikes - 1);\r\n  };\r\n\r\n  return (\r\n    <Card className={clsx(classes.root, className)} {...rest}>\r\n      <Box p={3}>\r\n        <CardMedia className={classes.image} image={project.image} />\r\n        <Box display=\"flex\" alignItems=\"center\" mt={2}>\r\n          <Avatar alt=\"Author\" src={project.author.avatar}>\r\n            {getInitials(project.author.name)}\r\n          </Avatar>\r\n          <Box ml={2}>\r\n            <Link\r\n              color=\"textPrimary\"\r\n              component={RouterLink}\r\n              to=\"#\"\r\n              variant=\"h5\"\r\n            >\r\n              {project.title}\r\n            </Link>\r\n            <Typography variant=\"body2\" color=\"textSecondary\">\r\n              by{' '}\r\n              <Link\r\n                color=\"textPrimary\"\r\n                component={RouterLink}\r\n                to=\"#\"\r\n                variant=\"h6\"\r\n              >\r\n                {project.author.name}\r\n              </Link>{' '}\r\n              | Updated {moment(project.updatedAt).fromNow()}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n      <Box pb={2} px={3}>\r\n        <Typography color=\"textSecondary\" variant=\"body2\">\r\n          {project.caption}\r\n        </Typography>\r\n      </Box>\r\n      <Box py={2} px={3}>\r\n        <Grid alignItems=\"center\" container justify=\"space-between\" spacing={3}>\r\n          <Grid item>\r\n            <Typography variant=\"h5\" color=\"textPrimary\">\r\n              {numeral(project.budget).format(`${project.currency}0,0.00`)}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"textSecondary\">\r\n              Budget\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"h5\" color=\"textPrimary\">\r\n              {project.location}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"textSecondary\">\r\n              Location\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"h5\" color=\"textPrimary\">\r\n              {project.type}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"textSecondary\">\r\n              Type\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      <Divider />\r\n      <Box py={2} pl={2} pr={3} display=\"flex\" alignItems=\"center\">\r\n        {isLiked ? (\r\n          <Tooltip title=\"Unlike\">\r\n            <IconButton className={classes.likedButton} onClick={handleUnlike}>\r\n              <FavoriteIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </Tooltip>\r\n        ) : (\r\n          <Tooltip title=\"Like\">\r\n            <IconButton onClick={handleLike}>\r\n              <FavoriteBorderIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n        <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n          {likesCount}\r\n        </Typography>\r\n        <SvgIcon\r\n          fontSize=\"small\"\r\n          color=\"action\"\r\n          className={classes.membersIcon}\r\n        >\r\n          <UsersIcon />\r\n        </SvgIcon>\r\n        <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n          {project.membersCount}\r\n        </Typography>\r\n        <Box flexGrow={1} />\r\n        <Rating value={project.rating} size=\"small\" readOnly />\r\n      </Box>\r\n    </Card>\r\n  );\r\n};\r\n\r\nProjectCard.propTypes = {\r\n  className: PropTypes.string,\r\n  // @ts-ignore\r\n  project: PropTypes.object.isRequired\r\n};\r\n\r\nexport default ProjectCard;\r\n","import {\r\n  Button,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  makeStyles,\r\n  Menu,\r\n  MenuItem\r\n} from '@material-ui/core';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport PropTypes from 'prop-types';\r\nimport React, { ChangeEvent, FC, useRef, useState } from 'react';\r\nimport { Theme } from 'src/theme';\r\n\r\ninterface MultiSelectProps {\r\n  label: string;\r\n  onChange?: (value: string[]) => void;\r\n  options: any[];\r\n  value: string[];\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {},\r\n  menuItem: {\r\n    padding: 0\r\n  },\r\n  formControlLabel: {\r\n    padding: theme.spacing(0.5, 2),\r\n    width: '100%',\r\n    margin: 0\r\n  }\r\n}));\r\n\r\nconst MultiSelect: FC<MultiSelectProps> = ({\r\n  label,\r\n  options,\r\n  value,\r\n  onChange\r\n}) => {\r\n  const classes = useStyles();\r\n  const anchorRef = useRef<any>(null);\r\n  const [openMenu, setOpenMenu] = useState<boolean>(false);\r\n\r\n  const handleMenuOpen = (): void => {\r\n    setOpenMenu(true);\r\n  };\r\n\r\n  const handleMenuClose = (): void => {\r\n    setOpenMenu(false);\r\n  };\r\n\r\n  const handleOptionToggle = (event: ChangeEvent<HTMLInputElement>): void => {\r\n    let newValue = [...value];\r\n\r\n    if (event.target.checked) {\r\n      newValue.push(event.target.value);\r\n    } else {\r\n      newValue = newValue.filter(item => item !== event.target.value);\r\n    }\r\n\r\n    if (onChange) {\r\n      onChange(newValue);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={handleMenuOpen} ref={anchorRef}>\r\n        {label}\r\n        <ArrowDropDownIcon />\r\n      </Button>\r\n      <Menu\r\n        anchorEl={anchorRef.current}\r\n        elevation={1}\r\n        onClose={handleMenuClose}\r\n        open={openMenu}\r\n        PaperProps={{ style: { width: 250 } }}\r\n      >\r\n        {options.map(option => (\r\n          <MenuItem className={classes.menuItem} key={option}>\r\n            <FormControlLabel\r\n              className={classes.formControlLabel}\r\n              control={\r\n                <Checkbox\r\n                  checked={value.indexOf(option) > -1}\r\n                  onChange={handleOptionToggle}\r\n                  value={option}\r\n                />\r\n              }\r\n              label={option}\r\n            />\r\n          </MenuItem>\r\n        ))}\r\n      </Menu>\r\n    </>\r\n  );\r\n};\r\n\r\nMultiSelect.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n  options: PropTypes.array.isRequired,\r\n  value: PropTypes.array.isRequired\r\n};\r\n\r\nexport default MultiSelect;\r\n","import {\r\n  Box,\r\n  Card,\r\n  Checkbox,\r\n  Chip,\r\n  Divider,\r\n  FormControlLabel,\r\n  Input,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React, { ChangeEvent, FC, KeyboardEvent, useState } from 'react';\r\nimport { Theme } from 'src/theme';\r\nimport MultiSelect from './MultiSelect';\r\n\r\ninterface FilterProps {\r\n  className?: string;\r\n}\r\n\r\nconst selectOptions = [\r\n  {\r\n    label: 'Type',\r\n    options: ['Freelance', 'Full Time', 'Part Time', 'Internship']\r\n  },\r\n  {\r\n    label: 'Level',\r\n    options: ['Novice', 'Expert']\r\n  },\r\n  {\r\n    label: 'Location',\r\n    options: [\r\n      'Africa',\r\n      'Asia',\r\n      'Australia',\r\n      'Europe',\r\n      'North America',\r\n      'South America'\r\n    ]\r\n  },\r\n  {\r\n    label: 'Roles',\r\n    options: ['Android', 'Web Developer', 'iOS']\r\n  }\r\n];\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {},\r\n  searchInput: {\r\n    marginLeft: theme.spacing(2)\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nconst Filter: FC<FilterProps> = ({ className, ...rest }) => {\r\n  const classes = useStyles();\r\n  const [inputValue, setInputValue] = useState<string>('');\r\n  const [chips, setChips] = useState<string[]>([\r\n    'Freelance',\r\n    'Full Time',\r\n    'Novice',\r\n    'Europe',\r\n    'Android',\r\n    'Web Developer'\r\n  ]);\r\n\r\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n    event.persist();\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const handleInputKeyup = (event: KeyboardEvent<HTMLInputElement>): void => {\r\n    event.persist();\r\n\r\n    if (event.keyCode === 13 && inputValue) {\r\n      if (!chips.includes(inputValue)) {\r\n        setChips(prevChips => [...prevChips, inputValue]);\r\n        setInputValue('');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChipDelete = (chip: string): void => {\r\n    setChips(prevChips => prevChips.filter(prevChip => chip !== prevChip));\r\n  };\r\n\r\n  const handleMultiSelectChange = (value: string[]): void => {\r\n    setChips(value);\r\n  };\r\n\r\n  return (\r\n    <Card className={clsx(classes.root, className)} {...rest}>\r\n      <Box p={2} display=\"flex\" alignItems=\"center\">\r\n        <SearchIcon />\r\n        <Input\r\n          disableUnderline\r\n          fullWidth\r\n          className={classes.searchInput}\r\n          onChange={handleInputChange}\r\n          onKeyUp={handleInputKeyup}\r\n          placeholder=\"Enter a keyword\"\r\n          value={inputValue}\r\n        />\r\n      </Box>\r\n      <Divider />\r\n      <Box p={2} display=\"flex\" alignItems=\"center\" flexWrap=\"wrap\">\r\n        {chips.map(chip => (\r\n          <Chip\r\n            className={classes.chip}\r\n            key={chip}\r\n            label={chip}\r\n            onDelete={() => handleChipDelete(chip)}\r\n          />\r\n        ))}\r\n      </Box>\r\n      <Divider />\r\n      <Box display=\"flex\" alignItems=\"center\" flexWrap=\"wrap\" p={1}>\r\n        {selectOptions.map(option => (\r\n          <MultiSelect\r\n            key={option.label}\r\n            label={option.label}\r\n            onChange={handleMultiSelectChange}\r\n            options={option.options}\r\n            value={chips}\r\n          />\r\n        ))}\r\n        <Box flexGrow={1} />\r\n        <FormControlLabel\r\n          control={<Checkbox defaultChecked />}\r\n          label=\"In network\"\r\n        />\r\n      </Box>\r\n    </Card>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default Filter;\r\n","import {\r\n  Breadcrumbs,\r\n  Button,\r\n  Grid,\r\n  Link,\r\n  makeStyles,\r\n  SvgIcon,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React, { FC } from 'react';\r\nimport { PlusCircle as PlusIcon } from 'react-feather';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\ninterface HeaderProps {\r\n  className?: string;\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {}\r\n}));\r\n\r\nconst Header: FC<HeaderProps> = ({ className, ...rest }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid\r\n      alignItems=\"center\"\r\n      container\r\n      justify=\"space-between\"\r\n      spacing={3}\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Grid item>\r\n        <Breadcrumbs\r\n          separator={<NavigateNextIcon fontSize=\"small\" />}\r\n          aria-label=\"breadcrumb\"\r\n        >\r\n          <Link\r\n            variant=\"body1\"\r\n            color=\"inherit\"\r\n            to=\"/app\"\r\n            component={RouterLink}\r\n          >\r\n            Dashboard\r\n          </Link>\r\n          <Link\r\n            variant=\"body1\"\r\n            color=\"inherit\"\r\n            to=\"/app/projects\"\r\n            component={RouterLink}\r\n          >\r\n            Projects\r\n          </Link>\r\n          <Typography variant=\"body1\" color=\"textPrimary\">\r\n            Browse\r\n          </Typography>\r\n        </Breadcrumbs>\r\n        <Typography variant=\"h3\" color=\"textPrimary\">\r\n          See the latest opportunities\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item>\r\n        <Button\r\n          color=\"secondary\"\r\n          component={RouterLink}\r\n          to=\"/app/campaign/create\"\r\n          variant=\"contained\"\r\n          startIcon={\r\n            <SvgIcon fontSize=\"small\">\r\n              <PlusIcon />\r\n            </SvgIcon>\r\n          }\r\n        >\r\n          Add new project\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default Header;\r\n","import {\r\n  Box,\r\n  Button,\r\n  Grid,\r\n  ListItemText,\r\n  makeStyles,\r\n  Menu,\r\n  MenuItem,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\r\nimport { Pagination, ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React, { FC, useRef, useState } from 'react';\r\nimport ProjectCard from 'src/components/ProjectCard';\r\nimport { Theme } from 'src/theme';\r\nimport { Project } from 'src/types/project';\r\n\r\ninterface ResultsProps {\r\n  className?: string;\r\n  projects: Project[];\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {},\r\n  title: {\r\n    position: 'relative',\r\n    '&:after': {\r\n      position: 'absolute',\r\n      bottom: -8,\r\n      left: 0,\r\n      content: '\" \"',\r\n      height: 3,\r\n      width: 48,\r\n      backgroundColor: theme.palette.primary.main\r\n    }\r\n  },\r\n  sortButton: {\r\n    textTransform: 'none',\r\n    letterSpacing: 0,\r\n    marginRight: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst Results: FC<ResultsProps> = ({ className, projects, ...rest }) => {\r\n  const classes = useStyles();\r\n  const sortRef = useRef<HTMLButtonElement | null>(null);\r\n  const [openSort, setOpenSort] = useState<boolean>(false);\r\n  const [selectedSort, setSelectedSort] = useState<string>('Most popular');\r\n  const [mode, setMode] = useState<string>('grid');\r\n\r\n  const handleSortOpen = (): void => {\r\n    setOpenSort(true);\r\n  };\r\n\r\n  const handleSortClose = (): void => {\r\n    setOpenSort(false);\r\n  };\r\n\r\n  const handleSortSelect = (value: string): void => {\r\n    setSelectedSort(value);\r\n    setOpenSort(false);\r\n  };\r\n\r\n  const handleModeChange = (event: any, value: string): void => {\r\n    setMode(value);\r\n  };\r\n\r\n  return (\r\n    <div className={clsx(classes.root, className)} {...rest}>\r\n      <Box\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"space-between\"\r\n        flexWrap=\"wrap\"\r\n        mb={2}\r\n      >\r\n        <Typography className={classes.title} variant=\"h5\" color=\"textPrimary\">\r\n          Showing {projects.length} projects\r\n        </Typography>\r\n        <Box display=\"flex\" alignItems=\"center\">\r\n          <Button\r\n            className={classes.sortButton}\r\n            onClick={handleSortOpen}\r\n            ref={sortRef}\r\n          >\r\n            {selectedSort}\r\n            <ArrowDropDownIcon />\r\n          </Button>\r\n          <ToggleButtonGroup\r\n            exclusive\r\n            onChange={handleModeChange}\r\n            size=\"small\"\r\n            value={mode}\r\n          >\r\n            <ToggleButton value=\"grid\">\r\n              <ViewModuleIcon />\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n        </Box>\r\n      </Box>\r\n      <Grid container spacing={3}>\r\n        {projects.map(project => (\r\n          <Grid\r\n            item\r\n            key={project.id}\r\n            md={mode === 'grid' ? 4 : 12}\r\n            sm={mode === 'grid' ? 6 : 12}\r\n            xs={12}\r\n          >\r\n            <ProjectCard project={project} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n      <Box mt={6} display=\"flex\" justifyContent=\"center\">\r\n        <Pagination count={3} />\r\n      </Box>\r\n      <Menu\r\n        anchorEl={sortRef.current}\r\n        onClose={handleSortClose}\r\n        open={openSort}\r\n        elevation={1}\r\n      >\r\n        {['Most recent', 'Popular', 'Price high', 'Price low', 'On sale'].map(\r\n          option => (\r\n            <MenuItem key={option} onClick={() => handleSortSelect(option)}>\r\n              <ListItemText primary={option} />\r\n            </MenuItem>\r\n          )\r\n        )}\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\n\r\nResults.propTypes = {\r\n  className: PropTypes.string,\r\n  projects: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Results;\r\n","import { Box, Container, makeStyles } from '@material-ui/core';\r\nimport React, { FC, useCallback, useEffect, useState } from 'react';\r\nimport Page from 'src/components/Page';\r\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\r\nimport { Theme } from 'src/theme';\r\nimport { Project } from 'src/types/project';\r\nimport axios from 'src/utils/axios';\r\nimport Filter from './Filter';\r\nimport Header from './Header';\r\nimport Results from './Results';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    minHeight: '100%',\r\n    paddingTop: theme.spacing(3),\r\n    paddingBottom: theme.spacing(3)\r\n  }\r\n}));\r\n\r\nconst ProjectBrowseView: FC = () => {\r\n  const classes = useStyles();\r\n  const isMountedRef = useIsMountedRef();\r\n  const [projects, setProjects] = useState<Project[]>([]);\r\n\r\n  const getProjects = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get<{ projects: Project[] }>(\r\n        '/api/projects/projects'\r\n      );\r\n\r\n      if (isMountedRef.current) {\r\n        setProjects(response.data.projects);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }, [isMountedRef]);\r\n\r\n  useEffect(() => {\r\n    getProjects();\r\n  }, [getProjects]);\r\n\r\n  return (\r\n    <Page className={classes.root} title=\"Project List\">\r\n      <Container maxWidth=\"lg\">\r\n        <Header />\r\n        <Box mt={3}>\r\n          <Filter />\r\n        </Box>\r\n        <Box mt={6}>\r\n          <Results projects={projects} />\r\n        </Box>\r\n      </Container>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default ProjectBrowseView;\r\n"],"sourceRoot":""}