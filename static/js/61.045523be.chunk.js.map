{"version":3,"sources":["views/calendar/CalendarView/Header.tsx","views/calendar/CalendarView/Toolbar.tsx","views/calendar/CalendarView/AddEditEventForm.tsx","views/calendar/CalendarView/index.tsx"],"names":["useStyles","makeStyles","theme","root","action","marginBottom","spacing","marginLeft","Header","className","onAddClick","rest","classes","Grid","clsx","container","justify","item","Breadcrumbs","separator","fontSize","aria-label","Link","variant","color","to","component","RouterLink","Typography","Button","onClick","startIcon","SvgIcon","defaultProps","viewOptions","label","value","icon","ViewConfigIcon","ViewWeekIcon","ViewDayIcon","ViewAgendaIcon","Toolbar","date","onDateNext","onDatePrev","onDateToday","onViewChange","view","alignItems","ButtonGroup","size","Hidden","smDown","moment","format","map","viewOption","Icon","Tooltip","key","title","IconButton","getInitialValues","event","range","_","merge","allDay","description","end","add","toDate","start","submit","Date","confirmButton","AddEditEventForm","onAddComplete","onCancel","onDeleteComplete","onEditComplete","dispatch","useDispatch","enqueueSnackbar","useSnackbar","isCreating","handleDelete","a","deleteEvent","id","console","error","initialValues","validationSchema","Yup","shape","max","when","schema","min","required","onSubmit","values","resetForm","setErrors","setStatus","setSubmitting","data","updateEvent","createEvent","success","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","setFieldTouched","setFieldValue","touched","Box","p","align","gutterBottom","TextField","Boolean","fullWidth","helperText","name","onBlur","onChange","mt","FormControlLabel","control","Switch","checked","DateTimePicker","inputVariant","FormHelperText","Divider","display","flexGrow","type","disabled","selectedEventSelector","state","calendar","events","selectedEventId","find","_event","backgroundColor","palette","background","dark","minHeight","paddingTop","paddingBottom","marginTop","padding","default","borderColor","divider","typography","body2","secondary","main","contrastText","borderWidth","opacity","h6","body1","subtitle2","fontWeight","fontWeightMedium","text","subtitle1","CalendarView","calendarRef","useRef","useTheme","mobileDevice","useMediaQuery","breakpoints","down","useSelector","isModalOpen","selectedRange","selectedEvent","useState","setDate","setView","handleEventResize","handleEventDrop","handleModalClose","closeModal","useEffect","getEvents","calendarEl","current","calendarApi","getApi","newView","changeView","Page","Container","maxWidth","openModal","next","getDate","prev","today","Paper","allDayMaintainDuration","defaultDate","defaultView","droppable","editable","eventClick","arg","selectEvent","eventDrop","eventLimit","eventResizableFromStart","eventResize","header","height","ref","rerenderDelay","select","unselect","selectRange","selectable","weekends","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","listPlugin","timelinePlugin","Dialog","onClose","open"],"mappings":"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","file":"static/js/61.045523be.chunk.js","sourcesContent":["import React from 'react';\nimport type { FC } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Breadcrumbs,\n  Grid,\n  Link,\n  SvgIcon,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport { PlusCircle as PlusCircleIcon } from 'react-feather';\nimport type { Theme } from 'src/theme';\n\ninterface HeaderProps {\n  className?: string;\n  onAddClick?: () => void;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  action: {\n    marginBottom: theme.spacing(1),\n    '& + &': {\n      marginLeft: theme.spacing(1)\n    }\n  }\n}));\n\nconst Header: FC<HeaderProps> = ({\n  className,\n  onAddClick,\n  ...rest\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      className={clsx(classes.root, className)}\n      container\n      justify=\"space-between\"\n      spacing={3}\n      {...rest}\n    >\n      <Grid item>\n        <Breadcrumbs\n          separator={<NavigateNextIcon fontSize=\"small\" />}\n          aria-label=\"breadcrumb\"\n        >\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app\"\n            component={RouterLink}\n          >\n            Dashboard\n          </Link>\n          <Typography\n            variant=\"body1\"\n            color=\"textPrimary\"\n          >\n            Calendar\n          </Typography>\n        </Breadcrumbs>\n        <Typography\n          variant=\"h3\"\n          color=\"textPrimary\"\n        >\n          Here&apos;s what you planned\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Button\n          color=\"secondary\"\n          variant=\"contained\"\n          onClick={onAddClick}\n          className={classes.action}\n          startIcon={\n            <SvgIcon fontSize=\"small\">\n              <PlusCircleIcon />\n            </SvgIcon>\n          }\n        >\n          New Event\n        </Button>\n      </Grid>\n    </Grid>\n  );\n}\n\nHeader.propTypes = {\n  className: PropTypes.string,\n  onAddClick: PropTypes.func\n};\n\nHeader.defaultProps = {\n  onAddClick: () => {}\n};\n\nexport default Header;\n","import React from 'react';\nimport type {\n  ElementType,\n  FC,\n  ReactNode\n} from 'react';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  ButtonGroup,\n  Grid,\n  Hidden,\n  IconButton,\n  Tooltip,\n  Typography,\n  makeStyles\n} from '@material-ui/core';\nimport ViewConfigIcon from '@material-ui/icons/ViewComfyOutlined';\nimport ViewWeekIcon from '@material-ui/icons/ViewWeekOutlined';\nimport ViewDayIcon from '@material-ui/icons/ViewDayOutlined';\nimport ViewAgendaIcon from '@material-ui/icons/ViewAgendaOutlined';\nimport type { View } from 'src/types/calendar';\n\ninterface ToolbarProps {\n  children?: ReactNode;\n  className?: string;\n  date: Date;\n  onDateNext?: () => void;\n  onDatePrev?: () => void;\n  onDateToday?: () => void;\n  onAddClick?: () => void;\n  onViewChange?: (view: View) => void;\n  view: View;\n}\n\ninterface ViewOption {\n  label: string;\n  value: View;\n  icon: ElementType;\n}\n\nconst viewOptions: ViewOption[] = [\n  {\n    label: 'Month',\n    value: 'dayGridMonth',\n    icon: ViewConfigIcon\n  },\n  {\n    label: 'Week',\n    value: 'timeGridWeek',\n    icon: ViewWeekIcon\n  },\n  {\n    label: 'Day',\n    value: 'timeGridDay',\n    icon: ViewDayIcon\n  },\n  {\n    label: 'Agenda',\n    value: 'listWeek',\n    icon: ViewAgendaIcon\n  }\n];\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Toolbar: FC<ToolbarProps> = ({\n  className,\n  date,\n  onDateNext,\n  onDatePrev,\n  onDateToday,\n  onAddClick,\n  onViewChange,\n  view,\n  ...rest\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      className={clsx(classes.root, className)}\n      alignItems=\"center\"\n      container\n      justify=\"space-between\"\n      spacing={3}\n      {...rest}\n    >\n      <Grid item>\n        <ButtonGroup size=\"small\">\n          <Button onClick={onDatePrev}>Prev</Button>\n          <Button onClick={onDateToday}>Today</Button>\n          <Button onClick={onDateNext}>Next</Button>\n        </ButtonGroup>\n      </Grid>\n      <Hidden smDown>\n        <Grid item>\n          <Typography\n            variant=\"h3\"\n            color=\"textPrimary\"\n          >\n            {moment(date).format('MMMM YYYY')}\n          </Typography>\n        </Grid>\n        <Grid item>\n          {viewOptions.map((viewOption) => {\n            const Icon = viewOption.icon;\n\n            return (\n              <Tooltip\n                key={viewOption.value}\n                title={viewOption.label}\n              >\n                <IconButton\n                  color={viewOption.value === view ? 'secondary' : 'default'}\n                  onClick={() => onViewChange(viewOption.value)}\n                >\n                  <Icon />\n                </IconButton>\n              </Tooltip>\n            );\n          })}\n        </Grid>\n      </Hidden>\n    </Grid>\n  );\n};\n\nToolbar.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  date: PropTypes.instanceOf(Date).isRequired,\n  onDateNext: PropTypes.func,\n  onDatePrev: PropTypes.func,\n  onDateToday: PropTypes.func,\n  onAddClick: PropTypes.func,\n  onViewChange: PropTypes.func,\n  view: PropTypes.oneOf(['dayGridMonth', 'timeGridWeek', 'timeGridDay', 'listWeek'])\n};\n\nToolbar.defaultProps = {\n  onDateNext: () => {},\n  onDatePrev: () => {},\n  onDateToday: () => {},\n  onAddClick: () => {},\n  onViewChange: () => {}\n};\n\nexport default Toolbar;\n","import React from 'react';\nimport type { FC } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { useSnackbar } from 'notistack';\nimport {\n  Box,\n  Typography,\n  TextField,\n  Button,\n  IconButton,\n  Divider,\n  FormControlLabel,\n  FormHelperText,\n  Switch,\n  SvgIcon,\n  makeStyles\n} from '@material-ui/core';\nimport { DateTimePicker } from '@material-ui/pickers';\nimport { Trash as TrashIcon } from 'react-feather';\nimport type { Theme } from 'src/theme';\nimport type { Event } from 'src/types/calendar';\nimport { useDispatch } from 'src/store';\nimport {\n  createEvent,\n  updateEvent,\n  deleteEvent\n} from 'src/slices/calendar';\n\ninterface AddEditEventModalProps {\n  event?: Event;\n  onAddComplete?: () => void;\n  onCancel?: () => void;\n  onDeleteComplete?: () => void;\n  onEditComplete?: () => void;\n  range?: { start: number, end: number };\n}\n\nconst getInitialValues = (event?: Event, range?: { start: number, end: number; }) => {\n  if (event) {\n    return _.merge({}, {\n      allDay: false,\n      color: '',\n      description: '',\n      end: moment().add(30, 'minutes').toDate(),\n      start: moment().toDate(),\n      title: '',\n      submit: null\n    }, event);\n  }\n\n  if (range) {\n    return _.merge({}, {\n      allDay: false,\n      color: '',\n      description: '',\n      end: new Date(range.end),\n      start: new Date(range.start),\n      title: '',\n      submit: null\n    }, event);\n  }\n\n  return {\n    allDay: false,\n    color: '',\n    description: '',\n    end: moment().add(30, 'minutes').toDate(),\n    start: moment().toDate(),\n    title: '',\n    submit: null\n  };\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  confirmButton: {\n    marginLeft: theme.spacing(2)\n  }\n}));\n\nconst AddEditEventForm: FC<AddEditEventModalProps> = ({\n  event,\n  onAddComplete,\n  onCancel,\n  onDeleteComplete,\n  onEditComplete,\n  range\n}) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const isCreating = !event;\n\n  const handleDelete = async (): Promise<void> => {\n    try {\n      await dispatch(deleteEvent(event.id));\n      onDeleteComplete();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={getInitialValues(event, range)}\n      validationSchema={Yup.object().shape({\n        allDay: Yup.bool(),\n        description: Yup.string().max(5000),\n        end: Yup.date()\n          .when(\n            'start',\n            (start: Date, schema: any) => (start && schema.min(start, 'End date must be later than start date'))\n          ),\n        start: Yup.date(),\n        title: Yup.string().max(255).required('Title is required')\n      })}\n      onSubmit={async (values, {\n        resetForm,\n        setErrors,\n        setStatus,\n        setSubmitting\n      }) => {\n        try {\n          const data = {\n            allDay: values.allDay,\n            description: values.description,\n            end: values.end,\n            start: values.start,\n            title: values.title\n          };\n\n          if (event) {\n            await dispatch(updateEvent(event.id, data));\n          } else {\n            await dispatch(createEvent(data));\n          }\n\n          resetForm();\n          setStatus({ success: true });\n          setSubmitting(false);\n          enqueueSnackbar('Calendar updated', {\n            variant: 'success'\n          });\n\n          if (isCreating) {\n            onAddComplete();\n          } else {\n            onEditComplete();\n          }\n        } catch (err) {\n          console.error(err);\n          setStatus({ success: false });\n          setErrors({ submit: err.message });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        setFieldTouched,\n        setFieldValue,\n        touched,\n        values\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <Box p={3}>\n            <Typography\n              align=\"center\"\n              gutterBottom\n              variant=\"h3\"\n              color=\"textPrimary\"\n            >\n              {isCreating ? 'Add Event' : 'Edit Event'}\n            </Typography>\n          </Box>\n          <Box p={3}>\n            <TextField\n              error={Boolean(touched.title && errors.title)}\n              fullWidth\n              helperText={touched.title && errors.title}\n              label=\"Title\"\n              name=\"title\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              value={values.title}\n              variant=\"outlined\"\n            />\n            <Box mt={2}>\n              <TextField\n                error={Boolean(touched.description && errors.description)}\n                fullWidth\n                helperText={touched.description && errors.description}\n                label=\"Description\"\n                name=\"description\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.description}\n                variant=\"outlined\"\n              />\n            </Box>\n            <Box mt={2}>\n              <FormControlLabel\n                control={(\n                  <Switch\n                    checked={values.allDay}\n                    name=\"allDay\"\n                    onChange={handleChange}\n                  />\n                )}\n                label=\"All day\"\n              />\n            </Box>\n            <Box mt={2}>\n              <DateTimePicker\n                fullWidth\n                inputVariant=\"outlined\"\n                label=\"Start date\"\n                name=\"start\"\n                onClick={() => setFieldTouched('end')}\n                onChange={(date) => setFieldValue('start', date)}\n                value={values.start}\n              />\n            </Box>\n            <Box mt={2}>\n              <DateTimePicker\n                fullWidth\n                inputVariant=\"outlined\"\n                label=\"End date\"\n                name=\"end\"\n                onClick={() => setFieldTouched('end')}\n                onChange={(date) => setFieldValue('end', date)}\n                value={values.end}\n              />\n            </Box>\n            {Boolean(touched.end && errors.end) && (\n              <Box mt={2}>\n                <FormHelperText error>\n                  {errors.end}\n                </FormHelperText>\n              </Box>\n            )}\n          </Box>\n          <Divider />\n          <Box\n            p={2}\n            display=\"flex\"\n            alignItems=\"center\"\n          >\n            {!isCreating && (\n              <IconButton onClick={() => handleDelete()}>\n                <SvgIcon>\n                  <TrashIcon />\n                </SvgIcon>\n              </IconButton>\n            )}\n            <Box flexGrow={1} />\n            <Button onClick={onCancel}>\n              Cancel\n            </Button>\n            <Button\n              variant=\"contained\"\n              type=\"submit\"\n              disabled={isSubmitting}\n              color=\"secondary\"\n              className={classes.confirmButton}\n            >\n              Confirm\n            </Button>\n          </Box>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nAddEditEventForm.propTypes = {\n  // @ts-ignore\n  event: PropTypes.object,\n  onAddComplete: PropTypes.func,\n  onCancel: PropTypes.func,\n  onDeleteComplete: PropTypes.func,\n  onEditComplete: PropTypes.func,\n  // @ts-ignore\n  range: PropTypes.object\n};\n\nAddEditEventForm.defaultProps = {\n  onAddComplete: () => { },\n  onCancel: () => { },\n  onDeleteComplete: () => { },\n  onEditComplete: () => { }\n};\n\nexport default AddEditEventForm;\n","import '@fullcalendar/core/main.css';\nimport '@fullcalendar/daygrid/main.css';\nimport '@fullcalendar/timegrid/main.css';\nimport '@fullcalendar/list/main.css';\nimport React, {\n  useState,\n  useRef,\n  useEffect\n} from 'react';\nimport type { FC } from 'react';\nimport moment from 'moment';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport listPlugin from '@fullcalendar/list';\nimport timelinePlugin from '@fullcalendar/timeline';\nimport {\n  Container,\n  Dialog,\n  Paper,\n  useTheme,\n  useMediaQuery,\n  makeStyles\n} from '@material-ui/core';\nimport type { Theme } from 'src/theme';\nimport Page from 'src/components/Page';\nimport type { Event, View } from 'src/types/calendar';\nimport { useDispatch, useSelector } from 'src/store';\nimport type { RootState } from 'src/store';\nimport {\n  getEvents,\n  updateEvent,\n  selectEvent,\n  selectRange,\n  openModal,\n  closeModal\n} from 'src/slices/calendar';\nimport Header from './Header';\nimport Toolbar from './Toolbar';\nimport AddEditEventForm from './AddEditEventForm';\n\nconst selectedEventSelector = (state: RootState): Event | null => {\n  const { events, selectedEventId } = state.calendar;\n\n  if (selectedEventId) {\n    return events.find((_event) => _event.id === selectedEventId);\n  } else {\n    return null;\n  }\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  },\n  calendar: {\n    marginTop: theme.spacing(3),\n    padding: theme.spacing(2),\n    '& .fc-unthemed .fc-head': {\n      backgroundColor: theme.palette.background.dark\n    },\n    '& .fc-unthemed .fc-body': {\n      backgroundColor: theme.palette.background.default\n    },\n    '& .fc-unthemed .fc-row': {\n      borderColor: theme.palette.divider\n    },\n    '& .fc-unthemed .fc-axis': {\n      ...theme.typography.body2\n    },\n    '& .fc-unthemed .fc-divider': {\n      backgroundColor: theme.palette.background.dark,\n      borderColor: theme.palette.divider\n    },\n    '& .fc-unthemed th': {\n      borderColor: theme.palette.divider\n    },\n    '& .fc-unthemed td': {\n      borderColor: theme.palette.divider\n    },\n    '& .fc-unthemed td.fc-today': {\n      backgroundColor: theme.palette.background.dark\n    },\n    '& .fc-unthemed .fc-highlight': {\n      backgroundColor: theme.palette.background.dark\n    },\n    '& .fc-unthemed .fc-event': {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.secondary.contrastText,\n      borderWidth: 2,\n      opacity: 0.9,\n      '& .fc-time': {\n        ...theme.typography.h6,\n        color: 'inherit'\n      },\n      '& .fc-title': {\n        ...theme.typography.body1,\n        color: 'inherit'\n      }\n    },\n    '& .fc-unthemed .fc-day-top': {\n      ...theme.typography.body2\n    },\n    '& .fc-unthemed .fc-day-header': {\n      ...theme.typography.subtitle2,\n      fontWeight: theme.typography.fontWeightMedium,\n      color: theme.palette.text.secondary,\n      padding: theme.spacing(1),\n      backgroundColor: theme.palette.background.dark\n    },\n    '& .fc-unthemed .fc-list-view': {\n      borderColor: theme.palette.divider\n    },\n    '& .fc-unthemed .fc-list-empty': {\n      ...theme.typography.subtitle1\n    },\n    '& .fc-unthemed .fc-list-heading td': {\n      backgroundColor: theme.palette.background.dark,\n      borderColor: theme.palette.divider\n    },\n    '& .fc-unthemed .fc-list-heading-main': {\n      ...theme.typography.h6\n    },\n    '& .fc-unthemed .fc-list-heading-alt': {\n      ...theme.typography.h6\n    },\n    '& .fc-unthemed .fc-list-item:hover td': {\n      backgroundColor: theme.palette.background.dark,\n    },\n    '& .fc-unthemed .fc-list-item-title': {\n      ...theme.typography.body1\n    },\n    '& .fc-unthemed .fc-list-item-time': {\n      ...theme.typography.body2\n    }\n  }\n}));\n\nconst CalendarView: FC = () => {\n  const classes = useStyles();\n  const calendarRef = useRef<FullCalendar | null>(null);\n  const theme = useTheme<Theme>();\n  const mobileDevice = useMediaQuery(theme.breakpoints.down('sm'));\n  const dispatch = useDispatch();\n  const { events, isModalOpen, selectedRange } = useSelector((state) => state.calendar);\n  const selectedEvent = useSelector(selectedEventSelector);\n  const [date, setDate] = useState<Date>(moment().toDate());\n  const [view, setView] = useState<View>(mobileDevice ? 'listWeek' : 'dayGridMonth');\n\n  const handleDateToday = (): void => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n\n      calendarApi.today();\n      setDate(calendarApi.getDate());\n    }\n  };\n\n  const handleViewChange = (newView: View): void => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n\n      calendarApi.changeView(newView);\n      setView(newView);\n    }\n  };\n\n  const handleDatePrev = (): void => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n\n      calendarApi.prev();\n      setDate(calendarApi.getDate());\n    }\n  };\n\n  const handleDateNext = (): void => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n\n      calendarApi.next();\n      setDate(calendarApi.getDate());\n    }\n  };\n\n  const handleAddClick = (): void => {\n    dispatch(openModal());\n  };\n\n  const handleRangeSelect = (arg: any): void => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n\n      calendarApi.unselect();\n    }\n\n    dispatch(selectRange(arg.start, arg.end));\n  };\n\n  const handleEventSelect = (arg: any): void => {\n    dispatch(selectEvent(arg.event.id));\n  };\n\n  const handleEventResize = async ({ event }: any): Promise<void> => {\n    try {\n      await dispatch(updateEvent(event.id, {\n        allDay: event.allDay,\n        start: event.start,\n        end: event.end\n      }));\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleEventDrop = async ({ event }: any): Promise<void> => {\n    try {\n      await dispatch(updateEvent(event.id, {\n        allDay: event.allDay,\n        start: event.start,\n        end: event.end\n      }));\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleModalClose = (): void => {\n    dispatch(closeModal());\n  };\n\n  useEffect(() => {\n    dispatch(getEvents());\n  }, [dispatch]);\n\n  useEffect(() => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n      const newView = mobileDevice ? 'listWeek' : 'dayGridMonth';\n\n      calendarApi.changeView(newView);\n      setView(newView);\n    }\n  }, [mobileDevice]);\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Calendar\"\n    >\n      <Container maxWidth={false}>\n        <Header onAddClick={handleAddClick} />\n        <Toolbar\n          date={date}\n          onDateNext={handleDateNext}\n          onDatePrev={handleDatePrev}\n          onDateToday={handleDateToday}\n          onViewChange={handleViewChange}\n          view={view}\n        />\n        <Paper className={classes.calendar}>\n          <FullCalendar\n            allDayMaintainDuration\n            defaultDate={date}\n            defaultView={view}\n            droppable\n            editable\n            eventClick={handleEventSelect}\n            eventDrop={handleEventDrop}\n            eventLimit\n            eventResizableFromStart\n            eventResize={handleEventResize}\n            events={events}\n            header={false}\n            height={800}\n            ref={calendarRef}\n            rerenderDelay={10}\n            select={handleRangeSelect}\n            selectable\n            weekends\n            plugins={[\n              dayGridPlugin,\n              timeGridPlugin,\n              interactionPlugin,\n              listPlugin,\n              timelinePlugin\n            ]}\n          />\n        </Paper>\n        <Dialog\n          maxWidth=\"sm\"\n          fullWidth\n          onClose={handleModalClose}\n          open={isModalOpen}\n        >\n          {/* Dialog renders its body even if not open */}\n          {isModalOpen && (\n            <AddEditEventForm\n              event={selectedEvent}\n              range={selectedRange}\n              onAddComplete={handleModalClose}\n              onCancel={handleModalClose}\n              onDeleteComplete={handleModalClose}\n              onEditComplete={handleModalClose}\n            />\n          )}\n        </Dialog>\n      </Container>\n    </Page>\n  );\n};\n\nexport default CalendarView;\n"],"sourceRoot":""}