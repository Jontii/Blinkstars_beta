{"version":3,"sources":["hooks/useIsMountedRef.ts","components/Label.tsx","components/GenericMoreButton.tsx","views/order/OrderListView/Header.tsx","views/order/OrderListView/BulkOperations.tsx","views/order/OrderListView/Results.tsx","views/order/OrderListView/index.tsx"],"names":["useIsMountedRef","isMounted","useRef","useEffect","current","useStyles","makeStyles","theme","root","fontFamily","typography","alignItems","borderRadius","display","flexGrow","whiteSpace","cursor","flexShrink","fontSize","pxToRem","fontWeight","fontWeightMedium","height","justifyContent","letterSpacing","minWidth","padding","spacing","textTransform","primary","color","palette","main","backgroundColor","fade","secondary","error","success","warning","Label","className","children","rest","style","classes","clsx","menu","width","maxWidth","memo","props","moreRef","useState","openMenu","setOpenMenu","title","onClick","ref","anchorEl","anchorOrigin","vertical","horizontal","onClose","open","PaperProps","transformOrigin","action","marginBottom","marginLeft","Header","Grid","container","justify","item","Breadcrumbs","separator","aria-label","Link","variant","to","component","RouterLink","Typography","Box","mt","Button","startIcon","SvgIcon","actions","flexWrap","BulkOperations","onDelete","onMarkPaid","onMarkUnpaid","selected","Drawer","anchor","elevation","Hidden","smDown","md","length","xs","defaultProps","Results","orders","selectedOrders","setSelectedOrders","page","setPage","limit","setLimit","paginatedOrders","slice","applyPagination","enableBulkOperations","selectedSomeOrders","selectedAllOrders","gutterBottom","Math","ceil","Card","CardHeader","GenericMoreButton","Divider","Table","TableHead","TableRow","TableCell","Checkbox","checked","indeterminate","onChange","event","target","map","order","id","align","TableBody","isOrderSelected","includes","key","indexOf","orderId","prevSelected","filter","value","number","moment","createdAt","format","customer","name","paymentMethod","numeral","totalAmount","currency","paymentStatus","canceled","text","completed","pending","rejected","getStatusLabel","status","IconButton","TablePagination","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","rowsPerPage","rowsPerPageOptions","background","dark","minHeight","paddingTop","paddingBottom","OrderListView","isMountedRef","setOrders","getOrders","useCallback","a","axios","get","response","data","console","Page","Container"],"mappings":"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","file":"static/js/40.9befc93b.chunk.js","sourcesContent":["import { MutableRefObject, useEffect, useRef } from 'react';\n\nconst useIsMountedRef = (): MutableRefObject<boolean> => {\n  const isMounted = useRef(true);\n\n  useEffect(\n    () => () => {\n      isMounted.current = false;\n    },\n    []\n  );\n\n  return isMounted;\n};\n\nexport default useIsMountedRef;\n","import { fade, makeStyles } from '@material-ui/core';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { FC, ReactNode } from 'react';\nimport { Theme } from 'src/theme';\n\ninterface LabelProps {\n  className?: string;\n  color?: 'primary' | 'secondary' | 'error' | 'warning' | 'success';\n  children?: ReactNode;\n  style?: {};\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    fontFamily: theme.typography.fontFamily,\n    alignItems: 'center',\n    borderRadius: 2,\n    display: 'inline-flex',\n    flexGrow: 0,\n    whiteSpace: 'nowrap',\n    cursor: 'default',\n    flexShrink: 0,\n    fontSize: theme.typography.pxToRem(12),\n    fontWeight: theme.typography.fontWeightMedium,\n    height: 20,\n    justifyContent: 'center',\n    letterSpacing: 0.5,\n    minWidth: 20,\n    padding: theme.spacing(0.5, 1),\n    textTransform: 'uppercase'\n  },\n  primary: {\n    color: theme.palette.primary.main,\n    backgroundColor: fade(theme.palette.primary.main, 0.08)\n  },\n  secondary: {\n    color: theme.palette.secondary.main,\n    backgroundColor: fade(theme.palette.secondary.main, 0.08)\n  },\n  error: {\n    color: theme.palette.error.main,\n    backgroundColor: fade(theme.palette.error.main, 0.08)\n  },\n  success: {\n    color: theme.palette.success.main,\n    backgroundColor: fade(theme.palette.success.main, 0.08)\n  },\n  warning: {\n    color: theme.palette.warning.main,\n    backgroundColor: fade(theme.palette.warning.main, 0.08)\n  }\n}));\n\nconst Label: FC<LabelProps> = ({\n  className = '',\n  color = 'secondary',\n  children,\n  style,\n  ...rest\n}) => {\n  const classes = useStyles();\n\n  return (\n    <span\n      className={clsx(\n        classes.root,\n        {\n          [classes[color]]: color\n        },\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </span>\n  );\n};\n\nLabel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  color: PropTypes.oneOf([\n    'primary',\n    'secondary',\n    'error',\n    'warning',\n    'success'\n  ])\n};\n\nexport default Label;\n","import {\n  IconButton,\n  ListItemIcon,\n  ListItemText,\n  makeStyles,\n  Menu,\n  MenuItem,\n  Tooltip\n} from '@material-ui/core';\nimport ArchiveIcon from '@material-ui/icons/ArchiveOutlined';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport MoreIcon from '@material-ui/icons/MoreVert';\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\nimport React, { FC, memo, useRef, useState } from 'react';\n\nconst useStyles = makeStyles(() => ({\n  menu: {\n    width: 256,\n    maxWidth: '100%'\n  }\n}));\n\nconst GenericMoreButton: FC = props => {\n  const classes = useStyles();\n  const moreRef = useRef<any>(null);\n  const [openMenu, setOpenMenu] = useState<boolean>(false);\n\n  const handleMenuOpen = (): void => {\n    setOpenMenu(true);\n  };\n\n  const handleMenuClose = (): void => {\n    setOpenMenu(false);\n  };\n\n  return (\n    <>\n      <Tooltip title=\"More options\">\n        <IconButton onClick={handleMenuOpen} ref={moreRef} {...props}>\n          <MoreIcon fontSize=\"small\" />\n        </IconButton>\n      </Tooltip>\n      <Menu\n        anchorEl={moreRef.current}\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'left'\n        }}\n        onClose={handleMenuClose}\n        open={openMenu}\n        PaperProps={{ className: classes.menu }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'left'\n        }}\n      >\n        <MenuItem>\n          <ListItemIcon>\n            <GetAppIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Import\" />\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <FileCopyIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Copy\" />\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <PictureAsPdfIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Export\" />\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <ArchiveIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Archive\" />\n        </MenuItem>\n      </Menu>\n    </>\n  );\n};\n\nexport default memo(GenericMoreButton);\n","import {\n  Box,\n  Breadcrumbs,\n  Button,\n  Grid,\n  Link,\n  makeStyles,\n  SvgIcon,\n  Typography\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { FC } from 'react';\nimport {\n  Download as DownloadIcon,\n  PlusCircle as PlusCircleIcon,\n  Upload as UploadIcon\n} from 'react-feather';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Theme } from 'src/theme';\n\ninterface HeaderProps {\n  className?: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  action: {\n    marginBottom: theme.spacing(1),\n    '& + &': {\n      marginLeft: theme.spacing(1)\n    }\n  }\n}));\n\nconst Header: FC<HeaderProps> = ({ className, ...rest }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      container\n      spacing={3}\n      justify=\"space-between\"\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Grid item>\n        <Breadcrumbs\n          separator={<NavigateNextIcon fontSize=\"small\" />}\n          aria-label=\"breadcrumb\"\n        >\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app\"\n            component={RouterLink}\n          >\n            Dashboard\n          </Link>\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app/management\"\n            component={RouterLink}\n          >\n            Management\n          </Link>\n          <Typography variant=\"body1\" color=\"textPrimary\">\n            Orders\n          </Typography>\n        </Breadcrumbs>\n        <Typography variant=\"h3\" color=\"textPrimary\">\n          All Orders\n        </Typography>\n        <Box mt={2}>\n          <Button\n            className={classes.action}\n            startIcon={\n              <SvgIcon fontSize=\"small\">\n                <UploadIcon />\n              </SvgIcon>\n            }\n          >\n            Import\n          </Button>\n          <Button\n            className={classes.action}\n            startIcon={\n              <SvgIcon fontSize=\"small\">\n                <DownloadIcon />\n              </SvgIcon>\n            }\n          >\n            Export\n          </Button>\n        </Box>\n      </Grid>\n      <Grid item>\n        <Button\n          color=\"secondary\"\n          variant=\"contained\"\n          className={classes.action}\n          startIcon={\n            <SvgIcon fontSize=\"small\">\n              <PlusCircleIcon />\n            </SvgIcon>\n          }\n        >\n          New order\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import {\n  Button,\n  Drawer,\n  Grid,\n  Hidden,\n  makeStyles,\n  SvgIcon,\n  Typography\n} from '@material-ui/core';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { FC } from 'react';\nimport {\n  Check as CheckIcon,\n  Trash as TrashIcon,\n  X as XIcon\n} from 'react-feather';\nimport { Theme } from 'src/theme';\n\ninterface BulkOperationsProps {\n  className?: string;\n  onDelete?: () => void;\n  onMarkPaid?: () => void;\n  onMarkUnpaid?: () => void;\n  open?: boolean;\n  selected: string[];\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2)\n  },\n  actions: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    '& > * + *': {\n      marginLeft: theme.spacing(2)\n    }\n  }\n}));\n\nconst BulkOperations: FC<BulkOperationsProps> = ({\n  className,\n  onDelete,\n  onMarkPaid,\n  onMarkUnpaid,\n  open,\n  selected,\n  ...rest\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Drawer\n      anchor=\"bottom\"\n      open={open}\n      PaperProps={{ elevation: 1 }}\n      variant=\"persistent\"\n    >\n      <div className={clsx(classes.root, className)} {...rest}>\n        <Grid alignItems=\"center\" container spacing={2}>\n          <Hidden smDown>\n            <Grid item md={3}>\n              <Typography color=\"textSecondary\" variant=\"subtitle1\">\n                {selected.length} selected\n              </Typography>\n            </Grid>\n          </Hidden>\n          <Grid item md={6} xs={12}>\n            <div className={classes.actions}>\n              <Button\n                onClick={onMarkPaid}\n                startIcon={\n                  <SvgIcon fontSize=\"small\">\n                    <CheckIcon />\n                  </SvgIcon>\n                }\n              >\n                Mark Paid\n              </Button>\n              <Button\n                onClick={onMarkUnpaid}\n                startIcon={\n                  <SvgIcon fontSize=\"small\">\n                    <XIcon />\n                  </SvgIcon>\n                }\n              >\n                Mark Unpaid\n              </Button>\n              <Button\n                onClick={onDelete}\n                startIcon={\n                  <SvgIcon fontSize=\"small\">\n                    <TrashIcon />\n                  </SvgIcon>\n                }\n              >\n                Delete\n              </Button>\n            </div>\n          </Grid>\n        </Grid>\n      </div>\n    </Drawer>\n  );\n};\n\nBulkOperations.propTypes = {\n  className: PropTypes.string,\n  onDelete: PropTypes.func,\n  onMarkPaid: PropTypes.func,\n  onMarkUnpaid: PropTypes.func,\n  open: PropTypes.bool,\n  selected: PropTypes.array.isRequired\n};\n\nBulkOperations.defaultProps = {\n  onDelete: () => {},\n  onMarkPaid: () => {},\n  onMarkUnpaid: () => {},\n  open: false\n};\n\nexport default BulkOperations;\n","import {\n  Box,\n  Card,\n  CardHeader,\n  Checkbox,\n  Divider,\n  IconButton,\n  makeStyles,\n  SvgIcon,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Typography\n} from '@material-ui/core';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport numeral from 'numeral';\nimport PropTypes from 'prop-types';\nimport React, { ChangeEvent, FC, useState } from 'react';\nimport { ArrowRight as ArrowRightIcon, Edit as EditIcon } from 'react-feather';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { Link as RouterLink } from 'react-router-dom';\nimport GenericMoreButton from 'src/components/GenericMoreButton';\nimport Label from 'src/components/Label';\nimport { Order, OrderStatus } from 'src/types/order';\nimport BulkOperations from './BulkOperations';\n\ninterface ResultsProps {\n  className?: string;\n  orders: Order[];\n}\n\nconst getStatusLabel = (paymentStatus: OrderStatus): JSX.Element => {\n  const map = {\n    canceled: {\n      text: 'Canceled',\n      color: 'error'\n    },\n    completed: {\n      text: 'Completed',\n      color: 'success'\n    },\n    pending: {\n      text: 'Pending',\n      color: 'warning'\n    },\n    rejected: {\n      text: 'Rejected',\n      color: 'error'\n    }\n  };\n\n  const { text, color }: any = map[paymentStatus];\n\n  return <Label color={color}>{text}</Label>;\n};\n\nconst applyPagination = (\n  orders: Order[],\n  page: number,\n  limit: number\n): Order[] => {\n  return orders.slice(page * limit, page * limit + limit);\n};\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Results: FC<ResultsProps> = ({ className, orders, ...rest }) => {\n  const classes = useStyles();\n  const [selectedOrders, setSelectedOrders] = useState<string[]>([]);\n  const [page, setPage] = useState<number>(0);\n  const [limit, setLimit] = useState<number>(10);\n\n  const handleSelectAllOrders = (\n    event: ChangeEvent<HTMLInputElement>\n  ): void => {\n    setSelectedOrders(\n      event.target.checked ? orders.map(order => order.id) : []\n    );\n  };\n\n  const handleSelectOneOrder = (\n    event: ChangeEvent<HTMLInputElement>,\n    orderId: string\n  ): void => {\n    if (!selectedOrders.includes(orderId)) {\n      setSelectedOrders(prevSelected => [...prevSelected, orderId]);\n    } else {\n      setSelectedOrders(prevSelected =>\n        prevSelected.filter(id => id !== orderId)\n      );\n    }\n  };\n\n  const handlePageChange = (event: any, newPage: number): void => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    setLimit(parseInt(event.target.value));\n  };\n\n  const paginatedOrders = applyPagination(orders, page, limit);\n  const enableBulkOperations = selectedOrders.length > 0;\n  const selectedSomeOrders =\n    selectedOrders.length > 0 && selectedOrders.length < orders.length;\n  const selectedAllOrders = selectedOrders.length === orders.length;\n\n  return (\n    <div className={clsx(classes.root, className)} {...rest}>\n      <Typography color=\"textSecondary\" gutterBottom variant=\"body2\">\n        {orders.length} Records found. Page {page + 1} of{' '}\n        {Math.ceil(orders.length / limit)}\n      </Typography>\n      <Card>\n        <CardHeader action={<GenericMoreButton />} title=\"Orders\" />\n        <Divider />\n        <PerfectScrollbar>\n          <Box minWidth={1150}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell padding=\"checkbox\">\n                    <Checkbox\n                      checked={selectedAllOrders}\n                      indeterminate={selectedSomeOrders}\n                      onChange={handleSelectAllOrders}\n                    />\n                  </TableCell>\n                  <TableCell>Number</TableCell>\n                  <TableCell>Customer</TableCell>\n                  <TableCell>Method</TableCell>\n                  <TableCell>Total</TableCell>\n                  <TableCell>Status</TableCell>\n                  <TableCell align=\"right\">Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {paginatedOrders.map(order => {\n                  const isOrderSelected = selectedOrders.includes(order.id);\n\n                  return (\n                    <TableRow\n                      key={order.id}\n                      selected={selectedOrders.indexOf(order.id) !== -1}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={isOrderSelected}\n                          onChange={event =>\n                            handleSelectOneOrder(event, order.id)\n                          }\n                          value={isOrderSelected}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        {order.number}\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                          {moment(order.createdAt).format(\n                            'DD MMM YYYY | hh:mm'\n                          )}\n                        </Typography>\n                      </TableCell>\n                      <TableCell>{order.customer.name}</TableCell>\n                      <TableCell>{order.paymentMethod}</TableCell>\n                      <TableCell>\n                        {numeral(order.totalAmount).format(\n                          `${order.currency}0,0.00`\n                        )}\n                      </TableCell>\n                      <TableCell>{getStatusLabel(order.status)}</TableCell>\n                      <TableCell align=\"right\">\n                        <IconButton>\n                          <SvgIcon fontSize=\"small\">\n                            <EditIcon />\n                          </SvgIcon>\n                        </IconButton>\n                        <IconButton\n                          component={RouterLink}\n                          to=\"/app/management/orders/1\"\n                        >\n                          <SvgIcon fontSize=\"small\">\n                            <ArrowRightIcon />\n                          </SvgIcon>\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </Box>\n        </PerfectScrollbar>\n        <TablePagination\n          component=\"div\"\n          count={orders.length}\n          onChangePage={handlePageChange}\n          onChangeRowsPerPage={handleLimitChange}\n          page={page}\n          rowsPerPage={limit}\n          rowsPerPageOptions={[5, 10, 25]}\n        />\n      </Card>\n      <BulkOperations open={enableBulkOperations} selected={selectedOrders} />\n    </div>\n  );\n};\n\nResults.propTypes = {\n  className: PropTypes.string,\n  orders: PropTypes.array.isRequired\n};\n\nResults.defaultProps = {\n  orders: []\n};\n\nexport default Results;\n","import { Box, Container, makeStyles } from '@material-ui/core';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport Page from 'src/components/Page';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport { Theme } from 'src/theme';\nimport { Order } from 'src/types/order';\nimport axios from 'src/utils/axios';\nimport Header from './Header';\nimport Results from './Results';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  }\n}));\n\nconst OrderListView: FC = () => {\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const [orders, setOrders] = useState<Order[]>([]);\n\n  const getOrders = useCallback(async () => {\n    try {\n      const response = await axios.get<{ orders: Order[] }>('/api/orders');\n\n      if (isMountedRef.current) {\n        setOrders(response.data.orders);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getOrders();\n  }, [getOrders]);\n\n  return (\n    <Page className={classes.root} title=\"Orders List\">\n      <Container maxWidth={false}>\n        <Header />\n        <Box mt={3}>\n          <Results orders={orders} />\n        </Box>\n      </Container>\n    </Page>\n  );\n};\n\nexport default OrderListView;\n"],"sourceRoot":""}