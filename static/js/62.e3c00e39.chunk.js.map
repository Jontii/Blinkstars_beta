{"version":3,"sources":["views/chat/ChatView/RecentThreads/Search.tsx","views/chat/ChatView/RecentThreads/ThreadItem.tsx","views/chat/ChatView/RecentThreads/ThreadList.tsx","views/chat/ChatView/RecentThreads/index.tsx","views/chat/ChatView/Settings.tsx","views/chat/ChatView/Thread/ComposeHeader.tsx","views/chat/ChatView/Thread/DetailHeader.tsx","views/chat/ChatView/Thread/MessageComposer.tsx","views/chat/ChatView/Thread/MessageItem.tsx","views/chat/ChatView/Thread/MessageList.tsx","views/chat/ChatView/Thread/index.tsx","views/chat/ChatView/index.tsx"],"names":["useStyles","makeStyles","theme","root","paddingLeft","spacing","paddingRight","search","display","alignItems","height","borderRadius","backgroundColor","palette","background","dark","searchInput","flexGrow","marginLeft","avatar","width","Search","forwardRef","ref","className","isFocused","onChange","onClickAway","onFocus","onSelect","query","results","rest","classes","displayResults","ClickAwayListener","clsx","SvgIcon","fontSize","color","Input","disableUnderline","placeholder","value","Box","mt","Typography","variant","List","map","result","ListItem","button","key","id","onClick","handleSelect","ListItemAvatar","Avatar","src","ListItemText","primary","name","primaryTypographyProps","noWrap","defaultProps","active","action","selected","boxShadow","secondary","main","smallAvatar","marginTop","unreadIndicator","minWidth","padding","ThreadItem","thread","details","currentUserId","otherParticipants","participants","filter","participant","displayNames","reduce","names","join","displayText","lastMessage","messages","length","sender","senderId","message","contentType","body","getDetails","AvatarGroup","max","alt","secondaryTypographyProps","ml","flexDirection","unreadCount","Chip","size","label","ThreadList","useSelector","state","chat","threads","activeThreadId","history","useHistory","allIds","threadId","byId","threadKey","type","find","username","push","hideThreadList","RecentThreads","useState","isSearchFocused","setSearchFocused","searchQuery","setSearchQuery","searchResults","setSearchResults","handleSearchChange","event","a","persist","target","axios","get","params","response","data","console","error","options","suppressScrollX","Settings","IconButton","component","RouterLink","to","container","recipient","marginRight","input","default","compactInput","maxWidth","ComposeHeader","onAddRecipient","onRemoveRecipient","recipients","containerRef","useRef","setQuery","filteredSearchResults","recipientIds","acc","includes","getFilteredSearchResults","onDelete","recipientId","onBlur","Popper","anchorEl","current","open","placement","Paper","pb","pt","px","textAlign","gutterBottom","contact","borderBottom","divider","flexShrink","minHeight","paddingBottom","paddingTop","DetailHeader","moreRef","openMenu","setOpenMenu","Tooltip","title","Menu","keepMounted","elevation","onClose","MenuItem","ListItemIcon","inputContainer","fileInput","MessageComposer","disabled","onSend","user","useAuth","fileInputRef","setBody","handleAttach","click","handleSend","fullWidth","onKeyUp","keyCode","Divider","edge","marginBottom","image","cursor","MessageItem","selectedImage","setSelectedImage","_participant","senderDetails","bgcolor","py","Link","justifyContent","moment","createdAt","fromNow","large","propTypes","PropTypes","string","object","isRequired","MessageList","scrollRef","useEffect","_container","scrollTop","scrollHeight","Thread","dispatch","useDispatch","useParams","unreadMessages","threadSelector","mode","handleSendMessage","getParticipants","getThread","resetActiveThread","markThreadAsSeen","addRecipient","removeRecipient","overflow","position","sidebar","borderRight","ChatView","pageRef","getThreads","Page"],"mappings":"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","file":"static/js/62.e3c00e39.chunk.js","sourcesContent":["import {\r\n  Avatar,\r\n  Box,\r\n  ClickAwayListener,\r\n  Input,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  makeStyles,\r\n  SvgIcon,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React, { ChangeEvent, FC, FocusEvent, forwardRef } from 'react';\r\nimport { Search as SearchIcon } from 'react-feather';\r\nimport { Theme } from 'src/theme';\r\n\r\ninterface SearchProps {\r\n  className?: string;\r\n  isFocused?: boolean;\r\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void;\r\n  onClickAway?: () => void;\r\n  onFocus?: (event: FocusEvent<HTMLInputElement>) => void;\r\n  onSelect?: (result: any) => void;\r\n  query: string;\r\n  results: any[];\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(1),\r\n    paddingRight: theme.spacing(1)\r\n  },\r\n  search: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    height: 44,\r\n    borderRadius: 22,\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(2),\r\n    backgroundColor: theme.palette.background.dark\r\n  },\r\n  searchInput: {\r\n    flexGrow: 1,\r\n    marginLeft: theme.spacing(1)\r\n  },\r\n  avatar: {\r\n    height: 32,\r\n    width: 32\r\n  }\r\n}));\r\n\r\nconst Search: FC<SearchProps> = forwardRef(\r\n  (\r\n    {\r\n      className,\r\n      isFocused,\r\n      onChange,\r\n      onClickAway,\r\n      onFocus,\r\n      onSelect,\r\n      query,\r\n      results,\r\n      ...rest\r\n    },\r\n    ref\r\n  ) => {\r\n    const classes = useStyles();\r\n\r\n    const displayResults = query && isFocused;\r\n\r\n    const handleSelect = (result: any): void => {\r\n      if (onSelect) {\r\n        onSelect(result);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <ClickAwayListener onClickAway={onClickAway}>\r\n        <div\r\n          className={clsx(classes.root, className)}\r\n          // @ts-ignore\r\n          ref={ref}\r\n          {...rest}\r\n        >\r\n          <div className={classes.search}>\r\n            <SvgIcon fontSize=\"small\" color=\"action\">\r\n              <SearchIcon />\r\n            </SvgIcon>\r\n            <Input\r\n              className={classes.searchInput}\r\n              disableUnderline\r\n              onChange={onChange}\r\n              onFocus={onFocus}\r\n              placeholder=\"Search contacts\"\r\n              value={query}\r\n            />\r\n          </div>\r\n          {displayResults && (\r\n            <Box mt={2}>\r\n              <Typography variant=\"h6\" color=\"textSecondary\">\r\n                Contacts\r\n              </Typography>\r\n              <List>\r\n                {results.map(result => {\r\n                  return (\r\n                    <ListItem\r\n                      button\r\n                      key={result.id}\r\n                      onClick={() => handleSelect(result)}\r\n                    >\r\n                      <ListItemAvatar>\r\n                        <Avatar\r\n                          src={result.avatar}\r\n                          className={classes.avatar}\r\n                        />\r\n                      </ListItemAvatar>\r\n                      <ListItemText\r\n                        primary={result.name}\r\n                        primaryTypographyProps={{\r\n                          noWrap: true,\r\n                          variant: 'h6',\r\n                          color: 'textPrimary'\r\n                        }}\r\n                      />\r\n                    </ListItem>\r\n                  );\r\n                })}\r\n              </List>\r\n            </Box>\r\n          )}\r\n        </div>\r\n      </ClickAwayListener>\r\n    );\r\n  }\r\n);\r\n\r\nSearch.propTypes = {\r\n  className: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  onClickAway: PropTypes.func,\r\n  onFocus: PropTypes.func,\r\n  onSelect: PropTypes.func,\r\n  query: PropTypes.string,\r\n  results: PropTypes.array\r\n};\r\n\r\nSearch.defaultProps = {\r\n  isFocused: false,\r\n  query: '',\r\n  results: []\r\n};\r\n\r\nexport default Search;\r\n","import {\r\n  Avatar,\r\n  Box,\r\n  Chip,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport { AvatarGroup } from '@material-ui/lab';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React, { FC } from 'react';\r\nimport { Theme } from 'src/theme';\r\nimport { Thread } from 'src/types/chat';\r\n\r\ninterface ThreadItemProps {\r\n  active?: boolean;\r\n  className?: string;\r\n  onSelect: () => void;\r\n  thread: Thread;\r\n}\r\n\r\nconst getDetails = (thread, currentUserId: string) => {\r\n  const otherParticipants = thread.participants.filter(\r\n    participant => participant.id !== currentUserId\r\n  );\r\n  const displayNames = otherParticipants\r\n    .reduce((names, participant) => [...names, participant.name], [])\r\n    .join(', ');\r\n  let displayText = '';\r\n  const lastMessage = thread.messages[thread.messages.length - 1];\r\n\r\n  if (lastMessage) {\r\n    const sender = lastMessage.senderId === currentUserId ? 'Me: ' : '';\r\n    const message =\r\n      lastMessage.contentType === 'image' ? 'Sent a photo' : lastMessage.body;\r\n\r\n    displayText = `${sender}${message}`;\r\n  }\r\n\r\n  return {\r\n    otherParticipants,\r\n    displayNames,\r\n    displayText\r\n  };\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  active: {\r\n    backgroundColor: theme.palette.action.selected,\r\n    boxShadow: `inset 4px 0px 0px ${theme.palette.secondary.main}`\r\n  },\r\n  smallAvatar: {\r\n    height: 30,\r\n    width: 30,\r\n    '&:first-child': {\r\n      marginTop: 10\r\n    }\r\n  },\r\n  unreadIndicator: {\r\n    height: 18,\r\n    marginTop: 2,\r\n    minWidth: 18,\r\n    padding: 2\r\n  }\r\n}));\r\n\r\nconst ThreadItem: FC<ThreadItemProps> = ({\r\n  active,\r\n  className,\r\n  thread,\r\n  onSelect,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  // We hardcode the current user ID because the mocked that is not in sync with the auth provider.\r\n  // When implementing this app with a real database, replace this ID with the ID from Auth Context.\r\n  const details = getDetails(thread, '5e86809283e28b96d2d38537');\r\n\r\n  return (\r\n    <ListItem\r\n      button\r\n      className={clsx({ [classes.active]: active }, className)}\r\n      onClick={onSelect}\r\n      {...rest}\r\n    >\r\n      <ListItemAvatar>\r\n        <AvatarGroup\r\n          classes={{\r\n            avatar:\r\n              details.otherParticipants.length > 1 ? classes.smallAvatar : null\r\n          }}\r\n          max={2}\r\n        >\r\n          {details.otherParticipants.map(participant => (\r\n            <Avatar\r\n              alt=\"Person\"\r\n              key={participant.id}\r\n              src={participant.avatar}\r\n            />\r\n          ))}\r\n        </AvatarGroup>\r\n      </ListItemAvatar>\r\n      <ListItemText\r\n        primary={details.displayNames}\r\n        primaryTypographyProps={{\r\n          noWrap: true,\r\n          variant: 'h6',\r\n          color: 'textPrimary'\r\n        }}\r\n        secondary={details.displayText}\r\n        secondaryTypographyProps={{\r\n          noWrap: true,\r\n          variant: 'body2',\r\n          color: 'textSecondary'\r\n        }}\r\n      />\r\n      <Box ml={2} display=\"flex\" flexDirection=\"column\" alignItems=\"flex-end\">\r\n        {thread.unreadCount > 0 && (\r\n          <Chip\r\n            className={classes.unreadIndicator}\r\n            color=\"secondary\"\r\n            size=\"small\"\r\n            label={thread.unreadCount}\r\n          />\r\n        )}\r\n      </Box>\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nThreadItem.propTypes = {\r\n  active: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  onSelect: PropTypes.func,\r\n  // @ts-ignore\r\n  thread: PropTypes.object.isRequired\r\n};\r\n\r\nThreadItem.defaultProps = {\r\n  active: false,\r\n  onSelect: () => {}\r\n};\r\n\r\nexport default ThreadItem;\r\n","import { List, makeStyles } from '@material-ui/core';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React, { FC } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector } from 'src/store';\r\nimport ThreadItem from './ThreadItem';\r\n\r\ninterface ThreadListProps {\r\n  className?: string;\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {}\r\n}));\r\n\r\nconst ThreadList: FC<ThreadListProps> = ({ className, ...rest }) => {\r\n  const classes = useStyles();\r\n  const { threads, activeThreadId } = useSelector(state => state.chat);\r\n  const history = useHistory();\r\n\r\n  const handleSelect = (threadId: string): void => {\r\n    const thread = threads.byId[threadId];\r\n    let threadKey = '';\r\n\r\n    if (thread.type === 'GROUP') {\r\n      threadKey = thread.id;\r\n    } else {\r\n      // We hardcode the current user ID because the mocked that is not in sync with the auth provider.\r\n      // When implementing this app with a real database, replace this ID with the ID from Auth Context.\r\n      const otherParticipant = thread.participants.find(\r\n        participant => participant.id !== '5e86809283e28b96d2d38537'\r\n      );\r\n\r\n      threadKey = otherParticipant.username;\r\n    }\r\n\r\n    history.push(`/app/chat/${threadKey}`);\r\n  };\r\n\r\n  return (\r\n    <List className={clsx(classes.root, className)} {...rest}>\r\n      {threads.allIds.map(threadId => (\r\n        <ThreadItem\r\n          active={activeThreadId === threadId}\r\n          key={threadId}\r\n          onSelect={() => handleSelect(threadId)}\r\n          thread={threads.byId[threadId]}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nThreadList.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default ThreadList;\r\n","import { makeStyles } from '@material-ui/core';\r\nimport clsx from 'clsx';\r\nimport React, { ChangeEvent, FC, FocusEvent, useState } from 'react';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Contact } from 'src/types/chat';\r\nimport axios from 'src/utils/axios';\r\nimport Search from './Search';\r\nimport ThreadList from './ThreadList';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  hideThreadList: {\r\n    display: 'none'\r\n  }\r\n}));\r\n\r\nconst RecentThreads: FC = () => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [isSearchFocused, setSearchFocused] = useState(false);\r\n  const [searchQuery, setSearchQuery] = useState<string>('');\r\n  const [searchResults, setSearchResults] = useState<Contact[]>([]);\r\n\r\n  const handleSearchClickAway = (): void => {\r\n    setSearchFocused(false);\r\n    setSearchQuery('');\r\n  };\r\n\r\n  const handleSearchChange = async (\r\n    event: ChangeEvent<HTMLInputElement>\r\n  ): Promise<void> => {\r\n    try {\r\n      event.persist();\r\n\r\n      const { value } = event.target;\r\n\r\n      setSearchQuery(value);\r\n\r\n      if (value) {\r\n        const response = await axios.get<{ results: any[] }>(\r\n          '/api/chat/search',\r\n          {\r\n            params: {\r\n              query: value\r\n            }\r\n          }\r\n        );\r\n\r\n        setSearchResults(response.data.results);\r\n      } else {\r\n        setSearchResults([]);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const handleSearchFocus = (event: FocusEvent<HTMLInputElement>): void => {\r\n    event.persist();\r\n    setSearchFocused(true);\r\n  };\r\n\r\n  const handleSearchSelect = (result: any): void => {\r\n    setSearchFocused(false);\r\n    setSearchQuery('');\r\n    history.push(`/app/chat/${result.username}`);\r\n  };\r\n\r\n  return (\r\n    <PerfectScrollbar options={{ suppressScrollX: true }}>\r\n      <Search\r\n        isFocused={isSearchFocused}\r\n        onChange={handleSearchChange}\r\n        onClickAway={handleSearchClickAway}\r\n        onFocus={handleSearchFocus}\r\n        onSelect={handleSearchSelect}\r\n        query={searchQuery}\r\n        results={searchResults}\r\n      />\r\n      <ThreadList\r\n        className={clsx({ [classes.hideThreadList]: isSearchFocused })}\r\n      />\r\n    </PerfectScrollbar>\r\n  );\r\n};\r\n\r\nexport default RecentThreads;\r\n","import {\r\n  Box,\r\n  IconButton,\r\n  makeStyles,\r\n  SvgIcon,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React, { FC } from 'react';\r\nimport { Edit as EditIcon, Settings as SettingsIcon } from 'react-feather';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { Theme } from 'src/theme';\r\n\r\ninterface SettingsProps {\r\n  className?: string;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    height: 64,\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst Settings: FC<SettingsProps> = ({ className, ...rest }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={clsx(classes.root, className)} {...rest}>\r\n      <Typography variant=\"h3\" color=\"textPrimary\">\r\n        Chats\r\n      </Typography>\r\n      <Box flexGrow={1} />\r\n      <IconButton>\r\n        <SvgIcon fontSize=\"small\">\r\n          <SettingsIcon />\r\n        </SvgIcon>\r\n      </IconButton>\r\n      <IconButton component={RouterLink} to=\"/app/chat/new\">\r\n        <SvgIcon fontSize=\"small\">\r\n          <EditIcon />\r\n        </SvgIcon>\r\n      </IconButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nSettings.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default Settings;\r\n","import {\r\n  Avatar,\r\n  Box,\r\n  Chip,\r\n  ClickAwayListener,\r\n  Input,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  makeStyles,\r\n  Paper,\r\n  Popper,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React, { ChangeEvent, FC, FocusEvent, useRef, useState } from 'react';\r\nimport { Theme } from 'src/theme';\r\nimport { Contact } from 'src/types/chat';\r\nimport axios from 'src/utils/axios';\r\n\r\ninterface ComposeHeaderProps {\r\n  className?: string;\r\n  onAddRecipient?: (contact: Contact) => void;\r\n  onRemoveRecipient?: (recipientId: string) => void;\r\n  recipients: any[];\r\n}\r\n\r\nconst getFilteredSearchResults = (\r\n  results: Contact[],\r\n  recipients: any[]\r\n): any[] => {\r\n  const recipientIds = recipients.reduce((acc, recipient) => {\r\n    return [...acc, recipient.id];\r\n  }, []);\r\n\r\n  return results.filter(result => !recipientIds.includes(result.id));\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    alignItems: 'center',\r\n    display: 'flex',\r\n    padding: theme.spacing(2)\r\n  },\r\n  container: {\r\n    marginLeft: theme.spacing(1)\r\n  },\r\n  recipient: {\r\n    marginLeft: 4,\r\n    marginRight: 4\r\n  },\r\n  input: {\r\n    backgroundColor: theme.palette.background.default,\r\n    borderRadius: 16,\r\n    height: 32,\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(2)\r\n  },\r\n  compactInput: {\r\n    maxWidth: 120\r\n  },\r\n  searchResults: {\r\n    marginTop: theme.spacing(1),\r\n    maxWidth: '100%',\r\n    width: 320\r\n  }\r\n}));\r\n\r\nconst ComposeHeader: FC<ComposeHeaderProps> = ({\r\n  className,\r\n  onAddRecipient,\r\n  onRemoveRecipient,\r\n  recipients,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const containerRef = useRef<HTMLDivElement | null>(null);\r\n  const [query, setQuery] = useState<string>('');\r\n  const [isSearchFocused, setSearchFocused] = useState<boolean>(true);\r\n  const [searchResults, setSearchResults] = useState<Contact[]>([]);\r\n\r\n  const filteredSearchResults = getFilteredSearchResults(\r\n    searchResults,\r\n    recipients\r\n  );\r\n  const displayResults = query && isSearchFocused;\r\n\r\n  const handleSearchChange = async (\r\n    event: ChangeEvent<HTMLInputElement>\r\n  ): Promise<void> => {\r\n    try {\r\n      event.persist();\r\n\r\n      const { value } = event.target;\r\n\r\n      setQuery(value);\r\n\r\n      if (value) {\r\n        const response = await axios.get<{ results: any[] }>(\r\n          '/api/chat/search',\r\n          {\r\n            params: {\r\n              query: value\r\n            }\r\n          }\r\n        );\r\n\r\n        setSearchResults(response.data.results);\r\n      } else {\r\n        setSearchResults([]);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const handleSearchBlur = (event: FocusEvent<HTMLInputElement>) => {\r\n    event.persist();\r\n\r\n    if (!displayResults) {\r\n      setSearchFocused(false);\r\n    }\r\n  };\r\n\r\n  const handleSearchFocus = (event: FocusEvent<HTMLInputElement>) => {\r\n    event.persist();\r\n    setSearchFocused(true);\r\n  };\r\n\r\n  const handleSearchResultsClickAway = (): void => {\r\n    setSearchFocused(false);\r\n  };\r\n\r\n  const handleAddRecipient = (contact: Contact): void => {\r\n    setQuery('');\r\n\r\n    if (onAddRecipient) {\r\n      onAddRecipient(contact);\r\n    }\r\n  };\r\n\r\n  const handleRemoveRecipient = (recipientId: string): void => {\r\n    if (onRemoveRecipient) {\r\n      onRemoveRecipient(recipientId);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={clsx(classes.root, className)} {...rest}>\r\n      <Typography variant=\"body1\" color=\"textSecondary\">\r\n        To:\r\n      </Typography>\r\n      <div className={classes.container} ref={containerRef}>\r\n        {recipients.map(recipient => (\r\n          <Chip\r\n            className={classes.recipient}\r\n            color=\"primary\"\r\n            key={recipient.id}\r\n            label={recipient.name}\r\n            onDelete={() => handleRemoveRecipient(recipient.id)}\r\n            size=\"small\"\r\n          />\r\n        ))}\r\n        <Input\r\n          className={clsx(classes.input, {\r\n            [classes.compactInput]: recipients.length > 0\r\n          })}\r\n          disableUnderline\r\n          onBlur={handleSearchBlur}\r\n          onChange={handleSearchChange}\r\n          onFocus={handleSearchFocus}\r\n          placeholder={recipients.length === 0 ? 'Search contacts' : ''}\r\n          value={query}\r\n        />\r\n      </div>\r\n      {displayResults && (\r\n        <ClickAwayListener onClickAway={handleSearchResultsClickAway}>\r\n          <Popper\r\n            anchorEl={containerRef.current}\r\n            open={isSearchFocused}\r\n            placement=\"bottom-start\"\r\n          >\r\n            <Paper className={classes.searchResults}>\r\n              {filteredSearchResults.length === 0 ? (\r\n                <Box pb={2} pt={2} px={2} textAlign=\"center\">\r\n                  <Typography color=\"textPrimary\" gutterBottom variant=\"h4\">\r\n                    Nothing Found\r\n                  </Typography>\r\n                  <Typography color=\"textSecondary\" variant=\"body2\">\r\n                    We couldn&apos;t find any matches for &quot;\r\n                    {query}\r\n                    &quot;. Try checking for typos or using complete words.\r\n                  </Typography>\r\n                </Box>\r\n              ) : (\r\n                <>\r\n                  <Box px={2} pt={2}>\r\n                    <Typography color=\"textSecondary\" variant=\"h6\">\r\n                      Contacts\r\n                    </Typography>\r\n                  </Box>\r\n                  <List>\r\n                    {filteredSearchResults.map(result => (\r\n                      <ListItem\r\n                        button\r\n                        key={result.id}\r\n                        onClick={() => handleAddRecipient(result)}\r\n                      >\r\n                        <ListItemAvatar>\r\n                          <Avatar src={result.avatar} />\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                          primary={result.name}\r\n                          primaryTypographyProps={{\r\n                            color: 'textPrimary',\r\n                            noWrap: true,\r\n                            variant: 'h6'\r\n                          }}\r\n                        />\r\n                      </ListItem>\r\n                    ))}\r\n                  </List>\r\n                </>\r\n              )}\r\n            </Paper>\r\n          </Popper>\r\n        </ClickAwayListener>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nComposeHeader.propTypes = {\r\n  className: PropTypes.string,\r\n  onAddRecipient: PropTypes.func,\r\n  onRemoveRecipient: PropTypes.func,\r\n  recipients: PropTypes.array\r\n};\r\n\r\nComposeHeader.defaultProps = {\r\n  onAddRecipient: () => {},\r\n  onRemoveRecipient: () => {},\r\n  recipients: []\r\n};\r\n\r\nexport default ComposeHeader;\r\n","import {\r\n  Avatar,\r\n  Box,\r\n  IconButton,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  makeStyles,\r\n  Menu,\r\n  MenuItem,\r\n  SvgIcon,\r\n  Tooltip,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport { AvatarGroup } from '@material-ui/lab';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React, { FC, useRef, useState } from 'react';\r\nimport {\r\n  Archive as ArchiveIcon,\r\n  BellOff as BellOffIcon,\r\n  Camera as CameraIcon,\r\n  MoreVertical as MoreIcon,\r\n  Phone as PhoneIcon,\r\n  Slash as SlashIcon,\r\n  Trash as TrashIcon\r\n} from 'react-feather';\r\nimport { Theme } from 'src/theme';\r\nimport { ThreadParticipant } from 'src/types/chat';\r\n\r\ninterface DetailHeaderProps {\r\n  className?: string;\r\n  participants: ThreadParticipant[];\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    alignItems: 'center',\r\n    backgroundColor: theme.palette.background.default,\r\n    borderBottom: `1px solid ${theme.palette.divider}`,\r\n    display: 'flex',\r\n    flexShrink: 0,\r\n    minHeight: 64,\r\n    paddingBottom: theme.spacing(1),\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(2),\r\n    paddingTop: theme.spacing(1)\r\n  },\r\n  smallAvatar: {\r\n    height: 30,\r\n    width: 30,\r\n    '&:first-child': {\r\n      marginTop: 10\r\n    }\r\n  }\r\n}));\r\n\r\nconst DetailHeader: FC<DetailHeaderProps> = ({\r\n  className,\r\n  participants,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const moreRef = useRef<any>(null);\r\n  const [openMenu, setOpenMenu] = useState<boolean>(false);\r\n\r\n  // We hardcode the current user ID because the mocked that is not in sync with the auth provider.\r\n  // When implementing this app with a real database, replace this ID with the ID from Auth Context.\r\n  const otherParticipants = participants.filter(\r\n    participant => participant.id !== '5e86809283e28b96d2d38537'\r\n  );\r\n  const displayNames = otherParticipants\r\n    .reduce((names, participant) => [...names, participant.name], [])\r\n    .join(', ');\r\n\r\n  const handleMenuOpen = (): void => {\r\n    setOpenMenu(true);\r\n  };\r\n\r\n  const handleMenuClose = (): void => {\r\n    setOpenMenu(false);\r\n  };\r\n\r\n  return (\r\n    <div className={clsx(classes.root, className)} {...rest}>\r\n      <Box alignItems=\"center\" display=\"flex\">\r\n        <AvatarGroup\r\n          classes={{\r\n            avatar: otherParticipants.length > 1 ? classes.smallAvatar : null\r\n          }}\r\n          max={2}\r\n        >\r\n          {otherParticipants.map(participant => (\r\n            <Avatar\r\n              alt=\"Person\"\r\n              key={participant.id}\r\n              src={participant.avatar}\r\n            />\r\n          ))}\r\n        </AvatarGroup>\r\n        <Typography color=\"textPrimary\" variant=\"h5\">\r\n          {displayNames}\r\n        </Typography>\r\n      </Box>\r\n      <Box flexGrow={1} />\r\n      <IconButton>\r\n        <SvgIcon fontSize=\"small\">\r\n          <PhoneIcon />\r\n        </SvgIcon>\r\n      </IconButton>\r\n      <IconButton>\r\n        <SvgIcon fontSize=\"small\">\r\n          <CameraIcon />\r\n        </SvgIcon>\r\n      </IconButton>\r\n      <Tooltip title=\"More options\">\r\n        <IconButton onClick={handleMenuOpen} ref={moreRef}>\r\n          <SvgIcon fontSize=\"small\">\r\n            <MoreIcon />\r\n          </SvgIcon>\r\n        </IconButton>\r\n      </Tooltip>\r\n      <Menu\r\n        anchorEl={moreRef.current}\r\n        keepMounted\r\n        elevation={1}\r\n        onClose={handleMenuClose}\r\n        open={openMenu}\r\n      >\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <SvgIcon fontSize=\"small\">\r\n              <SlashIcon />\r\n            </SvgIcon>\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Block contact\" />\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <SvgIcon fontSize=\"small\">\r\n              <TrashIcon />\r\n            </SvgIcon>\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Delete thread\" />\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <SvgIcon fontSize=\"small\">\r\n              <ArchiveIcon />\r\n            </SvgIcon>\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Archive thread\" />\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <ListItemIcon>\r\n            <SvgIcon fontSize=\"small\">\r\n              <BellOffIcon />\r\n            </SvgIcon>\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Mute notifications\" />\r\n        </MenuItem>\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\n\r\nDetailHeader.propTypes = {\r\n  className: PropTypes.string,\r\n  participants: PropTypes.array\r\n};\r\n\r\nDetailHeader.defaultProps = {\r\n  participants: []\r\n};\r\n\r\nexport default DetailHeader;\r\n","import {\r\n  Avatar,\r\n  Divider,\r\n  IconButton,\r\n  Input,\r\n  makeStyles,\r\n  Paper,\r\n  SvgIcon,\r\n  Tooltip\r\n} from '@material-ui/core';\r\nimport AddPhotoIcon from '@material-ui/icons/AddPhotoAlternate';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React, { ChangeEvent, FC, KeyboardEvent, useRef, useState } from 'react';\r\nimport { Send as SendIcon } from 'react-feather';\r\nimport useAuth from 'src/hooks/useAuth';\r\nimport { Theme } from 'src/theme';\r\n\r\ninterface MessageComposerProps {\r\n  className?: string;\r\n  disabled?: boolean;\r\n  onSend?: (value: string) => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    alignItems: 'center',\r\n    backgroundColor: theme.palette.background.default,\r\n    display: 'flex',\r\n    padding: theme.spacing(1, 2)\r\n  },\r\n  inputContainer: {\r\n    flexGrow: 1,\r\n    marginLeft: theme.spacing(2),\r\n    padding: theme.spacing(1)\r\n  },\r\n  divider: {\r\n    height: 24,\r\n    width: 1\r\n  },\r\n  fileInput: {\r\n    display: 'none'\r\n  }\r\n}));\r\n\r\nconst MessageComposer: FC<MessageComposerProps> = ({\r\n  className,\r\n  disabled,\r\n  onSend,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const { user } = useAuth();\r\n  const fileInputRef = useRef<HTMLInputElement | null>(null);\r\n  const [body, setBody] = useState<string>('');\r\n\r\n  const handleAttach = (): void => {\r\n    fileInputRef.current.click();\r\n  };\r\n\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n    event.persist();\r\n    setBody(event.target.value);\r\n  };\r\n\r\n  const handleKeyUp = (event: KeyboardEvent<HTMLInputElement>): void => {\r\n    if (event.keyCode === 13) {\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  const handleSend = (): void => {\r\n    if (!body) {\r\n      return;\r\n    }\r\n\r\n    if (onSend) {\r\n      onSend(body);\r\n    }\r\n\r\n    setBody('');\r\n  };\r\n\r\n  return (\r\n    <div className={clsx(classes.root, className)} {...rest}>\r\n      <Avatar alt=\"Person\" src={user.avatar} />\r\n      <Paper variant=\"outlined\" className={classes.inputContainer}>\r\n        <Input\r\n          disableUnderline\r\n          fullWidth\r\n          value={body}\r\n          onChange={handleChange}\r\n          onKeyUp={handleKeyUp}\r\n          placeholder=\"Leave a message\"\r\n          disabled={disabled}\r\n        />\r\n      </Paper>\r\n      <Tooltip title=\"Send\">\r\n        <span>\r\n          <IconButton\r\n            color=\"secondary\"\r\n            disabled={!body || disabled}\r\n            onClick={handleSend}\r\n          >\r\n            <SvgIcon fontSize=\"small\">\r\n              <SendIcon />\r\n            </SvgIcon>\r\n          </IconButton>\r\n        </span>\r\n      </Tooltip>\r\n      <Divider className={classes.divider} />\r\n      <Tooltip title=\"Attach photo\">\r\n        <span>\r\n          <IconButton edge=\"end\" onClick={handleAttach} disabled={disabled}>\r\n            <AddPhotoIcon />\r\n          </IconButton>\r\n        </span>\r\n      </Tooltip>\r\n      <Tooltip title=\"Attach file\">\r\n        <span>\r\n          <IconButton edge=\"end\" onClick={handleAttach} disabled={disabled}>\r\n            <AttachFileIcon />\r\n          </IconButton>\r\n        </span>\r\n      </Tooltip>\r\n      <input className={classes.fileInput} ref={fileInputRef} type=\"file\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nMessageComposer.propTypes = {\r\n  className: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  onSend: PropTypes.func\r\n};\r\n\r\nMessageComposer.defaultProps = {\r\n  disabled: false,\r\n  onSend: () => {}\r\n};\r\n\r\nexport default MessageComposer;\r\n","import { Avatar, Box, Link, makeStyles, Typography } from '@material-ui/core';\r\nimport clsx from 'clsx';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport React, { FC, useState } from 'react';\r\n// @ts-ignore\r\nimport { Lightbox } from 'react-modal-image';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport useAuth from 'src/hooks/useAuth';\r\nimport { Theme } from 'src/theme';\r\nimport { Thread, ThreadMessage } from 'src/types/chat';\r\n\r\ninterface MessageItemProps {\r\n  className?: string;\r\n  message: ThreadMessage;\r\n  thread: Thread;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    marginBottom: theme.spacing(2),\r\n    display: 'flex'\r\n  },\r\n  avatar: {\r\n    height: 32,\r\n    width: 32\r\n  },\r\n  image: {\r\n    cursor: 'pointer',\r\n    height: 'auto',\r\n    maxWidth: '100%',\r\n    width: 380\r\n  }\r\n}));\r\n\r\nconst MessageItem: FC<MessageItemProps> = ({\r\n  className,\r\n  message,\r\n  thread,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const { user } = useAuth();\r\n  const [selectedImage, setSelectedImage] = useState<string | null>(null);\r\n\r\n  // Since chat mock db is not synced with external auth providers\r\n  // we set the user details from user auth state instead of thread participants\r\n  const sender = thread.participants.find(\r\n    _participant => _participant.id === message.senderId\r\n  );\r\n  const senderDetails =\r\n    message.senderId === '5e86809283e28b96d2d38537'\r\n      ? {\r\n          avatar: user.avatar,\r\n          name: 'Me',\r\n          type: 'user'\r\n        }\r\n      : {\r\n          avatar: sender.avatar,\r\n          name: sender.name,\r\n          type: 'contact'\r\n        };\r\n\r\n  return (\r\n    <div className={clsx(classes.root, className)} {...rest}>\r\n      <Box\r\n        display=\"flex\"\r\n        maxWidth={500}\r\n        ml={senderDetails.type === 'user' ? 'auto' : 0}\r\n      >\r\n        <Avatar className={classes.avatar} src={senderDetails.avatar} />\r\n        <Box ml={2}>\r\n          <Box\r\n            bgcolor={\r\n              senderDetails.type === 'user'\r\n                ? 'secondary.main'\r\n                : 'background.default'\r\n            }\r\n            borderRadius=\"borderRadius\"\r\n            boxShadow={1}\r\n            color={\r\n              senderDetails.type === 'user'\r\n                ? 'secondary.contrastText'\r\n                : 'text.primary'\r\n            }\r\n            px={2}\r\n            py={1}\r\n          >\r\n            <Link color=\"inherit\" component={RouterLink} to=\"#\" variant=\"h6\">\r\n              {senderDetails.name}\r\n            </Link>\r\n            <Box mt={1}>\r\n              {message.contentType === 'image' ? (\r\n                <Box mt={2} onClick={() => setSelectedImage(message.body)}>\r\n                  <img\r\n                    alt=\"Attachment\"\r\n                    className={classes.image}\r\n                    src={message.body}\r\n                  />\r\n                </Box>\r\n              ) : (\r\n                <Typography color=\"inherit\" variant=\"body1\">\r\n                  {message.body}\r\n                </Typography>\r\n              )}\r\n            </Box>\r\n          </Box>\r\n          <Box mt={1} display=\"flex\" justifyContent=\"flex-end\">\r\n            <Typography noWrap color=\"textSecondary\" variant=\"caption\">\r\n              {moment(message.createdAt).fromNow()}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n      {selectedImage && (\r\n        <Lightbox\r\n          large={selectedImage}\r\n          onClose={() => setSelectedImage(null)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nMessageItem.propTypes = {\r\n  className: PropTypes.string,\r\n  // @ts-ignore\r\n  message: PropTypes.object.isRequired,\r\n  // @ts-ignore\r\n  thread: PropTypes.object.isRequired\r\n};\r\n\r\nexport default MessageItem;\r\n","import { makeStyles } from '@material-ui/core';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport React, { FC, useEffect, useRef } from 'react';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { Theme } from 'src/theme';\r\nimport { Thread } from 'src/types/chat';\r\nimport MessageItem from './MessageItem';\r\n\r\ninterface MessageListProps {\r\n  className?: string;\r\n  thread: Thread;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst MessageList: FC<MessageListProps> = ({ className, thread, ...rest }) => {\r\n  const classes = useStyles();\r\n  const scrollRef = useRef<any>(null);\r\n\r\n  useEffect(() => {\r\n    const scrollMessagesToBottom = () => {\r\n      if (scrollRef.current) {\r\n        scrollRef.current._container.scrollTop =\r\n          scrollRef.current._container.scrollHeight;\r\n      }\r\n    };\r\n\r\n    scrollMessagesToBottom();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [thread.messages]);\r\n\r\n  return (\r\n    <PerfectScrollbar\r\n      className={clsx(classes.root, className)}\r\n      options={{ suppressScrollX: true }}\r\n      ref={scrollRef}\r\n      {...rest}\r\n    >\r\n      {thread.messages.map(message => (\r\n        <MessageItem key={message.id} message={message} thread={thread} />\r\n      ))}\r\n    </PerfectScrollbar>\r\n  );\r\n};\r\n\r\nMessageItem.propTypes = {\r\n  className: PropTypes.string,\r\n  // @ts-ignore\r\n  thread: PropTypes.object.isRequired\r\n};\r\n\r\nexport default MessageList;\r\n","import { Box, Divider, makeStyles } from '@material-ui/core';\r\nimport React, { FC, useEffect } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport {\r\n  addRecipient,\r\n  getParticipants,\r\n  getThread,\r\n  markThreadAsSeen,\r\n  removeRecipient,\r\n  resetActiveThread\r\n} from 'src/slices/chat';\r\nimport { RootState, useDispatch, useSelector } from 'src/store';\r\nimport { Theme } from 'src/theme';\r\nimport ComposeHeader from './ComposeHeader';\r\nimport DetailHeader from './DetailHeader';\r\nimport MessageComposer from './MessageComposer';\r\nimport MessageList from './MessageList';\r\n\r\nconst threadSelector = (state: RootState): any => {\r\n  const { threads, activeThreadId } = state.chat;\r\n  const thread = threads.byId[activeThreadId];\r\n\r\n  if (thread) {\r\n    return thread;\r\n  }\r\n\r\n  return {\r\n    id: null,\r\n    messages: [],\r\n    participants: [],\r\n    unreadMessages: 0\r\n  };\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nconst Thread: FC = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { threadKey } = useParams();\r\n  const { activeThreadId, participants, recipients } = useSelector(\r\n    state => state.chat\r\n  );\r\n  const thread = useSelector(state => threadSelector(state));\r\n\r\n  // In our case there two possible routes\r\n  // one that contains chat/new and one with a chat/:threadKey\r\n  // if threadKey does not exist, it means that the chat is in compose mode\r\n  const mode = threadKey ? 'DETAIL' : 'COMPOSE';\r\n\r\n  const handleAddRecipient = (recipient: any): void => {\r\n    dispatch(addRecipient(recipient));\r\n  };\r\n\r\n  const handleRemoveRecipient = (recipientId: string): void => {\r\n    dispatch(removeRecipient(recipientId));\r\n  };\r\n\r\n  const handleSendMessage = async (value: string): Promise<void> => {\r\n    try {\r\n      // Handle send message\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getDetails = async () => {\r\n      dispatch(getParticipants(threadKey));\r\n\r\n      try {\r\n        await dispatch(getThread(threadKey));\r\n      } catch (err) {\r\n        // If thread key is not a valid key (thread id or username)\r\n        // the server throws an error, this means that the user tried a shady route\r\n        // and we redirect him on the compose route\r\n        console.error(err);\r\n        history.push('/app/chat/new');\r\n      }\r\n    };\r\n\r\n    // If path contains a thread key we do the following:\r\n    // 1) Load the thread participants based on the key\r\n    // 2) Try to find a related thread based on the key, it might not exist if it is a new tread\r\n    if (threadKey) {\r\n      getDetails();\r\n    } else {\r\n      // If no thread key specifid, but an active thread id exists in the\r\n      // store, reset that key. This means that the user navigated from details mode to compose\r\n      if (activeThreadId) {\r\n        dispatch(resetActiveThread());\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [threadKey]);\r\n\r\n  useEffect(() => {\r\n    if (activeThreadId) {\r\n      // Maybe we should also check if active thread\r\n      // has unread messages before triggering this\r\n      dispatch(markThreadAsSeen(activeThreadId));\r\n    }\r\n  }, [dispatch, activeThreadId]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {mode === 'DETAIL' && <DetailHeader participants={participants} />}\r\n      {mode === 'COMPOSE' && (\r\n        <ComposeHeader\r\n          onAddRecipient={handleAddRecipient}\r\n          onRemoveRecipient={handleRemoveRecipient}\r\n          recipients={recipients}\r\n        />\r\n      )}\r\n      <Box flexGrow={1} overflow=\"hidden\">\r\n        <MessageList thread={thread} />\r\n      </Box>\r\n      <Divider />\r\n      <MessageComposer disabled onSend={handleSendMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Thread;\r\n","import { makeStyles } from '@material-ui/core';\r\nimport React, { FC, useEffect, useRef } from 'react';\r\nimport Page from 'src/components/Page';\r\nimport { getThreads } from 'src/slices/chat';\r\nimport { useDispatch } from 'src/store';\r\nimport { Theme } from 'src/theme';\r\nimport RecentThreads from './RecentThreads';\r\nimport Settings from './Settings';\r\nimport Thread from './Thread';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    display: 'flex',\r\n    height: '100%',\r\n    overflow: 'hidden',\r\n    position: 'relative'\r\n  },\r\n  sidebar: {\r\n    backgroundColor: theme.palette.background.default,\r\n    borderRight: `1px solid ${theme.palette.divider}`,\r\n    width: 300\r\n  }\r\n}));\r\n\r\nconst ChatView: FC = () => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const pageRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    dispatch(getThreads());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Page className={classes.root} title=\"Chat\" ref={pageRef}>\r\n      <div className={classes.sidebar}>\r\n        <Settings />\r\n        <RecentThreads />\r\n      </div>\r\n      <Thread />\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default ChatView;\r\n"],"sourceRoot":""}