{"version":3,"sources":["hooks/useIsMountedRef.ts","utils/getInitials.ts","components/ProjectCard.tsx","views/project/ProjectBrowseView/Filter/MultiSelect.tsx","views/project/ProjectBrowseView/Filter/index.tsx","views/project/ProjectBrowseView/Header.tsx","views/project/ProjectBrowseView/Results.tsx","views/project/ProjectBrowseView/index.tsx"],"names":["useIsMountedRef","isMounted","useRef","useEffect","current","getInitials","name","replace","split","slice","map","v","toUpperCase","join","useStyles","makeStyles","theme","root","image","height","backgroundColor","palette","background","dark","likedButton","color","colors","red","membersIcon","marginLeft","spacing","marginRight","ProjectCard","className","project","rest","classes","useState","isLiked","setLiked","undefined","likesCount","setLikesCount","clsx","p","display","alignItems","mt","alt","src","author","avatar","ml","component","RouterLink","to","variant","title","moment","updatedAt","fromNow","pb","px","caption","py","container","justify","item","numeral","budget","format","currency","location","type","pl","pr","onClick","prevLikes","fontSize","membersCount","flexGrow","value","rating","size","readOnly","menuItem","padding","formControlLabel","width","margin","MultiSelect","label","options","onChange","anchorRef","openMenu","setOpenMenu","handleOptionToggle","event","newValue","target","checked","push","filter","Button","ref","Menu","anchorEl","elevation","onClose","open","PaperProps","style","option","MenuItem","key","FormControlLabel","control","Checkbox","indexOf","selectOptions","searchInput","chip","Filter","inputValue","setInputValue","chips","setChips","handleMultiSelectChange","Card","Box","Input","disableUnderline","fullWidth","persist","onKeyUp","keyCode","includes","prevChips","placeholder","Divider","flexWrap","Chip","onDelete","prevChip","handleChipDelete","defaultChecked","Header","Grid","Breadcrumbs","separator","aria-label","Link","Typography","startIcon","SvgIcon","position","bottom","left","content","primary","main","sortButton","textTransform","letterSpacing","Results","projects","sortRef","openSort","setOpenSort","selectedSort","setSelectedSort","mode","setMode","justifyContent","mb","length","ToggleButtonGroup","exclusive","ToggleButton","id","md","sm","xs","Pagination","count","ListItemText","minHeight","paddingTop","paddingBottom","ProjectBrowseView","isMountedRef","setProjects","getProjects","useCallback","a","axios","get","response","data","console","error","Page","Container","maxWidth"],"mappings":"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","file":"static/js/43.6dbd3746.chunk.js","sourcesContent":["import { MutableRefObject, useEffect, useRef } from 'react';\n\nconst useIsMountedRef = (): MutableRefObject<boolean> => {\n  const isMounted = useRef(true);\n\n  useEffect(\n    () => () => {\n      isMounted.current = false;\n    },\n    []\n  );\n\n  return isMounted;\n};\n\nexport default useIsMountedRef;\n","const getInitials = (name: string = '') => {\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ')\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase())\n    .join('');\n};\n\nexport default getInitials;\n","import {\n  Avatar,\n  Box,\n  Card,\n  CardMedia,\n  colors,\n  Divider,\n  Grid,\n  IconButton,\n  Link,\n  makeStyles,\n  SvgIcon,\n  Tooltip,\n  Typography\n} from '@material-ui/core';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport { Rating } from '@material-ui/lab';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport numeral from 'numeral';\nimport PropTypes from 'prop-types';\nimport React, { FC, useState } from 'react';\nimport { Users as UsersIcon } from 'react-feather';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Theme } from 'src/theme';\nimport { Project } from 'src/types/project';\nimport getInitials from 'src/utils/getInitials';\n\ninterface ProjectCardProps {\n  className?: string;\n  project: Project;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  image: {\n    height: 200,\n    backgroundColor: theme.palette.background.dark\n  },\n  likedButton: {\n    color: colors.red[600]\n  },\n  membersIcon: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(1)\n  }\n}));\n\nconst ProjectCard: FC<ProjectCardProps> = ({ className, project, ...rest }) => {\n  const classes = useStyles();\n  const [isLiked, setLiked] = useState<boolean>(project.isLiked);\n  const [likesCount, setLikesCount] = useState<number>(project.likesCount === undefined ? 0 : project.likesCount);\n\n  const handleLike = (): void => {\n    setLiked(true);\n    setLikesCount(prevLikes => prevLikes + 1);\n  };\n\n  const handleUnlike = (): void => {\n    setLiked(false);\n    setLikesCount(prevLikes => prevLikes - 1);\n  };\n\n  return (\n    <Card className={clsx(classes.root, className)} {...rest}>\n      <Box p={3}>\n        <CardMedia className={classes.image} image={project.image} />\n        <Box display=\"flex\" alignItems=\"center\" mt={2}>\n          <Avatar alt=\"Author\" src={project.author.avatar}>\n            {getInitials(project.author.name)}\n          </Avatar>\n          <Box ml={2}>\n            <Link\n              color=\"textPrimary\"\n              component={RouterLink}\n              to=\"#\"\n              variant=\"h5\"\n            >\n              {project.title}\n            </Link>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              by{' '}\n              <Link\n                color=\"textPrimary\"\n                component={RouterLink}\n                to=\"#\"\n                variant=\"h6\"\n              >\n                {project.author.name}\n              </Link>{' '}\n              | Updated {moment(project.updatedAt).fromNow()}\n            </Typography>\n          </Box>\n        </Box>\n      </Box>\n      <Box pb={2} px={3}>\n        <Typography color=\"textSecondary\" variant=\"body2\">\n          {project.caption}\n        </Typography>\n      </Box>\n      <Box py={2} px={3}>\n        <Grid alignItems=\"center\" container justify=\"space-between\" spacing={3}>\n          <Grid item>\n            <Typography variant=\"h5\" color=\"textPrimary\">\n              {numeral(project.budget).format(`${project.currency}0,0.00`)}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              Budget\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"h5\" color=\"textPrimary\">\n              {project.location}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              Location\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"h5\" color=\"textPrimary\">\n              {project.type}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              Type\n            </Typography>\n          </Grid>\n        </Grid>\n      </Box>\n      <Divider />\n      <Box py={2} pl={2} pr={3} display=\"flex\" alignItems=\"center\">\n        {isLiked ? (\n          <Tooltip title=\"Unlike\">\n            <IconButton className={classes.likedButton} onClick={handleUnlike}>\n              <FavoriteIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        ) : (\n          <Tooltip title=\"Like\">\n            <IconButton onClick={handleLike}>\n              <FavoriteBorderIcon fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        )}\n        <Typography variant=\"subtitle2\" color=\"textSecondary\">\n          {likesCount}\n        </Typography>\n        <SvgIcon\n          fontSize=\"small\"\n          color=\"action\"\n          className={classes.membersIcon}\n        >\n          <UsersIcon />\n        </SvgIcon>\n        <Typography variant=\"subtitle2\" color=\"textSecondary\">\n          {project.membersCount}\n        </Typography>\n        <Box flexGrow={1} />\n        <Rating value={project.rating} size=\"small\" readOnly />\n      </Box>\n    </Card>\n  );\n};\n\nProjectCard.propTypes = {\n  className: PropTypes.string,\n  // @ts-ignore\n  project: PropTypes.object.isRequired\n};\n\nexport default ProjectCard;\n","import {\n  Button,\n  Checkbox,\n  FormControlLabel,\n  makeStyles,\n  Menu,\n  MenuItem\n} from '@material-ui/core';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport PropTypes from 'prop-types';\nimport React, { ChangeEvent, FC, useRef, useState } from 'react';\nimport { Theme } from 'src/theme';\n\ninterface MultiSelectProps {\n  label: string;\n  onChange?: (value: string[]) => void;\n  options: any[];\n  value: string[];\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  menuItem: {\n    padding: 0\n  },\n  formControlLabel: {\n    padding: theme.spacing(0.5, 2),\n    width: '100%',\n    margin: 0\n  }\n}));\n\nconst MultiSelect: FC<MultiSelectProps> = ({\n  label,\n  options,\n  value,\n  onChange\n}) => {\n  const classes = useStyles();\n  const anchorRef = useRef<any>(null);\n  const [openMenu, setOpenMenu] = useState<boolean>(false);\n\n  const handleMenuOpen = (): void => {\n    setOpenMenu(true);\n  };\n\n  const handleMenuClose = (): void => {\n    setOpenMenu(false);\n  };\n\n  const handleOptionToggle = (event: ChangeEvent<HTMLInputElement>): void => {\n    let newValue = [...value];\n\n    if (event.target.checked) {\n      newValue.push(event.target.value);\n    } else {\n      newValue = newValue.filter(item => item !== event.target.value);\n    }\n\n    if (onChange) {\n      onChange(newValue);\n    }\n  };\n\n  return (\n    <>\n      <Button onClick={handleMenuOpen} ref={anchorRef}>\n        {label}\n        <ArrowDropDownIcon />\n      </Button>\n      <Menu\n        anchorEl={anchorRef.current}\n        elevation={1}\n        onClose={handleMenuClose}\n        open={openMenu}\n        PaperProps={{ style: { width: 250 } }}\n      >\n        {options.map(option => (\n          <MenuItem className={classes.menuItem} key={option}>\n            <FormControlLabel\n              className={classes.formControlLabel}\n              control={\n                <Checkbox\n                  checked={value.indexOf(option) > -1}\n                  onChange={handleOptionToggle}\n                  value={option}\n                />\n              }\n              label={option}\n            />\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n};\n\nMultiSelect.propTypes = {\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  options: PropTypes.array.isRequired,\n  value: PropTypes.array.isRequired\n};\n\nexport default MultiSelect;\n","import {\n  Box,\n  Card,\n  Checkbox,\n  Chip,\n  Divider,\n  FormControlLabel,\n  Input,\n  makeStyles\n} from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { ChangeEvent, FC, KeyboardEvent, useState } from 'react';\nimport { Theme } from 'src/theme';\nimport MultiSelect from './MultiSelect';\n\ninterface FilterProps {\n  className?: string;\n}\n\nconst selectOptions = [\n  {\n    label: 'Type',\n    options: ['Freelance', 'Full Time', 'Part Time', 'Internship']\n  },\n  {\n    label: 'Level',\n    options: ['Novice', 'Expert']\n  },\n  {\n    label: 'Location',\n    options: [\n      'Africa',\n      'Asia',\n      'Australia',\n      'Europe',\n      'North America',\n      'South America'\n    ]\n  },\n  {\n    label: 'Roles',\n    options: ['Android', 'Web Developer', 'iOS']\n  }\n];\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  searchInput: {\n    marginLeft: theme.spacing(2)\n  },\n  chip: {\n    margin: theme.spacing(1)\n  }\n}));\n\nconst Filter: FC<FilterProps> = ({ className, ...rest }) => {\n  const classes = useStyles();\n  const [inputValue, setInputValue] = useState<string>('');\n  const [chips, setChips] = useState<string[]>([\n    'Freelance',\n    'Full Time',\n    'Novice',\n    'Europe',\n    'Android',\n    'Web Developer'\n  ]);\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    event.persist();\n    setInputValue(event.target.value);\n  };\n\n  const handleInputKeyup = (event: KeyboardEvent<HTMLInputElement>): void => {\n    event.persist();\n\n    if (event.keyCode === 13 && inputValue) {\n      if (!chips.includes(inputValue)) {\n        setChips(prevChips => [...prevChips, inputValue]);\n        setInputValue('');\n      }\n    }\n  };\n\n  const handleChipDelete = (chip: string): void => {\n    setChips(prevChips => prevChips.filter(prevChip => chip !== prevChip));\n  };\n\n  const handleMultiSelectChange = (value: string[]): void => {\n    setChips(value);\n  };\n\n  return (\n    <Card className={clsx(classes.root, className)} {...rest}>\n      <Box p={2} display=\"flex\" alignItems=\"center\">\n        <SearchIcon />\n        <Input\n          disableUnderline\n          fullWidth\n          className={classes.searchInput}\n          onChange={handleInputChange}\n          onKeyUp={handleInputKeyup}\n          placeholder=\"Enter a keyword\"\n          value={inputValue}\n        />\n      </Box>\n      <Divider />\n      <Box p={2} display=\"flex\" alignItems=\"center\" flexWrap=\"wrap\">\n        {chips.map(chip => (\n          <Chip\n            className={classes.chip}\n            key={chip}\n            label={chip}\n            onDelete={() => handleChipDelete(chip)}\n          />\n        ))}\n      </Box>\n      <Divider />\n      <Box display=\"flex\" alignItems=\"center\" flexWrap=\"wrap\" p={1}>\n        {selectOptions.map(option => (\n          <MultiSelect\n            key={option.label}\n            label={option.label}\n            onChange={handleMultiSelectChange}\n            options={option.options}\n            value={chips}\n          />\n        ))}\n        <Box flexGrow={1} />\n        <FormControlLabel\n          control={<Checkbox defaultChecked />}\n          label=\"In network\"\n        />\n      </Box>\n    </Card>\n  );\n};\n\nFilter.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Filter;\n","import {\n  Breadcrumbs,\n  Button,\n  Grid,\n  Link,\n  makeStyles,\n  SvgIcon,\n  Typography\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { FC } from 'react';\nimport { PlusCircle as PlusIcon } from 'react-feather';\nimport { Link as RouterLink } from 'react-router-dom';\n\ninterface HeaderProps {\n  className?: string;\n}\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Header: FC<HeaderProps> = ({ className, ...rest }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      alignItems=\"center\"\n      container\n      justify=\"space-between\"\n      spacing={3}\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Grid item>\n        <Breadcrumbs\n          separator={<NavigateNextIcon fontSize=\"small\" />}\n          aria-label=\"breadcrumb\"\n        >\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app\"\n            component={RouterLink}\n          >\n            Dashboard\n          </Link>\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app/projects\"\n            component={RouterLink}\n          >\n            Projects\n          </Link>\n          <Typography variant=\"body1\" color=\"textPrimary\">\n            Browse\n          </Typography>\n        </Breadcrumbs>\n        <Typography variant=\"h3\" color=\"textPrimary\">\n          See the latest opportunities\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Button\n          color=\"secondary\"\n          component={RouterLink}\n          to=\"/app/projects/create\"\n          variant=\"contained\"\n          startIcon={\n            <SvgIcon fontSize=\"small\">\n              <PlusIcon />\n            </SvgIcon>\n          }\n        >\n          Add new project\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import {\n  Box,\n  Button,\n  Grid,\n  ListItemText,\n  makeStyles,\n  Menu,\n  MenuItem,\n  Typography\n} from '@material-ui/core';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\nimport { Pagination, ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { FC, useRef, useState } from 'react';\nimport ProjectCard from 'src/components/ProjectCard';\nimport { Theme } from 'src/theme';\nimport { Project } from 'src/types/project';\n\ninterface ResultsProps {\n  className?: string;\n  projects: Project[];\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  title: {\n    position: 'relative',\n    '&:after': {\n      position: 'absolute',\n      bottom: -8,\n      left: 0,\n      content: '\" \"',\n      height: 3,\n      width: 48,\n      backgroundColor: theme.palette.primary.main\n    }\n  },\n  sortButton: {\n    textTransform: 'none',\n    letterSpacing: 0,\n    marginRight: theme.spacing(2)\n  }\n}));\n\nconst Results: FC<ResultsProps> = ({ className, projects, ...rest }) => {\n  const classes = useStyles();\n  const sortRef = useRef<HTMLButtonElement | null>(null);\n  const [openSort, setOpenSort] = useState<boolean>(false);\n  const [selectedSort, setSelectedSort] = useState<string>('Most popular');\n  const [mode, setMode] = useState<string>('grid');\n\n  const handleSortOpen = (): void => {\n    setOpenSort(true);\n  };\n\n  const handleSortClose = (): void => {\n    setOpenSort(false);\n  };\n\n  const handleSortSelect = (value: string): void => {\n    setSelectedSort(value);\n    setOpenSort(false);\n  };\n\n  const handleModeChange = (event: any, value: string): void => {\n    setMode(value);\n  };\n\n  return (\n    <div className={clsx(classes.root, className)} {...rest}>\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"space-between\"\n        flexWrap=\"wrap\"\n        mb={2}\n      >\n        <Typography className={classes.title} variant=\"h5\" color=\"textPrimary\">\n          Showing {projects.length} projects\n        </Typography>\n        <Box display=\"flex\" alignItems=\"center\">\n          <Button\n            className={classes.sortButton}\n            onClick={handleSortOpen}\n            ref={sortRef}\n          >\n            {selectedSort}\n            <ArrowDropDownIcon />\n          </Button>\n          <ToggleButtonGroup\n            exclusive\n            onChange={handleModeChange}\n            size=\"small\"\n            value={mode}\n          >\n            <ToggleButton value=\"grid\">\n              <ViewModuleIcon />\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </Box>\n      </Box>\n      <Grid container spacing={3}>\n        {projects.map(project => (\n          <Grid\n            item\n            key={project.id}\n            md={mode === 'grid' ? 4 : 12}\n            sm={mode === 'grid' ? 6 : 12}\n            xs={12}\n          >\n            <ProjectCard project={project} />\n          </Grid>\n        ))}\n      </Grid>\n      <Box mt={6} display=\"flex\" justifyContent=\"center\">\n        <Pagination count={3} />\n      </Box>\n      <Menu\n        anchorEl={sortRef.current}\n        onClose={handleSortClose}\n        open={openSort}\n        elevation={1}\n      >\n        {['Most recent', 'Popular', 'Price high', 'Price low', 'On sale'].map(\n          option => (\n            <MenuItem key={option} onClick={() => handleSortSelect(option)}>\n              <ListItemText primary={option} />\n            </MenuItem>\n          )\n        )}\n      </Menu>\n    </div>\n  );\n};\n\nResults.propTypes = {\n  className: PropTypes.string,\n  projects: PropTypes.array.isRequired\n};\n\nexport default Results;\n","import { Box, Container, makeStyles } from '@material-ui/core';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport Page from 'src/components/Page';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport { Theme } from 'src/theme';\nimport { Project } from 'src/types/project';\nimport axios from 'src/utils/axios';\nimport Filter from './Filter';\nimport Header from './Header';\nimport Results from './Results';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  }\n}));\n\nconst ProjectBrowseView: FC = () => {\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const [projects, setProjects] = useState<Project[]>([]);\n\n  const getProjects = useCallback(async () => {\n    try {\n      const response = await axios.get<{ projects: Project[] }>(\n        '/api/projects/projects'\n      );\n\n      if (isMountedRef.current) {\n        setProjects(response.data.projects);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getProjects();\n  }, [getProjects]);\n\n  return (\n    <Page className={classes.root} title=\"Project List\">\n      <Container maxWidth=\"lg\">\n        <Header />\n        <Box mt={3}>\n          <Filter />\n        </Box>\n        <Box mt={6}>\n          <Results projects={projects} />\n        </Box>\n      </Container>\n    </Page>\n  );\n};\n\nexport default ProjectBrowseView;\n"],"sourceRoot":""}