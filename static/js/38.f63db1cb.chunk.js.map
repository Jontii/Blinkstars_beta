{"version":3,"sources":["hooks/useIsMountedRef.ts","utils/getInitials.ts","components/Label.tsx","views/invoice/InvoiceListView/Header.tsx","views/invoice/InvoiceListView/Results.tsx","views/invoice/InvoiceListView/index.tsx"],"names":["useIsMountedRef","isMounted","useRef","useEffect","current","getInitials","name","replace","split","slice","map","v","toUpperCase","join","useStyles","makeStyles","theme","root","fontFamily","typography","alignItems","borderRadius","display","flexGrow","whiteSpace","cursor","flexShrink","fontSize","pxToRem","fontWeight","fontWeightMedium","height","justifyContent","letterSpacing","minWidth","padding","spacing","textTransform","primary","color","palette","main","backgroundColor","fade","secondary","error","success","warning","Label","className","children","rest","style","classes","clsx","action","marginBottom","marginLeft","Header","Grid","container","justify","item","Breadcrumbs","separator","aria-label","Link","variant","to","component","RouterLink","Typography","Box","mt","Button","startIcon","SvgIcon","statusOptions","id","sortOptions","value","label","queryField","width","statusField","flexBasis","bulkOperations","position","bulkActions","paddingLeft","paddingRight","marginTop","zIndex","background","default","bulkAction","avatar","colors","red","common","white","Results","invoices","useState","selectedInvoices","setSelectedInvoices","page","setPage","limit","setLimit","query","setQuery","sort","setSort","status","filters","setFilters","handleSelectAllInvoices","event","target","checked","invoice","filteredInvoices","filter","matches","containsQuery","forEach","property","customer","toLowerCase","includes","applyFilters","paginatedInvoices","applyPagination","enableBulkOperations","length","selectedSomeInvoices","selectedAllInvoices","Card","p","TextField","InputProps","startAdornment","InputAdornment","onChange","persist","placeholder","select","SelectProps","native","option","key","prevFilters","statusOption","Checkbox","indeterminate","Table","TableHead","TableRow","TableCell","align","TableBody","isInvoiceSelected","hover","selected","invoiceId","prevSelected","Avatar","ml","underline","email","invoiceStatus","canceled","text","paid","pending","getStatusLabel","numeral","totalAmount","format","currency","moment","issueDate","IconButton","TablePagination","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","rowsPerPage","rowsPerPageOptions","defaultProps","dark","minHeight","paddingTop","paddingBottom","InvoiceListView","isMountedRef","setInvoices","getInvoices","useCallback","a","axios","get","response","data","console","Page","title","Container","maxWidth"],"mappings":"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","file":"static/js/38.f63db1cb.chunk.js","sourcesContent":["import { MutableRefObject, useEffect, useRef } from 'react';\n\nconst useIsMountedRef = (): MutableRefObject<boolean> => {\n  const isMounted = useRef(true);\n\n  useEffect(\n    () => () => {\n      isMounted.current = false;\n    },\n    []\n  );\n\n  return isMounted;\n};\n\nexport default useIsMountedRef;\n","const getInitials = (name: string = '') => {\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ')\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase())\n    .join('');\n};\n\nexport default getInitials;\n","import { fade, makeStyles } from '@material-ui/core';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { FC, ReactNode } from 'react';\nimport { Theme } from 'src/theme';\n\ninterface LabelProps {\n  className?: string;\n  color?: 'primary' | 'secondary' | 'error' | 'warning' | 'success';\n  children?: ReactNode;\n  style?: {};\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    fontFamily: theme.typography.fontFamily,\n    alignItems: 'center',\n    borderRadius: 2,\n    display: 'inline-flex',\n    flexGrow: 0,\n    whiteSpace: 'nowrap',\n    cursor: 'default',\n    flexShrink: 0,\n    fontSize: theme.typography.pxToRem(12),\n    fontWeight: theme.typography.fontWeightMedium,\n    height: 20,\n    justifyContent: 'center',\n    letterSpacing: 0.5,\n    minWidth: 20,\n    padding: theme.spacing(0.5, 1),\n    textTransform: 'uppercase'\n  },\n  primary: {\n    color: theme.palette.primary.main,\n    backgroundColor: fade(theme.palette.primary.main, 0.08)\n  },\n  secondary: {\n    color: theme.palette.secondary.main,\n    backgroundColor: fade(theme.palette.secondary.main, 0.08)\n  },\n  error: {\n    color: theme.palette.error.main,\n    backgroundColor: fade(theme.palette.error.main, 0.08)\n  },\n  success: {\n    color: theme.palette.success.main,\n    backgroundColor: fade(theme.palette.success.main, 0.08)\n  },\n  warning: {\n    color: theme.palette.warning.main,\n    backgroundColor: fade(theme.palette.warning.main, 0.08)\n  }\n}));\n\nconst Label: FC<LabelProps> = ({\n  className = '',\n  color = 'secondary',\n  children,\n  style,\n  ...rest\n}) => {\n  const classes = useStyles();\n\n  return (\n    <span\n      className={clsx(\n        classes.root,\n        {\n          [classes[color]]: color\n        },\n        className\n      )}\n      {...rest}\n    >\n      {children}\n    </span>\n  );\n};\n\nLabel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  color: PropTypes.oneOf([\n    'primary',\n    'secondary',\n    'error',\n    'warning',\n    'success'\n  ])\n};\n\nexport default Label;\n","import {\n  Box,\n  Breadcrumbs,\n  Button,\n  Grid,\n  Link,\n  makeStyles,\n  SvgIcon,\n  Typography\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { FC } from 'react';\nimport {\n  Download as DownloadIcon,\n  PlusCircle as PlusCircleIcon,\n  Upload as UploadIcon\n} from 'react-feather';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Theme } from 'src/theme';\n\ninterface HeaderProps {\n  className?: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  action: {\n    marginBottom: theme.spacing(1),\n    '& + &': {\n      marginLeft: theme.spacing(1)\n    }\n  }\n}));\n\nconst Header: FC<HeaderProps> = ({ className, ...rest }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      className={clsx(classes.root, className)}\n      container\n      justify=\"space-between\"\n      spacing={3}\n      {...rest}\n    >\n      <Grid item>\n        <Breadcrumbs\n          separator={<NavigateNextIcon fontSize=\"small\" />}\n          aria-label=\"breadcrumb\"\n        >\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app\"\n            component={RouterLink}\n          >\n            Dashboard\n          </Link>\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app/management\"\n            component={RouterLink}\n          >\n            Management\n          </Link>\n          <Typography variant=\"body1\" color=\"textPrimary\">\n            Invoices\n          </Typography>\n        </Breadcrumbs>\n        <Typography variant=\"h3\" color=\"textPrimary\">\n          All Invoices\n        </Typography>\n        <Box mt={2}>\n          <Button\n            className={classes.action}\n            startIcon={\n              <SvgIcon fontSize=\"small\">\n                <UploadIcon />\n              </SvgIcon>\n            }\n          >\n            Import\n          </Button>\n          <Button\n            className={classes.action}\n            startIcon={\n              <SvgIcon fontSize=\"small\">\n                <DownloadIcon />\n              </SvgIcon>\n            }\n          >\n            Export\n          </Button>\n        </Box>\n      </Grid>\n      <Grid item>\n        <Button\n          color=\"secondary\"\n          variant=\"contained\"\n          className={classes.action}\n          startIcon={\n            <SvgIcon fontSize=\"small\">\n              <PlusCircleIcon />\n            </SvgIcon>\n          }\n        >\n          New Invoice\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  Checkbox,\n  colors,\n  IconButton,\n  InputAdornment,\n  Link,\n  makeStyles,\n  SvgIcon,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  TextField,\n  Typography\n} from '@material-ui/core';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport numeral from 'numeral';\nimport PropTypes from 'prop-types';\nimport React, { ChangeEvent, FC, useState } from 'react';\nimport {\n  ArrowRight as ArrowRightIcon,\n  Edit as EditIcon,\n  Search as SearchIcon\n} from 'react-feather';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { Link as RouterLink } from 'react-router-dom';\nimport Label from 'src/components/Label';\nimport { Theme } from 'src/theme';\nimport { Invoice, InvoiceStatus } from 'src/types/invoice';\nimport getInitials from 'src/utils/getInitials';\n\ninterface ResultsProps {\n  className?: string;\n  invoices: Invoice[];\n}\n\ninterface Filters {\n  status?: InvoiceStatus;\n}\n\nconst statusOptions = [\n  {\n    id: 'all',\n    name: 'All'\n  },\n  {\n    id: 'paid',\n    name: 'Paid'\n  },\n  {\n    id: 'pending',\n    name: 'Pending'\n  },\n  {\n    id: 'canceled',\n    name: 'Canceled'\n  }\n];\n\nconst sortOptions = [\n  {\n    value: 'createdAt|desc',\n    label: 'Newest first'\n  },\n  {\n    value: 'createdAt|asc',\n    label: 'Oldest first'\n  }\n];\n\nconst getStatusLabel = (invoiceStatus: InvoiceStatus): JSX.Element => {\n  const map = {\n    canceled: {\n      text: 'Canceled',\n      color: 'error'\n    },\n    paid: {\n      text: 'Paid',\n      color: 'success'\n    },\n    pending: {\n      text: 'Pending',\n      color: 'warning'\n    }\n  };\n\n  const { text, color }: any = map[invoiceStatus];\n\n  return <Label color={color}>{text}</Label>;\n};\n\nconst applyFilters = (\n  invoices: Invoice[],\n  query: string,\n  filters: Filters\n): Invoice[] => {\n  return invoices.filter(invoice => {\n    let matches = true;\n\n    if (query) {\n      const properties = ['name', 'email'];\n      let containsQuery = false;\n\n      properties.forEach(property => {\n        if (\n          invoice.customer[property].toLowerCase().includes(query.toLowerCase())\n        ) {\n          containsQuery = true;\n        }\n      });\n\n      if (!containsQuery) {\n        matches = false;\n      }\n    }\n\n    if (filters.status && invoice.status !== filters.status) {\n      matches = false;\n    }\n\n    return matches;\n  });\n};\n\nconst applyPagination = (\n  invoices: Invoice[],\n  page: number,\n  limit: number\n): Invoice[] => {\n  return invoices.slice(page * limit, page * limit + limit);\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  queryField: {\n    width: 500\n  },\n  statusField: {\n    flexBasis: 200\n  },\n  bulkOperations: {\n    position: 'relative'\n  },\n  bulkActions: {\n    paddingLeft: 4,\n    paddingRight: 4,\n    marginTop: 6,\n    position: 'absolute',\n    width: '100%',\n    zIndex: 2,\n    backgroundColor: theme.palette.background.default\n  },\n  bulkAction: {\n    marginLeft: theme.spacing(2)\n  },\n  avatar: {\n    backgroundColor: colors.red[500],\n    color: colors.common.white\n  }\n}));\n\nconst Results: FC<ResultsProps> = ({ className, invoices, ...rest }) => {\n  const classes = useStyles();\n  const [selectedInvoices, setSelectedInvoices] = useState<string[]>([]);\n  const [page, setPage] = useState<number>(0);\n  const [limit, setLimit] = useState<number>(10);\n  const [query, setQuery] = useState<string>('');\n  const [sort, setSort] = useState<string>(sortOptions[0].value);\n  const [filters, setFilters] = useState<Filters>({\n    status: null\n  });\n\n  const handleQueryChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    event.persist();\n    setQuery(event.target.value);\n  };\n\n  const handleStatusChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    event.persist();\n\n    let value = null;\n\n    if (event.target.value !== 'all') {\n      value = event.target.value;\n    }\n\n    setFilters(prevFilters => ({\n      ...prevFilters,\n      status: value\n    }));\n  };\n\n  const handleSortChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    event.persist();\n    setSort(event.target.value);\n  };\n\n  const handleSelectAllInvoices = (\n    event: ChangeEvent<HTMLInputElement>\n  ): void => {\n    setSelectedInvoices(\n      event.target.checked ? invoices.map(invoice => invoice.id) : []\n    );\n  };\n\n  const handleSelectOneInvoice = (\n    event: ChangeEvent<HTMLInputElement>,\n    invoiceId: string\n  ): void => {\n    if (!selectedInvoices.includes(invoiceId)) {\n      setSelectedInvoices(prevSelected => [...prevSelected, invoiceId]);\n    } else {\n      setSelectedInvoices(prevSelected =>\n        prevSelected.filter(id => id !== invoiceId)\n      );\n    }\n  };\n\n  const handlePageChange = (event: any, newPage: number): void => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    setLimit(parseInt(event.target.value));\n  };\n\n  // Usually query is done on backend with indexing solutions\n  const filteredInvoices = applyFilters(invoices, query, filters);\n  const paginatedInvoices = applyPagination(filteredInvoices, page, limit);\n  const enableBulkOperations = selectedInvoices.length > 0;\n  const selectedSomeInvoices =\n    selectedInvoices.length > 0 && selectedInvoices.length < invoices.length;\n  const selectedAllInvoices = selectedInvoices.length === invoices.length;\n\n  return (\n    <Card className={clsx(classes.root, className)} {...rest}>\n      <Box p={2}>\n        <Box display=\"flex\" alignItems=\"center\">\n          <TextField\n            className={classes.queryField}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SvgIcon fontSize=\"small\" color=\"action\">\n                    <SearchIcon />\n                  </SvgIcon>\n                </InputAdornment>\n              )\n            }}\n            onChange={handleQueryChange}\n            placeholder=\"Search invoices by customer\"\n            value={query}\n            variant=\"outlined\"\n          />\n          <Box flexGrow={1} />\n          <TextField\n            label=\"Sort By\"\n            name=\"sort\"\n            onChange={handleSortChange}\n            select\n            SelectProps={{ native: true }}\n            value={sort}\n            variant=\"outlined\"\n          >\n            {sortOptions.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </TextField>\n        </Box>\n        <Box mt={2} display=\"flex\" alignItems=\"center\">\n          <TextField\n            className={classes.statusField}\n            label=\"Status\"\n            name=\"status\"\n            onChange={handleStatusChange}\n            select\n            SelectProps={{ native: true }}\n            value={filters.status || 'all'}\n            variant=\"outlined\"\n          >\n            {statusOptions.map(statusOption => (\n              <option key={statusOption.id} value={statusOption.id}>\n                {statusOption.name}\n              </option>\n            ))}\n          </TextField>\n        </Box>\n      </Box>\n      {enableBulkOperations && (\n        <div className={classes.bulkOperations}>\n          <div className={classes.bulkActions}>\n            <Checkbox\n              checked={selectedAllInvoices}\n              indeterminate={selectedSomeInvoices}\n              onChange={handleSelectAllInvoices}\n            />\n            <Button variant=\"outlined\" className={classes.bulkAction}>\n              Delete\n            </Button>\n            <Button variant=\"outlined\" className={classes.bulkAction}>\n              Edit\n            </Button>\n          </div>\n        </div>\n      )}\n      <PerfectScrollbar>\n        <Box minWidth={1200}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    checked={selectedAllInvoices}\n                    indeterminate={selectedSomeInvoices}\n                    onChange={handleSelectAllInvoices}\n                  />\n                </TableCell>\n                <TableCell>Customer</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Amount</TableCell>\n                <TableCell>ID</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell align=\"right\">Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {paginatedInvoices.map(invoice => {\n                const isInvoiceSelected = selectedInvoices.includes(invoice.id);\n\n                return (\n                  <TableRow hover key={invoice.id} selected={isInvoiceSelected}>\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        checked={isInvoiceSelected}\n                        onChange={event =>\n                          handleSelectOneInvoice(event, invoice.id)\n                        }\n                        value={isInvoiceSelected}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Box display=\"flex\" alignItems=\"center\">\n                        <Avatar className={classes.avatar}>\n                          {getInitials(invoice.customer.name)}\n                        </Avatar>\n                        <Box ml={2}>\n                          <Link\n                            variant=\"subtitle2\"\n                            color=\"textPrimary\"\n                            component={RouterLink}\n                            underline=\"none\"\n                            to=\"#\"\n                          >\n                            {invoice.customer.name}\n                          </Link>\n                          <Typography variant=\"body2\" color=\"textSecondary\">\n                            {invoice.customer.email}\n                          </Typography>\n                        </Box>\n                      </Box>\n                    </TableCell>\n                    <TableCell>{getStatusLabel(invoice.status)}</TableCell>\n                    <TableCell>\n                      {numeral(invoice.totalAmount).format(\n                        `${invoice.currency}0,0.00`\n                      )}\n                    </TableCell>\n                    <TableCell>{invoice.id}</TableCell>\n                    <TableCell>\n                      {moment(invoice.issueDate).format('DD/MM/YYYY')}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <IconButton component={RouterLink} to=\"#\">\n                        <SvgIcon fontSize=\"small\">\n                          <EditIcon />\n                        </SvgIcon>\n                      </IconButton>\n                      <IconButton\n                        component={RouterLink}\n                        to=\"/app/management/invoices/1\"\n                      >\n                        <SvgIcon fontSize=\"small\">\n                          <ArrowRightIcon />\n                        </SvgIcon>\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </Box>\n      </PerfectScrollbar>\n      <TablePagination\n        component=\"div\"\n        count={filteredInvoices.length}\n        onChangePage={handlePageChange}\n        onChangeRowsPerPage={handleLimitChange}\n        page={page}\n        rowsPerPage={limit}\n        rowsPerPageOptions={[5, 10, 25]}\n      />\n    </Card>\n  );\n};\n\nResults.propTypes = {\n  className: PropTypes.string,\n  invoices: PropTypes.array.isRequired\n};\n\nResults.defaultProps = {\n  invoices: []\n};\n\nexport default Results;\n","import { Box, Container, makeStyles } from '@material-ui/core';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport Page from 'src/components/Page';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport { Theme } from 'src/theme';\nimport { Invoice } from 'src/types/invoice';\nimport axios from 'src/utils/axios';\nimport Header from './Header';\nimport Results from './Results';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: 100\n  }\n}));\n\nconst InvoiceListView: FC = () => {\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const [invoices, setInvoices] = useState<Invoice[]>([]);\n\n  const getInvoices = useCallback(async () => {\n    try {\n      const response = await axios.get<{ invoices: Invoice[] }>(\n        '/api/invoices'\n      );\n\n      if (isMountedRef.current) {\n        setInvoices(response.data.invoices);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [isMountedRef]);\n\n  useEffect(() => {\n    getInvoices();\n  }, [getInvoices]);\n\n  return (\n    <Page className={classes.root} title=\"Invoice List\">\n      <Container maxWidth={false}>\n        <Header />\n        <Box mt={3}>\n          <Results invoices={invoices} />\n        </Box>\n      </Container>\n    </Page>\n  );\n};\n\nexport default InvoiceListView;\n"],"sourceRoot":""}