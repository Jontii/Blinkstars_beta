{"version":3,"sources":["views/extra/forms/ReduxFormView/BasicForm.tsx","views/extra/forms/ReduxFormView/index.tsx"],"names":["validationSchema","Yup","shape","email","required","firstName","lastName","password","min","max","policy","oneOf","submit","a","wait","console","error","SubmissionError","_error","renderTextField","input","label","meta","touched","invalid","rest","TextField","fullWidth","helperText","variant","renderCheckbox","Box","alignItems","display","ml","Checkbox","checked","value","onChange","Boolean","FormHelperText","reduxForm","form","validate","values","formErrors","validateSync","abortEarly","errors","inner","forEach","path","message","initialValues","handleSubmit","submitting","useState","isAlertVisible","setAlertVisible","onSubmit","Card","CardHeader","title","Divider","CardContent","mb","Alert","onClose","severity","justifyContent","my","CircularProgress","Grid","container","spacing","item","md","xs","Field","name","component","mt","type","Typography","color","Link","href","Button","disabled","size","useStyles","makeStyles","theme","root","backgroundColor","palette","background","dark","minHeight","paddingTop","paddingBottom","ReduxFormView","classes","Page","className","Container","maxWidth","Breadcrumbs","separator","fontSize","aria-label","to","RouterLink"],"mappings":"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","file":"static/js/81.64259dc6.chunk.js","sourcesContent":["import {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormHelperText,\n  Grid,\n  Link,\n  TextField,\n  Typography\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport PropTypes from 'prop-types';\nimport React, { FC, useState } from 'react';\nimport {\n  Field,\n  InjectedFormProps,\n  reduxForm,\n  SubmissionError\n} from 'redux-form';\nimport wait from 'src/utils/wait';\nimport * as Yup from 'yup';\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string().email().required('Required'),\n  firstName: Yup.string().required('Required'),\n  lastName: Yup.string().required('Required'),\n  password: Yup.string()\n    .min(7, 'Must be at least 7 characters')\n    .max(255)\n    .required('Required'),\n  policy: Yup.boolean().oneOf([true], 'This field must be checked')\n});\n\nconst validate = values => {\n  const formErrors = {};\n\n  try {\n    validationSchema.validateSync(values, { abortEarly: false });\n  } catch (errors) {\n    errors.inner.forEach(error => {\n      formErrors[error.path] = error.message;\n    });\n  }\n\n  return formErrors;\n};\n\nconst submit = async (): Promise<void> => {\n  try {\n    // NOTE: Make API request\n    await wait(1000);\n  } catch (err) {\n    console.error(err);\n    throw new SubmissionError({\n      _error: 'Login failed!'\n    });\n  }\n};\n\nconst renderTextField = ({\n  input,\n  label,\n  meta: { touched, invalid, error },\n  ...rest\n}) => {\n  return (\n    <TextField\n      error={touched && invalid}\n      fullWidth\n      helperText={touched && error}\n      label={label}\n      variant=\"outlined\"\n      {...input}\n      {...rest}\n    />\n  );\n};\n\nconst renderCheckbox = ({\n  input,\n  label,\n  meta: { touched, invalid, error },\n  ...rest\n}) => {\n  return (\n    <div>\n      <Box alignItems=\"center\" display=\"flex\" ml={-1}>\n        <Checkbox\n          checked={!!input.value}\n          onChange={input.onChange}\n          {...input}\n          {...rest}\n        />\n        {label}\n      </Box>\n      {Boolean(touched && invalid) && (\n        <FormHelperText error>{error}</FormHelperText>\n      )}\n    </div>\n  );\n};\n\nconst BasicForm: FC<InjectedFormProps> = ({ handleSubmit, submitting }) => {\n  const [isAlertVisible, setAlertVisible] = useState<boolean>(true);\n\n  return (\n    <form onSubmit={handleSubmit(submit)}>\n      <Card>\n        <CardHeader title=\"Basic Form\" />\n        <Divider />\n        <CardContent>\n          {isAlertVisible && (\n            <Box mb={3}>\n              <Alert onClose={() => setAlertVisible(false)} severity=\"info\">\n                This is an info alert - check it out!\n              </Alert>\n            </Box>\n          )}\n          {submitting ? (\n            <Box display=\"flex\" justifyContent=\"center\" my={5}>\n              <CircularProgress />\n            </Box>\n          ) : (\n            <>\n              <Grid container spacing={2}>\n                <Grid item md={6} xs={12}>\n                  <Field\n                    name=\"firstName\"\n                    label=\"First Name\"\n                    component={renderTextField}\n                  />\n                </Grid>\n                <Grid item md={6} xs={12}>\n                  <Field\n                    name=\"lastName\"\n                    label=\"Last Name\"\n                    component={renderTextField}\n                  />\n                </Grid>\n              </Grid>\n              <Box mt={2}>\n                <Field\n                  name=\"email\"\n                  label=\"Email Address\"\n                  type=\"email\"\n                  component={renderTextField}\n                />\n              </Box>\n              <Box mt={2}>\n                <Field\n                  name=\"password\"\n                  label=\"Password\"\n                  type=\"password\"\n                  component={renderTextField}\n                />\n              </Box>\n              <Box mt={2}>\n                <Field\n                  name=\"policy\"\n                  label={\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      I have read the{' '}\n                      <Link component=\"a\" href=\"#\" color=\"secondary\">\n                        Terms and Conditions\n                      </Link>\n                    </Typography>\n                  }\n                  component={renderCheckbox}\n                />\n              </Box>\n              <Box mt={2}>\n                <Button\n                  color=\"secondary\"\n                  disabled={submitting}\n                  fullWidth\n                  size=\"large\"\n                  type=\"submit\"\n                  variant=\"contained\"\n                >\n                  Sign up\n                </Button>\n              </Box>\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </form>\n  );\n};\n\nBasicForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  submitting: PropTypes.bool.isRequired\n};\n\nexport default reduxForm({\n  form: 'BasicForm',\n  validate,\n  initialValues: {\n    email: 'johnnydoe@yahoo.com',\n    firstName: 'John',\n    lastName: 'Doe',\n    password: 'thisisasecuredpassword',\n    policy: false\n  }\n})(BasicForm);\n","import {\n  Box,\n  Breadcrumbs,\n  Container,\n  Grid,\n  Link,\n  makeStyles,\n  Typography\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport React, { FC } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport Page from 'src/components/Page';\nimport { Theme } from 'src/theme';\nimport BasicForm from './BasicForm';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  }\n}));\n\nconst ReduxFormView: FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Page className={classes.root} title=\"Formik Form\">\n      <Container maxWidth=\"lg\">\n        <Breadcrumbs\n          separator={<NavigateNextIcon fontSize=\"small\" />}\n          aria-label=\"breadcrumb\"\n        >\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app\"\n            component={RouterLink}\n          >\n            Dashboard\n          </Link>\n          <Typography variant=\"body1\" color=\"textPrimary\">\n            Forms\n          </Typography>\n        </Breadcrumbs>\n        <Typography variant=\"h3\" color=\"textPrimary\">\n          Redux Form\n        </Typography>\n        <Box mt={3}>\n          <Grid container>\n            <Grid item xs={12} md={6}>\n              <BasicForm />\n            </Grid>\n          </Grid>\n        </Box>\n      </Container>\n    </Page>\n  );\n};\n\nexport default ReduxFormView;\n"],"sourceRoot":""}