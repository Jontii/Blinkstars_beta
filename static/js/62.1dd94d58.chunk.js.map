{"version":3,"sources":["views/calendar/CalendarView/AddEditEventForm.tsx","views/calendar/CalendarView/Header.tsx","views/calendar/CalendarView/Toolbar.tsx","views/calendar/CalendarView/index.tsx"],"names":["getInitialValues","event","range","_","merge","allDay","color","description","end","moment","add","toDate","start","title","submit","Date","useStyles","makeStyles","theme","root","confirmButton","marginLeft","spacing","AddEditEventForm","onAddComplete","onCancel","onDeleteComplete","onEditComplete","classes","dispatch","useDispatch","enqueueSnackbar","useSnackbar","isCreating","handleDelete","a","deleteEvent","id","console","error","initialValues","validationSchema","Yup","shape","max","when","schema","min","required","onSubmit","values","resetForm","setErrors","setStatus","setSubmitting","data","updateEvent","createEvent","success","variant","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","setFieldTouched","setFieldValue","touched","Box","p","Typography","align","gutterBottom","TextField","Boolean","fullWidth","helperText","label","name","onBlur","onChange","value","mt","FormControlLabel","control","Switch","checked","DateTimePicker","inputVariant","onClick","date","FormHelperText","Divider","display","alignItems","IconButton","SvgIcon","flexGrow","Button","type","disabled","className","defaultProps","action","marginBottom","Header","onAddClick","rest","Grid","clsx","container","justify","item","Breadcrumbs","separator","fontSize","aria-label","Link","to","component","RouterLink","startIcon","viewOptions","icon","ViewConfigIcon","ViewWeekIcon","ViewDayIcon","ViewAgendaIcon","Toolbar","onDateNext","onDatePrev","onDateToday","onViewChange","view","ButtonGroup","size","Hidden","smDown","format","map","viewOption","Icon","Tooltip","key","selectedEventSelector","state","calendar","events","selectedEventId","find","_event","backgroundColor","palette","background","dark","minHeight","paddingTop","paddingBottom","marginTop","padding","default","borderColor","divider","typography","body2","secondary","main","contrastText","borderWidth","opacity","h6","body1","subtitle2","fontWeight","fontWeightMedium","text","subtitle1","CalendarView","calendarRef","useRef","useTheme","mobileDevice","useMediaQuery","breakpoints","down","useSelector","isModalOpen","selectedRange","selectedEvent","useState","setDate","setView","handleEventResize","handleEventDrop","handleModalClose","closeModal","useEffect","getEvents","calendarEl","current","calendarApi","getApi","newView","changeView","Page","Container","maxWidth","openModal","next","getDate","prev","today","Paper","allDayMaintainDuration","defaultDate","defaultView","droppable","editable","eventClick","arg","selectEvent","eventDrop","eventLimit","eventResizableFromStart","eventResize","header","height","ref","rerenderDelay","select","unselect","selectRange","selectable","weekends","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","listPlugin","timelinePlugin","Dialog","onClose","open"],"mappings":"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","file":"static/js/62.1dd94d58.chunk.js","sourcesContent":["import {\n  Box,\n  Button,\n  Divider,\n  FormControlLabel,\n  FormHelperText,\n  IconButton,\n  makeStyles,\n  SvgIcon,\n  Switch,\n  TextField,\n  Typography\n} from '@material-ui/core';\nimport { DateTimePicker } from '@material-ui/pickers';\nimport { Formik } from 'formik';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { useSnackbar } from 'notistack';\nimport PropTypes from 'prop-types';\nimport React, { FC } from 'react';\nimport { Trash as TrashIcon } from 'react-feather';\nimport { createEvent, deleteEvent, updateEvent } from 'src/slices/calendar';\nimport { useDispatch } from 'src/store';\nimport { Theme } from 'src/theme';\nimport { Event } from 'src/types/calendar';\nimport * as Yup from 'yup';\n\ninterface AddEditEventModalProps {\n  event?: Event;\n  onAddComplete?: () => void;\n  onCancel?: () => void;\n  onDeleteComplete?: () => void;\n  onEditComplete?: () => void;\n  range?: { start: number; end: number };\n}\n\nconst getInitialValues = (\n  event?: Event,\n  range?: { start: number; end: number }\n) => {\n  if (event) {\n    return _.merge(\n      {},\n      {\n        allDay: false,\n        color: '',\n        description: '',\n        end: moment().add(30, 'minutes').toDate(),\n        start: moment().toDate(),\n        title: '',\n        submit: null\n      },\n      event\n    );\n  }\n\n  if (range) {\n    return _.merge(\n      {},\n      {\n        allDay: false,\n        color: '',\n        description: '',\n        end: new Date(range.end),\n        start: new Date(range.start),\n        title: '',\n        submit: null\n      },\n      event\n    );\n  }\n\n  return {\n    allDay: false,\n    color: '',\n    description: '',\n    end: moment().add(30, 'minutes').toDate(),\n    start: moment().toDate(),\n    title: '',\n    submit: null\n  };\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  confirmButton: {\n    marginLeft: theme.spacing(2)\n  }\n}));\n\nconst AddEditEventForm: FC<AddEditEventModalProps> = ({\n  event,\n  onAddComplete,\n  onCancel,\n  onDeleteComplete,\n  onEditComplete,\n  range\n}) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const isCreating = !event;\n\n  const handleDelete = async (): Promise<void> => {\n    try {\n      await dispatch(deleteEvent(event.id));\n      onDeleteComplete();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={getInitialValues(event, range)}\n      validationSchema={Yup.object().shape({\n        allDay: Yup.bool(),\n        description: Yup.string().max(5000),\n        end: Yup.date().when(\n          'start',\n          (start: Date, schema: any) =>\n            start && schema.min(start, 'End date must be later than start date')\n        ),\n        start: Yup.date(),\n        title: Yup.string().max(255).required('Title is required')\n      })}\n      onSubmit={async (\n        values,\n        { resetForm, setErrors, setStatus, setSubmitting }\n      ) => {\n        try {\n          const data = {\n            allDay: values.allDay,\n            description: values.description,\n            end: values.end,\n            start: values.start,\n            title: values.title\n          };\n\n          if (event) {\n            await dispatch(updateEvent(event.id, data));\n          } else {\n            await dispatch(createEvent(data));\n          }\n\n          resetForm();\n          setStatus({ success: true });\n          setSubmitting(false);\n          enqueueSnackbar('Calendar updated', {\n            variant: 'success'\n          });\n\n          if (isCreating) {\n            onAddComplete();\n          } else {\n            onEditComplete();\n          }\n        } catch (err) {\n          console.error(err);\n          setStatus({ success: false });\n          setErrors({ submit: err.message });\n          setSubmitting(false);\n        }\n      }}\n    >\n      {({\n        errors,\n        handleBlur,\n        handleChange,\n        handleSubmit,\n        isSubmitting,\n        setFieldTouched,\n        setFieldValue,\n        touched,\n        values\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <Box p={3}>\n            <Typography\n              align=\"center\"\n              gutterBottom\n              variant=\"h3\"\n              color=\"textPrimary\"\n            >\n              {isCreating ? 'Add Event' : 'Edit Event'}\n            </Typography>\n          </Box>\n          <Box p={3}>\n            <TextField\n              error={Boolean(touched.title && errors.title)}\n              fullWidth\n              helperText={touched.title && errors.title}\n              label=\"Title\"\n              name=\"title\"\n              onBlur={handleBlur}\n              onChange={handleChange}\n              value={values.title}\n              variant=\"outlined\"\n            />\n            <Box mt={2}>\n              <TextField\n                error={Boolean(touched.description && errors.description)}\n                fullWidth\n                helperText={touched.description && errors.description}\n                label=\"Description\"\n                name=\"description\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.description}\n                variant=\"outlined\"\n              />\n            </Box>\n            <Box mt={2}>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={values.allDay}\n                    name=\"allDay\"\n                    onChange={handleChange}\n                  />\n                }\n                label=\"All day\"\n              />\n            </Box>\n            <Box mt={2}>\n              <DateTimePicker\n                fullWidth\n                inputVariant=\"outlined\"\n                label=\"Start date\"\n                name=\"start\"\n                onClick={() => setFieldTouched('end')}\n                onChange={date => setFieldValue('start', date)}\n                value={values.start}\n              />\n            </Box>\n            <Box mt={2}>\n              <DateTimePicker\n                fullWidth\n                inputVariant=\"outlined\"\n                label=\"End date\"\n                name=\"end\"\n                onClick={() => setFieldTouched('end')}\n                onChange={date => setFieldValue('end', date)}\n                value={values.end}\n              />\n            </Box>\n            {Boolean(touched.end && errors.end) && (\n              <Box mt={2}>\n                <FormHelperText error>{errors.end}</FormHelperText>\n              </Box>\n            )}\n          </Box>\n          <Divider />\n          <Box p={2} display=\"flex\" alignItems=\"center\">\n            {!isCreating && (\n              <IconButton onClick={() => handleDelete()}>\n                <SvgIcon>\n                  <TrashIcon />\n                </SvgIcon>\n              </IconButton>\n            )}\n            <Box flexGrow={1} />\n            <Button onClick={onCancel}>Cancel</Button>\n            <Button\n              variant=\"contained\"\n              type=\"submit\"\n              disabled={isSubmitting}\n              color=\"secondary\"\n              className={classes.confirmButton}\n            >\n              Confirm\n            </Button>\n          </Box>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nAddEditEventForm.propTypes = {\n  // @ts-ignore\n  event: PropTypes.object,\n  onAddComplete: PropTypes.func,\n  onCancel: PropTypes.func,\n  onDeleteComplete: PropTypes.func,\n  onEditComplete: PropTypes.func,\n  // @ts-ignore\n  range: PropTypes.object\n};\n\nAddEditEventForm.defaultProps = {\n  onAddComplete: () => {},\n  onCancel: () => {},\n  onDeleteComplete: () => {},\n  onEditComplete: () => {}\n};\n\nexport default AddEditEventForm;\n","import {\n  Breadcrumbs,\n  Button,\n  Grid,\n  Link,\n  makeStyles,\n  SvgIcon,\n  Typography\n} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { FC } from 'react';\nimport { PlusCircle as PlusCircleIcon } from 'react-feather';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Theme } from 'src/theme';\n\ninterface HeaderProps {\n  className?: string;\n  onAddClick?: () => void;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {},\n  action: {\n    marginBottom: theme.spacing(1),\n    '& + &': {\n      marginLeft: theme.spacing(1)\n    }\n  }\n}));\n\nconst Header: FC<HeaderProps> = ({ className, onAddClick, ...rest }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      className={clsx(classes.root, className)}\n      container\n      justify=\"space-between\"\n      spacing={3}\n      {...rest}\n    >\n      <Grid item>\n        <Breadcrumbs\n          separator={<NavigateNextIcon fontSize=\"small\" />}\n          aria-label=\"breadcrumb\"\n        >\n          <Link\n            variant=\"body1\"\n            color=\"inherit\"\n            to=\"/app\"\n            component={RouterLink}\n          >\n            Dashboard\n          </Link>\n          <Typography variant=\"body1\" color=\"textPrimary\">\n            Calendar\n          </Typography>\n        </Breadcrumbs>\n        <Typography variant=\"h3\" color=\"textPrimary\">\n          Here&apos;s what you planned\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Button\n          color=\"secondary\"\n          variant=\"contained\"\n          onClick={onAddClick}\n          className={classes.action}\n          startIcon={\n            <SvgIcon fontSize=\"small\">\n              <PlusCircleIcon />\n            </SvgIcon>\n          }\n        >\n          New Event\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string,\n  onAddClick: PropTypes.func\n};\n\nHeader.defaultProps = {\n  onAddClick: () => {}\n};\n\nexport default Header;\n","import {\n  Button,\n  ButtonGroup,\n  Grid,\n  Hidden,\n  IconButton,\n  makeStyles,\n  Tooltip,\n  Typography\n} from '@material-ui/core';\nimport ViewAgendaIcon from '@material-ui/icons/ViewAgendaOutlined';\nimport ViewConfigIcon from '@material-ui/icons/ViewComfyOutlined';\nimport ViewDayIcon from '@material-ui/icons/ViewDayOutlined';\nimport ViewWeekIcon from '@material-ui/icons/ViewWeekOutlined';\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React, { ElementType, FC, ReactNode } from 'react';\nimport { View } from 'src/types/calendar';\n\ninterface ToolbarProps {\n  children?: ReactNode;\n  className?: string;\n  date: Date;\n  onDateNext?: () => void;\n  onDatePrev?: () => void;\n  onDateToday?: () => void;\n  onAddClick?: () => void;\n  onViewChange?: (view: View) => void;\n  view: View;\n}\n\ninterface ViewOption {\n  label: string;\n  value: View;\n  icon: ElementType;\n}\n\nconst viewOptions: ViewOption[] = [\n  {\n    label: 'Month',\n    value: 'dayGridMonth',\n    icon: ViewConfigIcon\n  },\n  {\n    label: 'Week',\n    value: 'timeGridWeek',\n    icon: ViewWeekIcon\n  },\n  {\n    label: 'Day',\n    value: 'timeGridDay',\n    icon: ViewDayIcon\n  },\n  {\n    label: 'Agenda',\n    value: 'listWeek',\n    icon: ViewAgendaIcon\n  }\n];\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Toolbar: FC<ToolbarProps> = ({\n  className,\n  date,\n  onDateNext,\n  onDatePrev,\n  onDateToday,\n  onAddClick,\n  onViewChange,\n  view,\n  ...rest\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      className={clsx(classes.root, className)}\n      alignItems=\"center\"\n      container\n      justify=\"space-between\"\n      spacing={3}\n      {...rest}\n    >\n      <Grid item>\n        <ButtonGroup size=\"small\">\n          <Button onClick={onDatePrev}>Prev</Button>\n          <Button onClick={onDateToday}>Today</Button>\n          <Button onClick={onDateNext}>Next</Button>\n        </ButtonGroup>\n      </Grid>\n      <Hidden smDown>\n        <Grid item>\n          <Typography variant=\"h3\" color=\"textPrimary\">\n            {moment(date).format('MMMM YYYY')}\n          </Typography>\n        </Grid>\n        <Grid item>\n          {viewOptions.map(viewOption => {\n            const Icon = viewOption.icon;\n\n            return (\n              <Tooltip key={viewOption.value} title={viewOption.label}>\n                <IconButton\n                  color={viewOption.value === view ? 'secondary' : 'default'}\n                  onClick={() => onViewChange(viewOption.value)}\n                >\n                  <Icon />\n                </IconButton>\n              </Tooltip>\n            );\n          })}\n        </Grid>\n      </Hidden>\n    </Grid>\n  );\n};\n\nToolbar.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  date: PropTypes.instanceOf(Date).isRequired,\n  onDateNext: PropTypes.func,\n  onDatePrev: PropTypes.func,\n  onDateToday: PropTypes.func,\n  onAddClick: PropTypes.func,\n  onViewChange: PropTypes.func,\n  view: PropTypes.oneOf([\n    'dayGridMonth',\n    'timeGridWeek',\n    'timeGridDay',\n    'listWeek'\n  ])\n};\n\nToolbar.defaultProps = {\n  onDateNext: () => {},\n  onDatePrev: () => {},\n  onDateToday: () => {},\n  onAddClick: () => {},\n  onViewChange: () => {}\n};\n\nexport default Toolbar;\n","import '@fullcalendar/core/main.css';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport '@fullcalendar/daygrid/main.css';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport listPlugin from '@fullcalendar/list';\nimport '@fullcalendar/list/main.css';\nimport FullCalendar from '@fullcalendar/react';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport '@fullcalendar/timegrid/main.css';\nimport timelinePlugin from '@fullcalendar/timeline';\nimport {\n  Container,\n  Dialog,\n  makeStyles,\n  Paper,\n  useMediaQuery,\n  useTheme\n} from '@material-ui/core';\nimport moment from 'moment';\nimport React, { FC, useEffect, useRef, useState } from 'react';\nimport Page from 'src/components/Page';\nimport {\n  closeModal,\n  getEvents,\n  openModal,\n  selectEvent,\n  selectRange,\n  updateEvent\n} from 'src/slices/calendar';\nimport { RootState, useDispatch, useSelector } from 'src/store';\nimport { Theme } from 'src/theme';\nimport { Event, View } from 'src/types/calendar';\nimport AddEditEventForm from './AddEditEventForm';\nimport Header from './Header';\nimport Toolbar from './Toolbar';\n\nconst selectedEventSelector = (state: RootState): Event | null => {\n  const { events, selectedEventId } = state.calendar;\n\n  if (selectedEventId) {\n    return events.find(_event => _event.id === selectedEventId);\n  } else {\n    return null;\n  }\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3)\n  },\n  calendar: {\n    marginTop: theme.spacing(3),\n    padding: theme.spacing(2),\n    '& .fc-unthemed .fc-head': {\n      backgroundColor: theme.palette.background.dark\n    },\n    '& .fc-unthemed .fc-body': {\n      backgroundColor: theme.palette.background.default\n    },\n    '& .fc-unthemed .fc-row': {\n      borderColor: theme.palette.divider\n    },\n    '& .fc-unthemed .fc-axis': {\n      ...theme.typography.body2\n    },\n    '& .fc-unthemed .fc-divider': {\n      backgroundColor: theme.palette.background.dark,\n      borderColor: theme.palette.divider\n    },\n    '& .fc-unthemed th': {\n      borderColor: theme.palette.divider\n    },\n    '& .fc-unthemed td': {\n      borderColor: theme.palette.divider\n    },\n    '& .fc-unthemed td.fc-today': {\n      backgroundColor: theme.palette.background.dark\n    },\n    '& .fc-unthemed .fc-highlight': {\n      backgroundColor: theme.palette.background.dark\n    },\n    '& .fc-unthemed .fc-event': {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.secondary.contrastText,\n      borderWidth: 2,\n      opacity: 0.9,\n      '& .fc-time': {\n        ...theme.typography.h6,\n        color: 'inherit'\n      },\n      '& .fc-title': {\n        ...theme.typography.body1,\n        color: 'inherit'\n      }\n    },\n    '& .fc-unthemed .fc-day-top': {\n      ...theme.typography.body2\n    },\n    '& .fc-unthemed .fc-day-header': {\n      ...theme.typography.subtitle2,\n      fontWeight: theme.typography.fontWeightMedium,\n      color: theme.palette.text.secondary,\n      padding: theme.spacing(1),\n      backgroundColor: theme.palette.background.dark\n    },\n    '& .fc-unthemed .fc-list-view': {\n      borderColor: theme.palette.divider\n    },\n    '& .fc-unthemed .fc-list-empty': {\n      ...theme.typography.subtitle1\n    },\n    '& .fc-unthemed .fc-list-heading td': {\n      backgroundColor: theme.palette.background.dark,\n      borderColor: theme.palette.divider\n    },\n    '& .fc-unthemed .fc-list-heading-main': {\n      ...theme.typography.h6\n    },\n    '& .fc-unthemed .fc-list-heading-alt': {\n      ...theme.typography.h6\n    },\n    '& .fc-unthemed .fc-list-item:hover td': {\n      backgroundColor: theme.palette.background.dark\n    },\n    '& .fc-unthemed .fc-list-item-title': {\n      ...theme.typography.body1\n    },\n    '& .fc-unthemed .fc-list-item-time': {\n      ...theme.typography.body2\n    }\n  }\n}));\n\nconst CalendarView: FC = () => {\n  const classes = useStyles();\n  const calendarRef = useRef<FullCalendar | null>(null);\n  const theme = useTheme<Theme>();\n  const mobileDevice = useMediaQuery(theme.breakpoints.down('sm'));\n  const dispatch = useDispatch();\n  const { events, isModalOpen, selectedRange } = useSelector(\n    state => state.calendar\n  );\n  const selectedEvent = useSelector(selectedEventSelector);\n  const [date, setDate] = useState<Date>(moment().toDate());\n  const [view, setView] = useState<View>(\n    mobileDevice ? 'listWeek' : 'dayGridMonth'\n  );\n\n  const handleDateToday = (): void => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n\n      calendarApi.today();\n      setDate(calendarApi.getDate());\n    }\n  };\n\n  const handleViewChange = (newView: View): void => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n\n      calendarApi.changeView(newView);\n      setView(newView);\n    }\n  };\n\n  const handleDatePrev = (): void => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n\n      calendarApi.prev();\n      setDate(calendarApi.getDate());\n    }\n  };\n\n  const handleDateNext = (): void => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n\n      calendarApi.next();\n      setDate(calendarApi.getDate());\n    }\n  };\n\n  const handleAddClick = (): void => {\n    dispatch(openModal());\n  };\n\n  const handleRangeSelect = (arg: any): void => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n\n      calendarApi.unselect();\n    }\n\n    dispatch(selectRange(arg.start, arg.end));\n  };\n\n  const handleEventSelect = (arg: any): void => {\n    dispatch(selectEvent(arg.event.id));\n  };\n\n  const handleEventResize = async ({ event }: any): Promise<void> => {\n    try {\n      await dispatch(\n        updateEvent(event.id, {\n          allDay: event.allDay,\n          start: event.start,\n          end: event.end\n        })\n      );\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleEventDrop = async ({ event }: any): Promise<void> => {\n    try {\n      await dispatch(\n        updateEvent(event.id, {\n          allDay: event.allDay,\n          start: event.start,\n          end: event.end\n        })\n      );\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleModalClose = (): void => {\n    dispatch(closeModal());\n  };\n\n  useEffect(() => {\n    dispatch(getEvents());\n  }, [dispatch]);\n\n  useEffect(() => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n      const newView = mobileDevice ? 'listWeek' : 'dayGridMonth';\n\n      calendarApi.changeView(newView);\n      setView(newView);\n    }\n  }, [mobileDevice]);\n\n  return (\n    <Page className={classes.root} title=\"Calendar\">\n      <Container maxWidth={false}>\n        <Header onAddClick={handleAddClick} />\n        <Toolbar\n          date={date}\n          onDateNext={handleDateNext}\n          onDatePrev={handleDatePrev}\n          onDateToday={handleDateToday}\n          onViewChange={handleViewChange}\n          view={view}\n        />\n        <Paper className={classes.calendar}>\n          <FullCalendar\n            allDayMaintainDuration\n            defaultDate={date}\n            defaultView={view}\n            droppable\n            editable\n            eventClick={handleEventSelect}\n            eventDrop={handleEventDrop}\n            eventLimit\n            eventResizableFromStart\n            eventResize={handleEventResize}\n            events={events}\n            header={false}\n            height={800}\n            ref={calendarRef}\n            rerenderDelay={10}\n            select={handleRangeSelect}\n            selectable\n            weekends\n            plugins={[\n              dayGridPlugin,\n              timeGridPlugin,\n              interactionPlugin,\n              listPlugin,\n              timelinePlugin\n            ]}\n          />\n        </Paper>\n        <Dialog\n          maxWidth=\"sm\"\n          fullWidth\n          onClose={handleModalClose}\n          open={isModalOpen}\n        >\n          {/* Dialog renders its body even if not open */}\n          {isModalOpen && (\n            <AddEditEventForm\n              event={selectedEvent}\n              range={selectedRange}\n              onAddComplete={handleModalClose}\n              onCancel={handleModalClose}\n              onDeleteComplete={handleModalClose}\n              onEditComplete={handleModalClose}\n            />\n          )}\n        </Dialog>\n      </Container>\n    </Page>\n  );\n};\n\nexport default CalendarView;\n"],"sourceRoot":""}